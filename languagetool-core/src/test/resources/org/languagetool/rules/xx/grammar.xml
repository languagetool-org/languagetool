<?xml-stylesheet type="text/xsl" href="../print.xsl"
        title="Pretty print" ?>
<?xml-stylesheet type="text/css" href="../rules.css"
        title="Easy editing stylesheet" ?>
<!--
A demo rule file for LanguageTool
Copyright (C) 2005 Daniel Naber (http://www.danielnaber.de)

This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version.

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301, USA
-->
<rules lang="xx" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../../../../../../main/resources/org/languagetool/rules/rules.xsd">

    <!-- tests for phrase syntax -->
    <unification feature="case_sensitivity">
        <equivalence type="startupper">
            <token regexp="yes">\p{Lu}\p{Ll}+</token>
        </equivalence>
        <equivalence type="lowercase">
            <token regexp="yes">\p{Ll}+</token>
        </equivalence>
    </unification>
    <unification feature="gender">
        <equivalence type="masc">
            <token regexp="yes">.*_masc</token>
        </equivalence>
        <equivalence type="fem">
            <token regexp="yes">.*_fem</token>
        </equivalence>
    </unification>
    <unification feature="number">
        <equivalence type="plur">
            <token regexp="yes">.*_plur_.*</token>
        </equivalence>
        <equivalence type="sing">
            <token regexp="yes">.*_sing_.*</token>
        </equivalence>
    </unification>

    <phrases>
        <phrase id="UNIFICATION_PHRASE">
            <unify>
                <feature id="case_sensitivity">
                    <type id="startupper"/>
                </feature>
                <token/>
                <token>York</token>
            </unify>
        </phrase>
        <phrase id="NP">
            <token>trivial</token>
            <token>phrase</token>
            <token>demo</token>
            <token><exception>exception</exception></token>
        </phrase>
        <phrase id="COMPLEX_PHRASE">
            <token>complex</token>
            <includephrases>
                <phraseref idref="NP"/>
            </includephrases>
            <token>another</token>
        </phrase>
        <phrase id="DUMMY_VB1">
            <token regexp="yes">go|goa</token>
        </phrase>
        <phrase id="DUMMY_VB2">
            <token>goes</token>
        </phrase>
        <phrase id="DUMMY_VB3">
            <token>went</token>
        </phrase>
        <phrase id="COMPLEX_MULTIPLE">
            <token>first</token>
            <includephrases>
                <phraseref idref="DUMMY_VB1"/>
                <phraseref idref="DUMMY_VB2"/>
                <phraseref idref="DUMMY_VB3"/>
            </includephrases>
            <token>last</token>
        </phrase>
        <phrase id="SINGLE_TOKEN">
            <token>single</token>
        </phrase>
        <phrase id="TEST_INCLUDE">
            <token>beginning</token>
            <includephrases>
                <phraseref idref="COMPLEX_MULTIPLE"/>
                <phraseref idref="SINGLE_TOKEN"/>
            </includephrases>
            <token>end</token>
        </phrase>
        <phrase id="trivial_include">
            <includephrases>
                <phraseref idref="DUMMY_VB1"/>
            </includephrases>
            <includephrases>
                <phraseref idref="DUMMY_VB2"/>
            </includephrases>
        </phrase>
    </phrases>

    <category id="MISC" name="misc">
        <rulegroup id="ISSUE_373_TESTS" name="Rîles di saye">
            <rule id="ISSUE_373_TEST_SUGGESTION_INSIDE" name="xnel vola -> vo nel la">
                <regexp>[Xx][Nn](' el|el|i l') ((ri?|)vo?(la|ci|cial|chal))(-t i|-t ele|) nén</regexp>
                <message>Test 01: <suggestion>vo <match no="1"
                                                        regexp_match="[Xx].* (ri?|)vo?(la|ci|cial|chal)(-t i|-t ele|) nén"
                                                        regexp_replace="nel $1$2$3 nén"/></suggestion>.</message>
                <example correction="foo nel la-t i nén"><marker>xnel vola-t i nén</marker> co.</example>
            </rule>
            <rule id="ISSUE_373_TEST_SUGGESTION_OUTSIDE" name="xnel vola -> vo nel la">
                <regexp>[Xx][Nn](' el|el|i l') ((ri?|)vo?(la|ci|cial|chal))(-t i|-t ele|) nén</regexp>

                <message>Test 02: </message>
                <suggestion>vo <match no="1"
                                      regexp_match="[Xx].* (ri?|)vo?(la|ci|cial|chal)(-t i|-t ele|) nén"
                                      regexp_replace="nel $1$2$3 nén"/></suggestion>
                <example correction="foo nel la-t i nén"><marker>xnel vola-t i nén</marker> co.</example>
            </rule>
            <rule id="ISSUE_373_TEST_NO_ISSUE_1" name="znel vola -> vo nel la">
                <pattern>
                    <token regexp="yes">znel</token>
                    <token regexp="yes">(ri?|)vo?(la|ci|cial|chal)</token>
                </pattern>
                <message>Test 03: <suggestion>vo <match no="1" case_conversion="startlower"
                                                        regexp_match="[zZ](nel)"
                                                        regexp_replace="$1"></match> <match no="2"
                                                                                            regexp_match="(ri?|)vo?(la|ci|cial|chal)"
                                                                                            regexp_replace="$1$2"></match></suggestion>?</message>
                <example correction="vo nel rila"><marker>znel rvola</marker>-t i nén co.</example>
            </rule>
            <rule id="ISSUE_373_TEST_NO_ISSUE_2" name="znel vola -> vo nel la">
                <pattern>
                    <token regexp="yes">znel</token>
                    <token regexp="yes">(ri?|)vo?(la|ci|cial|chal)</token>
                </pattern>
                <message>Test 03: </message>
                <suggestion>vo <match no="1" case_conversion="startlower"
                                      regexp_match="[zZ](nel)"
                    regexp_replace="$1"></match> <match no="2"
                                                                          regexp_match="(ri?|)vo?(la|ci|cial|chal)"
                                                                          regexp_replace="$1$2"></match></suggestion>
                <example correction="vo nel rila"><marker>znel rvola</marker>-t i nén co.</example>
            </rule>
        </rulegroup>
    </category>
    
</rules>
