/* LanguageTool, a natural language style checker 
 * Copyright (C) 2005 Daniel Naber (http://www.danielnaber.de)
 * 
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301
 * USA
 */
package org.languagetool.rules.de;

import org.junit.Before;
import org.junit.Test;
import org.languagetool.AnalyzedSentence;
import org.languagetool.JLanguageTool;
import org.languagetool.Languages;
import org.languagetool.TestTools;
import org.languagetool.language.German;
import org.languagetool.rules.patterns.StringMatcher;

import java.io.IOException;

import static org.junit.Assert.*;

public class CaseRuleTest {

  private CaseRule rule;
  private JLanguageTool lt;

  @Before
  public void setUp() {
    rule = new CaseRule(TestTools.getMessages("de"), (German) Languages.getLanguageForShortCode("de-DE"));
    lt = new JLanguageTool(Languages.getLanguageForShortCode("de-DE"));
  }

  @Test
  public void testRuleActivation() {
    assertTrue(rule.supportsLanguage(Languages.getLanguageForShortCode("de-DE")));
  }

  @Test
  public void testRule() throws IOException {

    // correct sentences:
    assertGood("Es gibt wenige Befragte.");
    assertGood("Es gibt weniger Befragte, die das machen w√ºrden.");
    assertGood("Es gibt mehr Befragte, die das machen w√ºrden.");
    assertGood("Das ist eine Abkehr von Gottes Geboten.");
    assertGood("Dem Hund Futter geben");
    assertGood("Heute spricht Frau Stieg.");
    assertGood("So k√∂nnte es auch den Handwerksbetrieben gehen, die ausbilden und deren Ausbildung dann Industriebetrieben zugutek√§me.");
    assertGood("Die Firma Drosch hat nicht p√ºnktlich geliefert.");
    assertGood("3.1 Technische Dokumentation");
    assertGood("Ein einfacher Satz zum Testen.");
    assertGood("Das Laufen f√§llt mir leicht.");
    assertGood("Das Winseln st√∂rt.");
    assertGood("Das schl√§gt nicht so zu Buche.");
    assertGood("Dirk Hetzel ist ein Name.");
    assertGood("Aber sie tat es, sodass unsere Klasse das sehen und fotografieren konnte.");
    assertGood("Sein Verhalten war okay.");
    assertGood("Hier ein Satz. \"Ein Zitat.\"");
    assertGood("Hier ein Satz. 'Ein Zitat.'");
    assertGood("Hier ein Satz. ¬´Ein Zitat.¬ª");
    assertGood("Hier ein Satz. ¬ªEin Zitat.¬´");
    assertGood("Hier ein Satz. (Noch einer.)");
    assertGood("Hier geht es nach Tel Aviv.");
    assertGood("Unser J√ºngster ist da.");
    assertGood("Alles Erfundene ist wahr.");
    assertGood("Sie hat immer ihr Bestes getan.");
    assertGood("Er wird etwas Verr√ºcktes tr√§umen.");
    assertGood("Er wird etwas sch√∂n Verr√ºcktes tr√§umen.");
    assertGood("Er wird etwas ganz sch√∂n Verr√ºcktes tr√§umen.");
    assertGood("Mit aufgew√ºhltem Innerem.");
    assertGood("Mit v√∂llig aufgew√ºhltem Innerem.");
    assertGood("Er wird etwas so Verr√ºcktes tr√§umen.");
    assertGood("Tom ist etwas √ºber drei√üig.");
    assertGood("Diese Angriffe bleiben im Verborgenen.");
    assertGood("Ihr sollt mich das wissen lassen.");
    assertGood("Wenn er mich das rechtzeitig wissen l√§sst, gerne.");
    assertGood("Und sein v√∂llig aufgew√ºhltes Inneres erz√§hlte von den Geschehnissen.");
    assertGood("Aber sein aufgew√ºhltes Inneres erz√§hlte von den Geschehnissen.");
    assertGood("Sein aufgew√ºhltes Inneres erz√§hlte von den Geschehnissen.");
    assertGood("Aber sein Inneres erz√§hlte von den Geschehnissen.");
    assertGood("Ein Kaninchen, das zaubern kann.");
    assertGood("Keine Ahnung, wie ich das pr√ºfen sollte.");
    assertGood("Und dann noch Strafrechtsdogmatikerinnen.");
    assertGood("Er kann ihr das bieten, was sie verdient.");
    assertGood("Das fragen sich mittlerweile viele.");
    assertGood("Ich habe gehofft, dass du das sagen w√ºrdest.");
    assertGood("Eigentlich h√§tte ich das wissen m√ºssen.");
    assertGood("Mir tut es wirklich leid, Ihnen das sagen zu m√ºssen.");
    assertGood("Der Wettkampf endete im Unentschieden.");
    assertGood("Er versuchte, Neues zu tun.");
    assertGood("Du musst das wissen, damit du die Pr√ºfung bestehst");
    assertGood("Er kann ihr das bieten, was sie verdient.");
    assertGood("Er fragte, ob das gelingen wird.");
    assertGood("Er mag Obst, wie zum Beispel Apfelsinen.");
    assertGood("Er will die Ausgaben f√ºr Umweltschutz und Soziales k√ºrzen.");
    assertGood("Die Musicalverfilmung ‚ÄûDie Sch√∂ne und das Biest‚Äú bricht mehrere Rekorde.");
    assertGood("Joachim Sauer lobte Johannes Rau.");
    assertGood("Im Falle des Menschen ist dessen wirkendes Wollen gegeben.");
    assertGood("Szenario: 1) Zwei Galaxien verschmelzen."); // should be accepted by isNumbering
    assertGood("Existieren Au√üerirdische im Universum?");
    assertGood("Tom vollbringt Au√üerordentliches.");
    assertGood("Er f√ºhrt B√∂ses im Schilde.");
    assertGood("Es gab √úberlebende.");
    assertGood("'Wir werden das stoppen.'");
    assertGood("Wahre Liebe muss das aushalten.");
    assertGood("Du kannst das machen.");
    assertGood("Vor dem Aus stehen.");
    assertGood("Ich Armer!");
    assertGood("Hallo Malte,");
    assertGood("Parks Vertraute Choi Soon Sil ist zu drei Jahren Haft verurteilt worden.");
    assertGood("Bei einer Veranstaltung Rechtsextremer passierte es.");
    assertGood("Eine Gruppe Betrunkener singt.");
    assertGood("Bei Betreten des Hauses.");
    assertGood("Das Aus f√ºr Italien ist bitter.");
    assertGood("Das Aus kam unerwartet.");
    assertGood("Anmeldung bis Fr. 1.12.");
    assertGood("Gibt es die Schuhe auch in Gr. 43?");
    assertGood("Weil er Unm√ºndige sexuell missbraucht haben soll, wurde ein Lehrer verhaftet.");
    assertGood("Tausende Gl√§ubige kamen.");
    assertGood("Es kamen Tausende Gl√§ubige.");
    assertGood("Das schlie√üen Forscher aus den gefundenen Spuren.");
    assertGood("Wieder Verletzter bei Unfall");
    assertGood("Eine Gruppe Aufst√§ndischer verw√ºstete die Bar.");
    assertGood("‚ÄöDieser Satz.‚Äò Hier kommt der n√§chste Satz.");
    assertGood("Dabei werden im Wesentlichen zwei Prinzipien verwendet:");
    assertGood("Er fragte, ob das gelingen oder scheitern wird.");
    assertGood("Einen Tag nach Bekanntwerden des Skandals");
    assertGood("Das machen eher die Erwachsenen.");
    assertGood("Das ist ihr Zuhause.");
    assertGood("Das ist Sandras Zuhause.");
    assertGood("Das machen eher wohlhabende Leute.");
    assertGood("Als Erstes w√ºrde ich sofort die Struktur √§ndern.");
    assertGood("Er sagte: Als Erstes w√ºrde ich sofort die Struktur √§ndern.");
    assertGood("Das schaffen moderne E-Autos locker.");
    assertGood("Das schaffen moderne E-Autos schneller");
    assertGood("Das schaffen moderne und effizientere E-Autos schneller.");
    assertGood("Das verwalten User.");
    assertGood("Man kann das generalisieren");
    assertGood("Aber wie wir das machen und sicher gestalten, darauf konzentriert sich unsere Arbeit.");
    assertGood("Vielleicht kann man das erweitern");
    assertGood("Vielleicht soll er das generalisieren");
    assertGood("Wahrscheinlich m√ºssten sie das √ºberarbeiten");
    assertGood("Assistenzsysteme warnen rechtzeitig vor Gefahren.");
    assertGood("Jeremy Schulte rannte um sein Leben.");
    assertGood("Das war Fiete Lang.");
    assertGood("Wenn du an das glaubst, was du tust, kannst du Gro√ües erreichen.");
    assertGood("Dann hat er Gro√ües erreicht.");
    assertGood("Dann hat er Gro√ües geleistet.");
    assertGood("Das Thema Datenaustauschverfahren ist mir wichtig.");
    assertGood("Ist das eine Frage ? M√ºsste das nicht anders sein?");
    assertGood("Das ist ein Satz !!! Das auch.");
    assertGood("Der russische Erd√∂lmagnat Emanuel Nobel, der Erbauer des ersten Dieselmotorschiffes.");
    assertGood("Zur Vers√∂hnung: J√ºdische Gl√§ubige sollen beten.");
    assertGood("Fast im Stundentakt wurden neue Infizierte gemeldet.");
    assertGood("Bert Van Den Brink");
    assertGood("‚ÄúIn den meisten Bundesl√§ndern werden solche Studien per se nicht durchgef√ºhrt.‚Äù");
    assertGood("Aber ‚Äúin den meisten Bundesl√§ndern werden solche Studien per se nicht durchgef√ºhrt.‚Äù");
    assertGood("A) Das Haus");
    assertGood("Rabi und Polykarp Kusch an der Columbia-Universit√§t");
    assertGood("Man geht davon aus, dass es sich dabei nicht um Reinigungsverhalten handelt.");
    assertGood("Wenn dort oft Gefahren lauern.");
    assertGood("3b) Den Bereich absichern");
    assertGood("@booba Da der Holger keine Zeit hat ...");
    assertGood("Es gibt infizierte √Ñrzt*innen.");
    assertGood("WUrzeln");  // to be found by spell checker
    assertGood("üôÇ √úbrigens finde ich dein neues Ordnungssystem richtig genial!");
    assertGood("Ein 10,4 Ah Lithium-Akku");
    assertGood("14:15 Uhr SpVgg Westheim");
    assertGood("Unser W√§rmestrom-Tarif W√§rmeKompakt im Detail");  // ignore so we don't suggest "w√§rmeKompakt" (#3779)
    assertGood("Autohaus Dornig GmbH");
    assertGood("Hans Pries GmbH");
    assertGood(":D Auf dieses Frl.");
    assertGood("Das Gedicht ‚ÄúDer Panther‚Äù.");  // quotes are not correct, but leave that to the quotes rule

    // https://github.com/languagetool-org/languagetool/issues/1515:
    assertGood("‚ñ∂Ô∏é Dies ist ein Test");
    assertGood("‚ñ∂ Dies ist ein Test");
    assertGood("* Dies ist ein Test");
    assertGood("- Dies ist ein Test");
    assertGood("‚Ä¢ Dies ist ein Test");
    assertGood(":-) Dies ist ein Test");
    assertGood(";-) Dies ist ein Test");
    assertGood(":) Dies ist ein Test");
    assertGood(";) Dies ist ein Test");
    assertGood("..., die ins Nichts griff.");
    assertGood("Er fragte, was sie √ºber das denken und zwinkerte ihnen zu.");
    assertGood("dem √Ñgyptischen, Berberischen, Semitischen, Kuschitischen, Omotischen und dem Tschadischen");

    //assertBad("Sie sind nicht Verst√§ndlich");
    assertBad("Das machen der T√∂ne ist schwierig.");
    assertBad("Sie Vertraute niemandem.");
    assertBad("Beten Lernt man in N√∂ten.");
    assertBad("Ich habe Heute keine Zeit.");
    assertBad("√Ñ Was?");
    //assertBad("Ich gehe gerne Joggen.");
    assertBad("Er ist Gro√ü.");
    assertBad("Die Zahl ging auf √úber 1.000 zur√ºck.");
    assertBad("Er sammelt Gro√üe und kleine Tassen.");
    assertBad("Er sammelt Gro√üe, mittlere und kleine Tassen.");
    assertBad("Dann will sie mit London √úber das Referendum verhandeln.");
    assertBad("Sie kann sich t√§glich √úber vieles freuen.");
    assertBad("Der Vater (51) Fuhr nach Rom.");
    assertBad("Er m√ºsse √úberlegen, wie er das Problem l√∂st.");
    assertBad("Er sagte, dass er √úber einen Stein stolperte.");
    assertBad("Tom ist etwas √ºber Drei√üig.");
    assertBad("Unser warten wird sich lohnen.");
    assertBad("Tom kann mit fast Allem umgehen.");
    assertBad("Dabei √úbersah er sie.");
    assertBad("Der Brief wird am Mittwoch in Br√ºssel √úbergeben.");
    assertBad("Damit sollen sie die Versorgung in der Region √úbernehmen.");
    assertBad("Die Unfallursache scheint gekl√§rt, ein Lichtsignal wurde √úberfahren.");
    assertBad("Der Lenker hatte die H√∂chstgeschwindigkeit um 76 km/h √úberschritten.");
    assertBad("Das sind 10 Millionen Euro, Gleichzeitig und zus√§tzlich.");
    //assertBad("Das Extreme Sportfest");
    //assertBad("Das Extreme Sportfest findet morgen statt.");
    assertGood("Stets suchte er das Extreme.");
    assertGood("Ich m√∂chte zwei Kilo Zwiebeln.");
    // "NIL" reading in Morphy that used to confuse CaseRule:
    assertGood("Ein Menschenfreund.");
    // works only thanks to addex.txt:
    assertGood("Der Nachfahre.");
    // both can be correct:
    assertGood("Hier ein Satz, \"Ein Zitat.\"");
    assertGood("Hier ein Satz, \"ein Zitat.\"");
    // Exception 'Le':
    assertGood("Schon Le Monde schrieb das.");
    // unknown word:
    assertGood("In Blubberdorf macht man das so.");
    // Exception defined in case_rule_exceptions.txt:
    assertGood("Der Thriller spielt zur Zeit des Zweiten Weltkriegs");

    assertGood("Anders als physikalische Konstanten werden mathematische Konstanten unabh√§ngig von jedem physikalischen Ma√ü definiert.");
    assertGood("Eine besonders einfache Klasse bilden die polylogarithmischen Konstanten.");
    assertGood("Das s√ºdlich von Berlin gelegene D√∂rfchen.");
    assertGood("Weil er das kommen sah, traf er Vorkehrungen.");
    
    assertGood("Sie werden im Allgemeinen gefasst.");
    assertGood("Sie werden im allgemeinen Fall gefasst.");
    //assertBad("Sie werden im allgemeinen gefasst.");
    assertBad("Sie werden im Allgemeinen Fall gefasst.");

    // sentences that used to trigger an error because of incorrect compound tokenization:
    assertGood("Das sind Euroscheine.");
    assertGood("John Stallman isst.");
    assertGood("Das ist die neue Gesellschafterin hier.");
    assertGood("Das ist die neue Dienerin hier.");
    assertGood("Das ist die neue Geigerin hier.");
    assertGood("Die ersten Gespanne erreichen K√∂ln.");
    assertGood("Er beschrieb den Angeklagten wie einen Schuldigen");
    assertGood("Er beschrieb den Angeklagten wie einen Schuldigen.");
    assertGood("Es dauerte bis ins neunzehnte Jahrhundert");

    assertGood("Das ist das D√ºmmste, was ich je gesagt habe.");
    assertBad("Das ist das D√ºmmste Kind.");

    assertGood("Wacht auf, Verdammte dieser Welt!");
    assertGood("Er sagt, dass Geistliche davon betroffen sind.");
    assertBad("Er sagt, dass Geistliche W√ºrdentr√§ger davon betroffen sind.");
    assertBad("Er sagt, dass Geistliche und weltliche W√ºrdentr√§ger davon betroffen sind.");
    assertBad("Er ist begeistert Von der F√ºlle.");
    assertBad("Er wohnt √úber einer Garage.");
    //assertBad("‚ÄûWei√üer Rauch‚Äú √úber Athen");   // could be title/quote, so not detected
    assertBad("Die Anderen 90 Prozent waren krank.");

    assertGood("Man sagt, Liebe mache blind.");
    assertGood("Die Deutschen sind sehr listig.");
    assertGood("Der Lesestoff bestimmt die Leseweise.");
    assertGood("Ich habe nicht viel von einem Reisenden.");
    assertGood("Die Vereinigten Staaten");
    assertGood("Der Satz vom ausgeschlossenen Dritten.");
    //TODO:
    assertGood("Die Ausgew√§hlten werden gut betreut.");
    assertGood("Die ausgew√§hlten Leute werden gut betreut.");
    //assertBad("Die ausgew√§hlten werden gut betreut.");
    assertBad("Die Ausgew√§hlten Leute werden gut betreut.");

    // used to trigger error because of wrong POS tagging:
    assertGood("Die Schlinge zieht sich zu.");
    assertGood("Die Schlingen ziehen sich zu.");
    
    // used to trigger error because of "abbreviation"
    assertGood("Sie f√§llt auf durch ihre hilfsbereite Art. Zudem zeigt sie soziale Kompetenz.");
    
    assertGood("Das ist es: kein Satz.");
    assertGood("Werner Dahlheim: Die Antike.");
    assertGood("1993: Der talentierte Mr. Ripley");
    assertGood("Ian Kershaw: Der Hitler-Mythos: F√ºhrerkult und Volksmeinung.");
    assertBad("Das ist es: Kein Satz.");
    assertBad("Wen magst du lieber: Die Giants oder die Dragons?");

    assertGood("Das wirklich Wichtige ist dies:");
    assertGood("Das wirklich wichtige Verfahren ist dies:");
    //assertBad("Das wirklich wichtige ist dies:");
    assertBad("Das wirklich Wichtige Verfahren ist dies:");

    // incorrect sentences:
    assertBad("Die Sch√∂ne T√ºr");
    assertBad("Das Blaue Auto.");
    //assertBad("Der Gr√ºne Baum.");
    assertBad("Ein Einfacher Satz zum Testen.");
    assertBad("Eine Einfache Frage zum Testen?");
    assertBad("Er kam Fr√ºher als sonst.");
    assertBad("Er rennt Schneller als ich.");
    assertBad("Das Winseln St√∂rt.");
    assertBad("Sein verhalten war okay.");
    assertEquals(1, lt.check("Karten werden vom Auswahlstapel gezogen. Auch [‚Ä¶] Der Auswahlstapel geh√∂rt zum Inhalt.").size());
    //assertEquals(2, lt.check("Karten werden vom Auswahlstapel gezogen. Auch [...] Der Auswahlstapel geh√∂rt zum Inhalt.").size());

    assertEquals(0, lt.check("Karten werden vom Auswahlstapel gezogen. [‚Ä¶] Der Auswahlstapel geh√∂rt zum Inhalt.").size());
    //assertEquals(1, lt.check("Karten werden vom Auswahlstapel gezogen. [...] Der Auswahlstapel geh√∂rt zum Inhalt.").size());
    //TODO: error not found:
    //assertBad("So schwer, dass selbst Er ihn nicht hochheben kann.");

    assertGood("Im Norwegischen klingt das sch√∂ner.");
    assertGood("√úbersetzt aus dem Norwegischen von Ingenieur Frederik Dingsbums.");
    assertGood("Dem norwegischen Ingenieur gelingt das gut.");
    assertBad("Dem Norwegischen Ingenieur gelingt das gut.");
    assertGood("Peter Peterson, dessen Namen auf Griechisch Stein bedeutet.");
    assertGood("Peter Peterson, dessen Namen auf Griechisch gut klingt.");
    assertGood("Das dabei Erlernte und Erlebte ist sehr n√ºtzlich.");
    assertBad("Das dabei erlernte und Erlebte Wissen ist sehr n√ºtzlich.");
    assertGood("Ein Kapit√§n verl√§sst als Letzter das sinkende Schiff.");
    assertBad("Diese Regelung wurde als √úberholt bezeichnet.");
    assertBad("Die Dolmetscherin und Der Vorleser gehen spazieren.");
    assertGood("Es hilft, die Harmonie zwischen F√ºhrer und Gef√ºhrten zu st√ºtzen.");
    assertGood("Das Geb√§ude des Ausw√§rtigen Amts.");
    assertGood("Das Geb√§ude des Ausw√§rtigen Amtes.");
    assertGood("   Im Folgenden beschreibe ich das Haus."); // triggers WHITESPACE_RULE, but should not trigger CASE_RULE (see github #258)
    assertGood("\"Im Folgenden beschreibe ich das Haus.\""); //triggers TYPOGRAFISCHE_ANFUEHRUNGSZEICHEN, but should not trigger CASE_RULE
    assertGood("Gestern habe ich 10 Spie√üe gegessen.");
    assertGood("Die Verurteilten wurden mit dem Fallbeil enthauptet.");
    assertGood("Den Begnadigten kam ihre Reue zugute.");
    assertGood("Die Zahl Vier ist gerade.");
    assertGood("Ich glaube, dass das geschehen wird.");
    assertGood("Ich glaube, dass das geschehen k√∂nnte.");
    assertGood("Ich glaube, dass mir das gefallen wird.");
    assertGood("Ich glaube, dass mir das gefallen k√∂nnte.");
    assertGood("Alldem wohnte etwas faszinierend R√§tselhaftes inne.");
    assertGood("Schau mich an, Kleine!");
    assertGood("Schau mich an, S√º√üer!");
    assertGood("Wei√üt du, in welchem Jahr das geschehen ist?");
    assertGood("Das wissen viele nicht.");
    assertBad("Das sagen haben hier viele.");
    assertGood("Die zum Tode Verurteilten wurden in den Hof gef√ºhrt.");
    assertGood("Wenn Sie das schaffen, retten Sie mein Leben!");
    assertGood("Etwas Gr√ºnes, Schleimiges klebte an dem Stein.");
    assertGood("Er bef√ºrchtet Schlimmeres.");
    assertBad("Bis Bald!");
    assertGood("#4 Aktuelle Situation");
    assertGood("Er trinkt ein k√ºhles Blondes.");
    assertGood("* [ ] Ein GitHub Markdown Listenpunkt");
    assertGood("Tom ist ein engagierter, gutaussehender Vierzigj√§hriger, der...");
    assertGood("a.) Im Zusammenhang mit ...");
    assertGood("‚úîÔ∏é Weckt Aufmerksamkeit.");
    assertGood("Hallo Eckhart,");
    assertGood("Er kann Polnisch und Urdu.");
    assertGood("---> Der USB 3.0 Stecker");
    assertGood("Black Lives Matter");
    assertGood("== Schrittweise Erkl√§rung");
    assertGood("Audi A5 Sportback 2.0 TDI");
    assertGood("¬ß¬†1 Allgemeine Bedingungen");
    assertGood("¬ß1 Allgemeine Bedingungen");
    assertGood("[H3] Was ist Daytrading?");
    assertGood(" Das ist das Aus des Airbus A380.");
    assertGood("Wir sollten ihr irgendwas Erotisches schenken.");
    assertGood("Er trank ein paar Halbe.");
    assertGood("Sie/Er hat Schuld.");
    assertGood("Das war irgendein Irrer.");
    assertGood("Wir wagen Neues.");
    assertGood("Vielleicht reden wir sp√§ter mit ein paar Einheimischen.");
    assertBad("Das existiert im Jazz zunehmend nicht mehr Bei der weiteren Entwicklung des Jazz zeigt sich das.");
    assertGood("Das denken zwar viele, ist aber total falsch.");

    // uppercased adjective compounds
    assertGood("Er isst UV-bestrahltes Obst.");
    assertGood("Er isst Na-haltiges Obst.");
    assertGood("Er vertraut auf CO2-arme Wasserkraft");
    assertGood("Das Entweder-oder ist kein Problem.");
    assertGood("Er liebt ihre Makeup-freie Haut.");
    assertGood("Das ist eine Schreibweise.");
    assertBad("Das ist Eine Schreibweise.");
    assertGood("Das ist ein Mann.");
    assertBad("Das ist Ein Mann.");

    assertGood("Du √Ñrmste!");
    assertGood("Du √Ñrmster, leg dich besser ins Bett.");
    assertGood("Er wohnt Am Hohen Hain 6a");
    assertGood("Das Bauvorhaben Am Wiesenhang 9");
    assertGood("... und das Zwischenmenschliche Hand in Hand.");
    assertGood("Der Platz auf dem die Ahnungslosen Kopf an Kopf stehen.");
    assertGood("4.)¬†¬† Bei Besch√§ftigung von Hilfskr√§ften: Schadenf√§lle durch Hilfskr√§fte");
    assertGood("Es besteht aus Sch√ºlern, Arbeitst√§tigen und Studenten.");
  }

  private void assertGood(String input) throws IOException {
    assertEquals("Did not expect error in: '" + input + "'", 0, rule.match(lt.getAnalyzedSentence(input)).length);
  }

  private void assertBad(String input) throws IOException {
    assertEquals("Did not find expected error in: '" + input + "'", 1, rule.match(lt.getAnalyzedSentence(input)).length);
  }

  @Test
  public void testSubstantivierteVerben() throws IOException {
    // correct sentences:
    assertGood("Das fahrende Auto.");
    assertGood("Das k√∂nnen wir so machen.");
    assertGood("Denn das Fahren ist einfach.");
    assertGood("Das Fahren ist einfach.");
    assertGood("Das Gehen f√§llt mir leicht.");
    assertGood("Das Ernten der Kartoffeln ist m√ºhsam.");
    assertGood("Entschuldige das sp√§te Weiterleiten.");
    assertGood("Ich liebe das Lesen.");
    assertGood("Das Betreten des Rasens ist verboten.");
    assertGood("Das haben wir aus eigenem Antrieb getan.");
    assertGood("Das haben wir.");
    assertGood("Das haben wir schon.");
    assertGood("Das lesen sie doch sicher in einer Minute durch.");
    assertGood("Das lesen Sie doch sicher in einer Minute durch!");
    assertGood("Formationswasser, das oxidiert war.");
    assertGood("Um das herauszubekommen diskutieren zwei Experten.");

    // Source of the following examples: https://dict.leo.org/grammatik/deutsch/Rechtschreibung/Amtlich/GrossKlein/pgf57-58.html
    assertGood("Das Lesen f√§llt mir schwer.");
    assertGood("Sie h√∂rten ein starkes Klopfen.");
    assertGood("Wer erledigt das Fensterputzen?");
    assertGood("Viele waren am Zustandekommen des Vertrages beteiligt.");
    assertGood("Die Sache kam ins Stocken.");
    assertGood("Das ist zum Lachen.");
    assertGood("Euer Fernbleiben fiel uns auf.");
    assertGood("Uns half nur noch lautes Rufen.");
    assertGood("Die Mitbewohner begn√ºgten sich mit Wegsehen und Schweigen.");
    assertGood("Sie wollte auf Biegen und Brechen gewinnen.");
    assertGood("Er klopfte mit Zittern und Zagen an.");
    assertGood("Ich nehme die Tabletten auf Anraten meiner √Ñrztin.");
    assertGood("Sie hat ihr Soll erf√ºllt.");
    assertGood("Dies ist ein absolutes Muss.");
    assertGood("Das Lesen f√§llt mir schwer.");

    // incorrect sentences:
    assertBad("Das fahren ist einfach.");
    assertBad("Denn das fahren ist einfach.");
    assertBad("Denn das laufen ist einfach.");
    assertBad("Denn das essen ist einfach.");
    assertBad("Denn das gehen ist einfach.");
    assertBad("Das Gro√üe Auto wurde gewaschen.");
    assertBad("Ich habe ein Neues Fahrrad.");
    // TODO: detect all the cases not preceded with 'das'
  }

  @Test
  public void testPhraseExceptions() throws IOException {
    // correct sentences:
    assertGood("Das gilt ohne Wenn und Aber.");
    assertGood("Ohne Wenn und Aber");
    assertGood("Das gilt ohne Wenn und Aber bla blubb.");
    // as long as phrase exception isn't complete, there's no error:
    assertGood("Das gilt ohne wenn");
    assertGood("Das gilt ohne wenn und");
    assertGood("wenn und aber");
    assertGood("und aber");
    assertGood("aber");
    // incorrect sentences:
    // error not found here as it's in the XML rules:
    //assertBad("Das gilt ohne wenn und aber.");
  }

  @Test
  public void testCompareLists() throws IOException {
    AnalyzedSentence sentence1 = lt.getAnalyzedSentence("Hier ein Test");
    assertTrue(CaseRule.compareLists(sentence1.getTokensWithoutWhitespace(), 0, 2, regexp(""), regexp("Hier"), regexp("ein")));
    assertTrue(CaseRule.compareLists(sentence1.getTokensWithoutWhitespace(), 1, 2, regexp("Hier"), regexp("ein")));
    assertTrue(CaseRule.compareLists(sentence1.getTokensWithoutWhitespace(), 0, 3, regexp(""), regexp("Hier"), regexp("ein"), regexp("Test")));
    assertFalse(CaseRule.compareLists(sentence1.getTokensWithoutWhitespace(), 0, 4, regexp(""), regexp("Hier"), regexp("ein"), regexp("Test")));

    AnalyzedSentence sentence2 = lt.getAnalyzedSentence("das Heilige R√∂mische Reich");
    assertTrue(CaseRule.compareLists(sentence2.getTokensWithoutWhitespace(), 0, 4, regexp(""), regexp("das"), regexp("Heilige"), regexp("R√∂mische"), regexp("Reich")));
    assertFalse(CaseRule.compareLists(sentence2.getTokensWithoutWhitespace(), 8, 11, regexp(""), regexp("das"), regexp("Heilige"), regexp("R√∂mische"), regexp("Reich")));
  }

  private static StringMatcher regexp(String s) {
    return StringMatcher.create(s, true, true);
  }
}
