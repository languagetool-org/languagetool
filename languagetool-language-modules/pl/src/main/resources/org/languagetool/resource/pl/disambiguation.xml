<?xml version="1.0" encoding="utf-8"?>
<!--
    Disambiguation Rules for LanguageTool
    Copyright (C) 2008 Marcin Miłkowski
-->

        <!-- TODO: zastąpić verb_.* słownikiem walencyjnym -->
<!DOCTYPE rules [
        <!ENTITY interp "[\p{Punct}\-−–—―„«»…’]+">
        <!ENTITY apost "['`’]">
        <!ENTITY verb_obj_gen "doglądać|dokonać|dokonywać|dopełnia?ć|dopilnować|dosiadać|dosięgnąć|dosłuchiwać|dotrzymać|dotrzymywać|dotykać|dotknąć|doznać|doznawać|nienawidzić|naduży(?:wa)?ć|pilnować|poszukiwać|pożądać|przestrzegać|przydać|przydawać|s?pytać|(?:wy|po)?słuch(?:iw)?ać|strzec|szukać|tknąć|tyczyć|udziel[ia]ć|użyć|używać|wypatrywać|zaniechać|zaniedbać|zaniedbywać|zażyć">
        <!ENTITY verb_obj_inst "absorbować|administrować|ciskać|cisnąć|dorzucić|dowodzić|kierować|miotać|podrzucić|podrzucać|pokierować|rządzić|rzucać|sterować|szamotać|szarpać|szarpnąć|targnąć|władać|zachwiać|zarządzać|zarządzić|zawładnąć|zaczepić">
        <!ENTITY verb_obj_dat "odpowiedzieć|odpowiadać|oprzeć|opierać">
        <!ENTITY verb_non_transitive "zmarznąć|podupaść|wydorośleć|koczować|harcować|spuchnąć|spełzać|zlęknąć|obumierać|blagować|zadygotać|namartwić|dziecinnieć|przemarznąć|porozchodzić|umykać|domniemać|ześliznąć|śmieszyć|porzygać|gzić|graniczyć|przebrnąć|sterczeć|podsiąkać|usychać|podmuchać|przekwitać|współzawodniczyć|śmierdzieć|odpełznąć|czmychać|zażądać|zaperzać|załazić|zakosztować|ubolewać|należeć|wylądować|wrzynać|bazować|wyślizgnąć|podrzemać|żółcieć|powinszować|powydziwiać|wywiedzieć|odtajać|klękać|podzwonić|oddziałać|napsocić|migrować|ostygnąć|zapobiegać|ulec|oddzwonić|napatrzeć|figurować|uwięznąć|parskać|rozmięknąć|myśleć|zardzewieć|truchleć|czas|chrapnąć|zapracować|wybujać|pachnąć|kooperować|ręczyć|podlegać|rozejść|kaszleć|uśmiechać|skinąć|odkochać|dokuczać|zsiąść|rżeć|obciekać|brakować|rozmarzyć|dojrzewać|przyczaić|dopłynąć|zgrubieć|wagarować|poblednąć|kucharzyć|cackać|zbiednieć|utknąć|podobać|kapitulować|sekundować|pomarzyć|podfrunąć|nawyknąć|imprezować|zimować|uradować|rozrzewniać|ponarzekać|powracać|bumelować|dobiegać|zrzec|zbankrutować|blednąć|zwyknąć|natrafiać|hukać|ziać|wymachiwać|pulsować|przystać|pouciekać|pluskać|zbiec|wdrapać|poprzestać|okwitnąć|poszydzić|grzechotać|zatrzepotać|łypać|blaknąć|narzekać|kupczyć|dolecieć|skrzypnąć|jarzyć|żądać|zaszeleścić|skłamać|awanturować|złorzeczyć|wskakiwać|śpieszyć|naburmuszyć|gorączkować|wsiadać|rozpełzać|grzęznąć|zawinić|przesiąknąć|brodzić|zważać|przycichać|rozkazywać|poszybować|wdawać|przyklasnąć|dumać|zdołać|przysługiwać|wysilić|zaoponować|drętwieć|zaistnieć|zagapić|zgorzknieć|pretendować|mazgaić|ciekawić|wsłuchać|trzeszczeć|pogardzać|podchmielić|szybować|rozmarzać|potrwać|żonglować|pokłusować|hulać|przebrzmiewać|namyślić|kwiknąć|gazdować|to|zagrzechotać|przyjść|granatowieć|nabiec|zabraknąć|dyrygować|żyć|spekulować|bobrować|przymilić|wślizgiwać|wniknąć|podołać|zbaczać|rozmawiać|zemrzeć|zasługiwać|targować|maszerować|wpełzać|odlatywać|interweniować|fascynować|ustatkować|ślepnąć|pastwić|bywać|błądzić|charknąć|wyfruwać|pomykać|zabiec|telefonować|przeterminować|przeczyć|nabiedzić|biec|rozochocić|podłamać|ostać|frasować|zatrzeszczeć|omieszkać|chrypieć|zniecierpliwić|wysiadać|odrzekać|obyć|niedołężnieć|krztusić|spocić|poodchodzić|pląsać|obywać|zabłysnąć|przysłuchiwać|sarkać|odumierać|dezerterować|miesiączkować|igrać|pozasypiać|dziać|dosługiwać|zgrzytnąć|przebłyskiwać|nałykać|prezesować|zsiadać|przeszkodzić|posmutnieć|naciec|zapolować|wkraczać|przebąkiwać|plusnąć|błękitnieć|zawyć|rozradować|postępować|nawrzeszczeć|żeglować|zzielenieć|czuwać|głuchnąć|eksperymentować|zrelaksować|napuchnąć|zdumieć|posiedzieć|odetchnąć|nagadać|koncertować|nawykać|zagościć|przełazić|droczyć|zerknąć|ulęknąć|pomagać|bać|zaciec|ciec|zakradać|rozsiadać|posprzeczać|odrastać|służyć|królować|dotyczyć|siedzieć|obwisnąć|zamrugać|prześliznąć|powątpiewać|pofruwać|gestykulować|zrogowacieć|przyglądać|surfować|pomizernieć|pochlipywać|nieruchomieć|podrzemywać|ciurkać|wygramolić|wbiegać|obfitować|pozbyć|czekać|ucichnąć|pokumać|przybyć|wypełznąć|nadziwić|przestawać|bałaganić|żartować|rozćwierkać|tyć|rozleźć|wylec|wlecieć|przerodzić|nasłuchać|człapać|konferować|wypadać|jałowieć|harować|sflaczeć|odczekiwać|zakochać|świrować|zaśmiewać|pobaraszkować|odczekać|stanąć|korzystać|zapadać|startować|pokasływać|pochmurnieć|wzdychać|przylegać|zażyczyć|schudnąć|rozlatywać|osowieć|przyczynić|dowierzać|dygotać|współprzewodniczyć|wkraść|boleć|nabawić|wyelegantować|pozeskakiwać|potrzeba|ćwierkać|posiwieć|wygoić|zdziecinnieć|spazmować|naśmiecić|wleźć|powybiegać|zamachać|pomrzeć|zaginąć|wyzbyć|triumfować|spłonąć|łopotać|dziwić|skonsternować|akompaniować|kamienieć|rozporządzić|nachapać|zipać|drgać|stopnieć|rozpanoszyć|przeleżeć|głodować|zaskarbić|rozprysnąć|iść|zależeć|skowyczeć|rewanżować|przyjrzeć|ochłonąć|mieścić|rozmigotać|warto|szefować|rozpaczać|rozgorzeć|gdybać|fosforyzować|wylecieć|przegnić|posłować|zniknąć|zbiegać|zaprotestować|zwidywać|wdać|umrzeć|szczytować|poobsiadać|wlatywać|plotkować|bluznąć|uporać|prześwitywać|wyzierać|przezimować|nadkładać|dopływać|zmoknąć|zapragnąć|strzyknąć|prześlizgnąć|potargować|porozsychać|politykować|bluźnić|gardłować|zlecieć|zawyrokować|wypoczywać|roześmiać|podreptać|dorosnąć|zatriumfować|odfrunąć|ociągać|wrzasnąć|spełznąć|podążać|oszczenić|dobrnąć|tokować|dudnić|ulatywać|rozwrzeszczeć|pobłyskiwać|halsować|urastać|lobbować|gawędzić|nadpłynąć|zobojętnieć|zgęstnieć|rozbiegać|przegalopować|odumrzeć|dożywać|znamionować|zazdrościć|popatrywać|okocić|odleźć|klasnąć|zagalopować|rzec|odwykać|grasować|chuliganić|pogmerać|głowić|rozrzewnić|próchnieć|nasikać|sposępnieć|rozlecieć|pylić|przychodzić|doktoryzować|zakrawać|wibrować|urągać|rdzewieć|powyskakiwać|krygować|dyrdać|syczeć|mrugnąć|zaimponować|wbiec|lądować|zarzekać|szastać|polecieć|pokwękać|bożyć|wisieć|winszować|poszperać|pokpiwać|garbić|zdechnąć|rozsmakowywać|przydarzyć|mozolić|mknąć|obrzmiewać|istnieć|gramolić|marnieć|dymić|handlować|ćwierknąć|wspiąć|wyć|otrzaskać|ulotnić|łypnąć|wywietrzeć|trwać|posłużyć|nabrzmieć|zareagować|rozmówić|przylać|współuczestniczyć|pustynnieć|pochlebiać|pocierpieć|kucać|golnąć|dziękować|podskoczyć|nakłamać|gdakać|upłynąć|domyśleć|zwariować|spierzchnąć|rozpłynąć|wjechać|szlajać|obrzydnąć|sprzeciwiać|dyszeć|cierpieć|zasalutować|uleżeć|popłacać|omsknąć|ironizować|zbłaźnić|wzgardzić|przybywać|nabrudzić|rozweselić|opustoszeć|ocaleć|ciemnieć|wyszaleć|oponować|obrzęknąć|zgrzybieć|ociec|pobrzękiwać|doszukać|zamartwić|wyhasać|wylęgnąć|ściekać|przycichnąć|trzeźwieć|rejterować|przywierać|jaśnieć|zawtórować|wsiąkać|przydarzać|dopatrzyć|zemdleć|sarknąć|móc|prószyć|odżyć|usiłować|przybiec|opaść|biadolić|pieklić|wylęgać|poważnieć|polować|zaczekać|musieć|niecierpliwić|mrocznieć|braknąć|wyczołgać|rozbłyskać|zmarkotnieć|zalęgnąć|wiadomo|milczeć|zawarczeć|wysiąść|wyżalać|wdzięczyć|pokwikiwać|sympatyzować|rozprawić|poskoczyć|przykucać|owdowieć|napocić|nalatywać|kłusować|zasiąść|pełgać|napomknąć|żałować|zlodowacieć|otępieć|nadarzyć|chichotać|dobiec|troszczyć|poślizgnąć|przebranżowić|zżymać|zlatywać|zbrzydnąć|zaczołgać|wykłócać|wyjechać|poszaleć|postękać|pomuzykować|kolidować|deliberować|zejść|wżywać|śmiać|przymierać|kumać|gniazdować|wzrastać|wymarznąć|szczęścić|podskakiwać|podpływać|przepełznąć|pożyć|powściekać|buchać|wysforować|zaświtać|pobiec|rzednieć|przypaść|namoknąć|martwić|brzydzić|podkochiwać|bąkać|gardzić|grozić|zbutwieć|sprzysięgnąć|przyskoczyć|pochodzić|durzyć|gustować|pomyszkować|gratulować|żalić|zasłynąć|podrwiwać|nasłuchiwać|wypłynąć|podrożeć|zidiocieć|zaroić|zachybotać|zamarznąć|przytupywać|emocjonować|życzyć|tryumfować|dociec|speszyć|skandalizować|poczubić|powiać|bryknąć|poskutkować|poschnąć|dopełznąć|ślimaczyć|dbać|broić|wyleźć|warczeć|popracować|wietrzeć|ulatniać|trzeba|przykucnąć|borykać|pojechać|patrzeć|nażreć|siąść|nadarzać|nagrzeszyć|mrzeć|baczyć|zaleźć|swawolić|rozmyślać|pyskować|porać|kontratakować|grubieć|wyżyć|wybrnąć|pracować|sprzeczać|powylatywać|poflirtować|wytrysnąć|rozgoryczyć|wykwitać|struchleć|zaspać|lśnić|popływać|wyżywać|wydziwiać|ulitować|mizernieć|konkurować|wyspecjalizować|oniemieć|szczekać|skomleć|świtać|popadać|wałęsać|zrewanżować|dopomagać|wyjałowieć|wygasnąć|pokornieć|ryzykować|uganiać|teoretyzować|splunąć|kluć|patyczkować|wkupić|podupadać|kukać|zadomowić|wyprysnąć|nasiąkać|kręcić|wystartować|spacerować|przymarznąć|pielgrzymować|warknąć|rozkazać|popisywać|ucichać|przypływać|byczyć|zabłąkać|rozkwitać|poszczycić|powiadać|kwilić|cudzołożyć|szarogęsić|przeciwdziałać|majsterkować|zachłysnąć|wiecować|wdrapywać|brak|dziczeć|celować|upadać|rozczulić|popłakać|dyrektorować|polamentować|dostąpić|odpłacać|marudzić|decydować|wolno|rozminąć|przypłynąć|pospadać|okrzepnąć|chrzęścić|kolegować|uskarżać|szczycić|potrafić|pogapić|paktować|kwapić|wysychać|rozglądnąć|mądrzeć|blefować|wrzeszczeć|pomlaskać|naradzić|rozpierzchać|zabrzmieć|wyradzać|przekwitnąć|pokibicować|uprzeć|plajtować|zapiszczeć|naśmiać|optować|zatęsknić|wystarczyć|chybiać|żółknąć|pragnąć|popłakiwać|dospać|stróżować|przeboleć|poromansować|zelżeć|uczuć|fechtować|zapachnieć|przypełznąć|odpoczywać|wierzgać|osłupieć|korzyć|entuzjazmować|zasłabnąć|specjalizować|krzyczeć|czatować|gasnąć|stronić|pośniedzieć|pierzchać|jazgotać|wyzdrowieć|świszczeć|rozbłyskiwać|zająknąć|wmaszerować|ścierpnąć|żal|zmaleć|poszczekiwać|oddziaływać|dodzwaniać|charczeć|bąknąć|swędzić|pochylić|dźwięczeć|zaskarbiać|rozglądać|radzić|opiekować|dziwaczyć|jęknąć|rozszczebiotać|przybłąkać|poszarzeć|odezwać|cichnąć|stąpać|prześlizgiwać|popatrzyć|odechcieć|warować|leniuchować|łkać|łgać|następować|marzyć|rozstępować|nalegać|rozchorować|zwątpić|wracać|skorzystać|uchodzić|poskąpić|perorować|funkcjonować|żachnąć|podrosnąć|dojść|pogwarzyć|więdnąć|miewać|dosypiać|grasejować|zaniemóc|pojedynkować|partycypować|zaszkodzić|osłabnąć|wyguzdrać|odchodzić|naciekać|wymaszerować|dopominać|wystarczać|siąpić|reagować|pocierpnąć|najadać|lgnąć|przywędrować|zlitować|wytryskać|przypodobać|zaczernieć|umknąć|pójść|rozśpiewać|przypatrzyć|peszyć|pohukiwać|skamienieć|kraśnieć|zaciążyć|drżeć|biednieć|wyniknąć|wściec|zastukać|wystarać|wgryzać|rozbrykać|współistnieć|potknąć|podostawać|zmartwychwstawać|spurpurowieć|pasjonować|łazikować|zasnąć|zaniknąć|zagrozić|wypełzać|piąć|ociekać|ukłonić|parsknąć|konkludować|wysilać|zrzednąć|panoszyć|pałać|ubliżyć|prysnąć|przylgnąć|potykać|zamoknąć|pomarkotnieć|odkłonić|wyłysieć|wyłazić|dorównać|wstępować|rezonować|powszednieć|zadudnić|wysapać|pozielenieć|brązowieć|zawędrować|potanieć|odpływać|wspinać|namyślać|wydurniać|naobiecywać|linieć|pomdleć|nadciągać|zatryumfować|wżenić|procesować|pohasać|pochlubić|zasapać|wykraczać|wyrozumieć|wpatrywać|ochrypnąć|ryczeć|pomodlić|zastanowić|wywiązywać|wkupywać|przymilać|poznikać|odwarknąć|powschodzić|podrygiwać|kasłać|wystawać|mizdrzyć|odgałęziać|nadążyć|lęgnąć|kandydować|zaapelować|wpraszać|polegiwać|mawiać|zasyczeć|wyrodzić|pomóc|obejść|dowędrować|różowieć|przemknąć|poczołgać|górować|guzdrać|zalśnić|zadzwonić|pajacować|zipnąć|zdążyć|starczyć|przymarzać|wybrzydzać|skapnąć|rozłazić|przesiąść|pomieszkiwać|pokuśtykać|wnikać|kłaniać|pochlebić|twierdzić|rudzieć|rezygnować|zmięknąć|zmatowieć|wywiązać|wytrzeźwieć|pączkować|lewitować|czołgać|spoczywać|potonąć|podrałować|niknąć|pojeździć|zamartwiać|ubliżać|spoglądać|oślepnąć|naopowiadać|przymrzeć|przepaść|pełzać|zdrowieć|zawziąć|uwierzyć|kpić|przymawiać|przybiegać|pęknąć|pousychać|zaufać|rzygać|puszyć|meczeć|zakrzyknąć|zachorować|utyskiwać|rozstawać|naigrywać|klęknąć|zmierzchać|zawitać|kichać|jeździć|posługiwać|łysieć|blamować|ślizgać|debiutować|wskoczyć|muzykować|słynąć|pokrzyczeć|pogderać|miauczeć|zdrętwieć|zgnić|fruwać|chybotać|marznąć|chrapać|zawahać|porozrastać|popłynąć|intrygować|doszukiwać|zwiotczeć|siadać|wżyć|obcować|nadążać|uskoczyć|fuknąć|wyzbywać|zdrożeć|powchodzić|połasić|pluć|myszkować|dogasać|dyfundować|pokaszliwać|zdążać|wojować|użerać|starczać|płynąć|współżyć|powrócić|biedzić|szczęknąć|odmaszerować|obowiązywać|dybać|walczyć|rozpływać|przyczyniać|powstydzić|wkradać|przyplątać|włazić|wchodzić|uskakiwać|podjeżdżać|łaknąć|wygasać|rozkoszować|prychnąć|balować|zgadać|swędzieć|skutkować|drożyć|bryznąć|zleźć|zawadzić|zakotłować|przedobrzyć|dogadzać|zadebiutować|wyłgiwać|odpukać|zamierać|ukucnąć|plwać|nadbiec|nacieszyć|zubożeć|wstydzić|łajdaczyć|furczeć|dywagować|zaparować|wybuchnąć|polatać|gapić|zamydlić|zaintrygować|skumać|popękać|bryzgać|emigrować|skapitulować|siwieć|przystąpić|ożyć|siłować|rozwieść|przodować|podpadać|komutować|brzmieć|zniżkować|spozierać|figlować|zadrwić|wylatywać|silić|flirtować|trysnąć|trajlować|podorastać|paplać|pośliznąć|zaradzić|zatelefonować|zalatywać|schylić|radować|przystanąć|pozbywać|błyskać|zapracowywać|uschnąć|szpanować|kłamać|bimbać|zatętnić|szczękać|zaśmiać|rozpłakać|powychodzić|porykiwać|klaskać|dosiąść|pozostać|zdychać|rozporządzać|dorastać|rozlegać|muczeć|wysypiać|stacjonować|pozachodzić|nabiegać|błąkać|wpływać|natrząsać|dyżurować|zadurzyć|można|kwestować|ozwać|współdziałać|uwziąć|schlebiać|obciec|dowcipkować|pomlaskiwać|plenić|nalecieć|pobębnić|nasiedzieć|wywnętrzać|wybieleć|upływać|przyczajać|fantazjować|gorzeć|pogłówkować|zdurnieć|nacierpieć|imać|zdumiewać|panikować|pohałasować|huczeć|zawisnąć|bulwersować|zadrżeć|szczerzyć|podbiegać|piszczeć|czyhać|frymarczyć|fukać|zbieleć|wtargnąć|ustępować|zabłądzić|tęsknić|spływać|odrosnąć|tkwić|tyrać|lunatykować|ziewnąć|zatrząść|zapałać|łagodnieć|podlecieć|spojrzeć|rywalizować|podkpiwać|gmerać|pachnieć|niszczeć|kurwić|wgramolić|przekomarzać|plonować|błyszczeć|biegać|przeciekać|postarać|sekretarzować|grymasić|obsychać|zaciekać|przemijać|tryskać|poskarżyć|zgrzeszyć|przyklaskiwać|pozsiadać|lecieć|nadchodzić|strzykać|stanieć|powetować|kolaborować|czapkować|skrzypieć|nadskakiwać|kichnąć|procentować|wklęsnąć|umierać|zwyrodnieć|połazić|podejść|pobieleć|zazębić|zaowocować|wykluć|przemykać|odbiegać|rozboleć|butwieć|utrudzić|zapanować|domyślić|zarechotać|przemaszerować|pobrzmiewać|zwyżkować|wyginąć|przyzwalać|kląć|zechcieć|zbaranieć|tajać|podfruwać|najeść|asystować|ześlizgnąć|zakochiwać|żerować|wpaść|pojękiwać|pogłuchnąć|osiadać|odpocząć|wygłupiać|spokornieć|skamlać|bredzić|szkodzić|zasłuchać|przykrzyć|pośredniczyć|zginąć|wylegać|zsikać|kopulować|kaprysić|cuchnąć|dogasnąć|zezwalać|zdzierżyć|mdleć|uśmiać|tchórzyć|jazzować|wściekać|padać|odpłynąć|kaszlnąć|zemdlić|podbiec|konwersować|zażartować|wpatrzyć|płożyć|kuleć|ciążyć|omdleć|drzemać|zblednąć|przycupnąć|powypadać|rozumować|przewodniczyć|opadać|użalić|posnąć|odzywać|cierpnąć|dzwonić|wynikać|odgrażać|napluć|nadjeżdżać|zboczyć|rozweselać|napatoczyć|żebrać|odfruwać|pogadać|ozdrowieć|poleźć|zmartwieć|występować|przytaknąć|przymówić|naigrawać|flaczeć|pomachać|rozrosnąć|poginąć|wrastać|spodobać|splajtować|dokazać|nadymić|nadciągnąć|zaiskrzyć|wyfrunąć|wieczerzać|przyskakiwać|przejęzyczyć|panować|napływać|zsinieć|sposób|sztywnieć|spiskować|uwijać|napracować|spochmurnieć|poleżeć|omarznąć|rozczarować|podąsać|usnąć|pertraktować|zjawić|śmieć|bytować|debatować|rozstać|gruchać|doczekiwać|wyrzekać|wkroczyć|porozumieć|podlizać|naczytać|zrosnąć|przysłuchać|matkować|apelować|tułać|naśmiewać|zwisać|zdezerterować|zastygnąć|uciekać|zgłupieć|zezować|uczęszczać|szaleć|brzęczeć|dopatrzeć|szydzić|zamarzyć|topnieć|przypadać|konać|popiskiwać|kumplować|zrzekać|słaniać|rozpierzchnąć|ogorzeć|odprysnąć|zżółknąć|zgadzać|wiwatować|pozbiegać|wychynąć|postękiwać|promienieć|pochorować|odszeptywać|wrosnąć|wjeżdżać|spękać|prosperować|wonieć|odechciewać|wykluwać|terminować|syknąć|lękać|pobawić|parać|obstawać|kuśtykać|koziołkować|hamletyzować|wyrastać|jędrnieć|chorować|wionąć|urosnąć|podjechać|śnić|kumkać|przebrzmieć|iskrzyć|czubić|wyruszyć|drałować|zadumać|telegrafować|zakwitnąć|ubzdurać|skrzyć|przesiadywać|polec|doczekać|pogłowić|latać|zrastać|nakraść|wojażować|rozstąpić|wyhulać|opamiętywać|jechać|pomaszerować|zrejterować|współgrać|uwłaczać|oziębnąć|odkłaniać|imigrować|ubawić|rozpaść|zasmakować|ślęczeć|kibicować|zadziałać|wyskakiwać|westchnąć|spróbować|dorównywać|pobuszować|namakać|zawinszować|zapuchnąć|wyimaginować|odpryskiwać|zamarzać|zaburczeć|tętnić|naprzykrzyć|błaznować|wierzgnąć|wyczekać|odwdzięczyć|chuchnąć|dopełzać|spłynąć|rozrastać|chadzać|wątpić|wybywać|świerzbić|podleźć|dokazywać|solidaryzować|buszować|przemawiać|błysnąć|biesiadować|umilknąć|tleć|napatrzyć|chybić|spróchnieć|skrzeczeć|obozować|kluczyć|zabiegać|dolegać|przesiedzieć|pozazdrościć|zszarzeć|wczołgać|odlecieć|kapować|gorzknieć|dochrapać|wydobrzeć|wybyć|poprzychodzić|zalecieć|wstąpić|rozkwitnąć|migotać|wyruszać|spocząć|gnieździć|zmierzać|opamiętać|baraszkować|dogodzić|ucztować|zeźlić|zerkać|przywyknąć|ględzić|szusować|hasać|zbulwersować|kłębić|zionąć|zakrzątnąć|pokajać|rozsmakować|nabroić|zalegać|ustąpić|odrzec|pozować|poskrzypywać|pobekiwać|spadać|spać|nadpływać|dosłużyć|przesłyszeć|ziewać|odbiec|stąpnąć|rozczulać|czulić|ingerować|naprzykrzać|runąć|przytomnieć|pozasiadać|powariować|poprzestawać|przedostać|odwdzięczać|niedowidzieć|moralizować|zblaknąć|współbrzmieć|ochłodnąć|uśmiechnąć|uprzykrzyć|przesiadać|powróżyć|paradować|osiwieć|naradzać|zziajać|zanikać|przemoknąć|pokiwać|doczłapać|zasiadać|wpłynąć|wariować|pomilczeć|majaczyć|furkotać|zapłonąć|zaglądnąć|wystygnąć|wczuwać|zmieścić|drgnąć|szermować|oszaleć|zeskakiwać|zajrzeć|kaszlać|załomotać|zachłystywać|przytrafić|pojawić|narosnąć|interesować|bestwić|dyndać|spóźniać|zatroszczyć|stęsknić|dorośleć|dążyć|wyszumieć|zielenieć|wyszczerzyć|zmizernieć|replikować|chrząknąć|telepać|relaksować|spoważnieć|stęknąć|lubować|wilgotnieć|trzepotać|chałturzyć|dziadować|przemęczyć|przedzwonić|pochylać|wytrzymywać|rozczarowywać|poświecić|pozostawać|nadsłuchiwać|mędrkować|skonać|przygasnąć|pomstować|wschodzić|pogardzić|nabrzmiewać|maleć|wyglądać|histeryzować|szczeknąć|oczytać|owocować|wykwitnąć|przywidzieć|kursować|zaglądać|świecić|wypłakiwać|uprzykrzać|polśniewać|trza|rechotać|przyplątywać|gadać|zamilknąć|leźć|wstyd|ulecieć|srać|lewicować|doskwierać|weselić|kicać|zadrgać|posępnieć|rozmijać|zdecydować|uczestniczyć|porozumiewać|omdlewać|zwiedzieć|znieruchomieć|zazębiać|wsiąknąć|popatrzeć|dowiadywać|zjawiać|gospodarować|wyrokować|sąsiadować|rozbłysnąć|przesiąkać|pryskać|posiąść|dreptać|rajcować|wegetować|poszczęścić|zdrzemnąć|zżyć|zdębieć|swingować|przemarzać|popowstawać|zachrzęścić|urzędować|brykać|dostępować|szumieć|statystować|ogłuchnąć|popróchnieć|ześlizgiwać|nastąpić|kwiczeć|przemęczać|obsiąść|kolędować|rozlec|dożyć|popełznąć|pięknieć|mignąć|ubożeć|tanieć|spółkować|potakiwać|podśmiewać|dachować|gniewać|zstąpić|nakrzyczeć|alergizować|wskórać|natrafić|doigrać|wędkować|spanikować|przypatrzeć|kołatać|imponować|zaczerwienieć|wygłupić|trajkotać|rozprawiać|dopatrywać|doziębić|zaryzykować|wypryskiwać|roić|pojawiać|napłynąć|nabawiać|kwękać|szperać|spluwać|pofolgować|napierać|spóźnić|obwisać|nagimnastykować|modlić|znikać|szkoda|protestować|kiełkować|zalec|dowiedzieć|bawić|wymiotować|rozentuzjazmować|poczuwać|litować|usługiwać|przefrunąć|poklęczeć|prątkować|powinien|rozgałęziać|pierzchnąć|folgować|widać|skwierczeć|przyśnić|wyskoczyć|ożywać|biedować|wdepnąć|podziękować|zadźwięczeć|słychać|przepadać|szwankować|kapnąć|zadecydować|towarzyszyć|przytakiwać|przyglądnąć|wyrzec|wytrwać|wyemigrować|klęczeć|dodzwonić|zakolegować|tonąć|skradać|lamentować|brnąć|wystękać|wahać|zwiędnąć|zamieszkać|wybiec|ubyć|krążyć|grawitować|furknąć|stać|przytrafiać|prychać|poczekać|kimać|doszlusować|bankrutować|powędrować|posapywać|zakraść|wyjeżdżać|nastać|salutować|pocwałować|gęstnieć|pysznić|burczeć|przysypiać|przeciec|spierdalać|rozbiec|zagrzmieć|sykać|zstępować|trudnić|przespacerować|podzwaniać|gderać|wierzyć|basować|mniemać|wymykać|wymigiwać|romansować|truchtać|sprzykrzyć|odżywać|zgrzytać|pogasnąć|matowieć|wypaść|wśliznąć|pobolewać|wytryskiwać|nadbiegać|depeszować|stchórzyć|sczerwienieć|wyschnąć|naszukać|nasiąknąć|napić|znęcać|podsychać|podeschnąć|łasić|wyciec|szurać|powalczyć|zaschnąć|zapaść|napomykać|zaopiekować|sikać|powdzięczyć|podlizywać|niedosłyszeć|wykroczyć|naurągać|przystępować|nadłożyć|niedomagać|działać|sprzymierzyć|przystawać|biwakować|dociekać|wymigać|rozejrzeć|puchnąć|natknąć|kajać|oburzyć|zarobkować|sprzyjać|odsapnąć|pożółknąć|poczerwienieć|wczasować|wypływać|stękać|zawadzać|pękać|nastarczyć|brylować|zmarnieć|natykać|wiosłować|błaźnić|psioczyć|wymknąć|kusztykać|dopomnieć|pogratulować|boczyć|kadzić|zrezygnować|turkotać|kipieć|chodzić|odszeptać|naubliżać|zgarbić|wdzierać|wczołgiwać|zaradzać|zostać|uwinąć|schylać|cyrkulować|drożeć|uchybić|buzować|dolatywać|zmartwychwstać|przedostawać|poweseleć|spowinowacić|jawić|delektować|zapobiec|schnąć|polegać|podpełzać|wyczekiwać|przygnębiać|ubywać|zajęczeć|sprzymierzać|markotnieć|chrząkać|galopować|przygnębić|próżnować|tupnąć|oburzać|zachcieć|nałazić|nadejść|dworować|wykosztować|medytować|liderować|wyjednać|odwyknąć|zeskoczyć|zamachnąć|powskakiwać|chełpić|rozgościć|pomknąć|podyskutować|wymrzeć|spowszednieć|ryknąć|nastarczać|korcić|brzydnąć|przysnąć|ulegać|pobiedować|usłużyć|płonąć|osiąść|usiedzieć|pobłękitnieć|kapać|upierać|rzednąć|pustoszeć|postać|pospać|przywykać|nastawać|różnić|dotrwać|wczuć|sypiać|starać|podłazić|pocić|okwitać|narodzić|przynależeć|poróżowieć|wymierać|widnieć|poplotkować|otrzeźwieć|wychudnąć|podczołgać|obawiać|pałętać|zagrażać|współczuć|stygnąć|skamleć|wpadać|obeschnąć|łazić|kłosić|bieleć|przyzwolić|mrugać|siknąć|pogawędzić|ścierpieć|mdlić|zapatrzyć|współpracować|więznąć|porozmawiać|porozbiegać|patronować|obumrzeć|jęczeć|uchybiać|płakać|goreć|zastygać|zagłosować|zeschnąć|ściemnieć|powęszyć|pobłądzić|domyślać|powrzeszczeć|odburknąć|gnić|zamierzać|brunatnieć|wrzeć|zezwolić|zatroskać|przelęknąć|połyskiwać|odłazić|milknąć|wybuchać|stawać|podmarznąć|oddzwaniać|zachciewać|wyspać|dość|abdykować|grzeszyć|zatonąć|snobować|przywidywać|wtórować|rozsiąść|pochrapywać|powiewać|nadąsać|współwystępować|przebąknąć|nadjechać|wsłuchiwać|spodziewać|przyblednąć|subtelnieć|przeminąć|wyżalić|pokrzykiwać|podumać|﻿|przeszkadzać|podziałać|kwitnąć|zmierzchnąć|zesztywnieć|potrzaskiwać|podpłynąć|zaprzeczyć|polemizować|obmierznąć|zafrasować|zachrypieć|winien|zakrztusić|pożeglować|odstawać|wydarzyć|szeleścić|powstać|drwić|zapatrywać|korespondować|słabnąć|pobłażać|aspirować|zadbać|użalać|rozpełznąć|napytać|domagać|podpełznąć|odpadać|partnerować|goić|ginąć|zleniwieć|ugrzęznąć|ufać|kazać|uciec|namozolić|zdarzyć|złagodnieć|zemścić|wzrosnąć|sprostać|obojętnieć|meandrować|rozgorączkować|wiotczeć|szarzeć|pośmiać|zwietrzeć|wymądrzać|wyjść|patrzyć|ropieć|powstawać|wyrosnąć|leżeć|rozżalić|nakląć|mięknąć|dąsać|chuchać|przeleźć|wsiąść|przyświecać|fraternizować|dnieć|wyciekać|pogrozić|zaszpanować|lawirować|kucnąć|grzmieć|zamakać|troskać|skąpić|psocić|przywrzeć|podlatywać|wyłgać|utyć|pożartować|główkować|przeradzać|pożalić|poklaskać|pełznąć|gwarzyć|zasychać|zasłużyć|wejść|porabiać|manewrować|komenderować|koegzystować|zmiłować|wgryźć|naskarżyć|dogorywać|purpurowieć|wtyczkować|obradować|poigrać|dojeżdżać|zaprzeczać|przygasać|opuchnąć|zrzędzić|zaprocentować|połaszczyć|sinieć|połakomić|wydarzać|współdecydować|rozmyślić|wpełznąć|połazikować|obrzmieć|mieszkać|zdziczeć|oscylować|szwendać|mrowić|biadać|przypatrywać|naprzeć|kroczyć|podkołować|potrzebować|łakomić|zdarzać|pasożytować|chudnąć|hałasować|wzejść|wypocząć|sprzeciwić|pozłazić|krakać|zanocować|pożałować|narastać|domniemywać|głupieć|utonąć|rozpadać|mżyć|zakpić|krzątać|być|wyśliznąć|wędrować|ściec|strajkować|pływać|filozofować|zaperzyć|pokutować|utrafić|łobuzować|zastanawiać|polatywać|cwałować|ulżyć|rosnąć|mądrzyć|wykosztowywać|oprzytomnieć|zmądrzeć|zamrzeć|odszepnąć|chlubić|dłużyć|załopotać|odejść|wprosić|ucierpieć|podowcipkować|tlić|wystrzegać|pora|wystąpić|przysłużyć|przyjaźnić|zgasnąć|podrastać|grypsować|dopomóc|zmykać|wygrażać|oddychać|jąć|odburkiwać|ciamkać|bzyczeć|czmychnąć|cielić|dokuczyć|zwidzieć|wślizgnąć|odpłacić|czaić|przyjechać|przyjeżdżać">
        ]>

<rules lang="pl" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:noNamespaceSchemaLocation="../../../../../../../../../languagetool-core/src/main/resources/org/languagetool/resource/disambiguation.xsd">
    <unification feature="number">
        <equivalence type="sg">
            <token postag=".*:sg:.*|SENT_END" postag_regexp="yes"/>
        </equivalence>
        <equivalence type="pl">
            <token postag=".*:pl(?:tant)?:.*|SENT_END" postag_regexp="yes"/>
        </equivalence>
    </unification>
    <unification feature="gender">
				<equivalence type="f">
						<token postag=".*[\.:]f[\.:]?.*|SENT_END" postag_regexp="yes"/>
				</equivalence>
				<equivalence type="m1">
						<token postag=".*[\.:]m1[\.:]?.*|SENT_END" postag_regexp="yes"/>
				</equivalence>
				<equivalence type="m2">
						<token postag=".*[\.:]m2[\.:]?.*|SENT_END" postag_regexp="yes"/>
				</equivalence>
				<equivalence type="m3">
						<token postag=".*[\.:]m3[\.:]?.*|SENT_END" postag_regexp="yes"/>
				</equivalence>
				<equivalence type="n1">
						<token postag=".*[\.:]n1[\.:]?.*|SENT_END" postag_regexp="yes"></token>
				</equivalence>
				<equivalence type="n2">
						<token postag=".*[\.:]n2[\.:]?.*|SENT_END" postag_regexp="yes"></token>
				</equivalence>
				<equivalence type="p1">
						<token postag=".*[\.:]p1[\.:]?.*|SENT_END" postag_regexp="yes"></token>
				</equivalence>
				<equivalence type="p2">
						<token postag=".*[\.:]p2[\.:]?.*|SENT_END" postag_regexp="yes"></token>
				</equivalence>
				<equivalence type="p3">
						<token postag=".*[\.:]p3[\.:]?.*|SENT_END" postag_regexp="yes"></token>
				</equivalence>
	</unification>
    <unification feature="case">
        <equivalence type="nom">
            <token postag=".*[\.:]nom[\.:]?.*|SENT_END" postag_regexp="yes"/>
        </equivalence>
        <equivalence type="gen">
            <token postag=".*[\.:]gen[\.:]?.*|SENT_END" postag_regexp="yes"/>
        </equivalence>
        <equivalence type="dat">
            <token postag=".*[\.:]dat[\.:]?.*|SENT_END" postag_regexp="yes"/>
        </equivalence>
        <equivalence type="acc">
            <token postag=".*[\.:]acc[\.:]?.*|SENT_END" postag_regexp="yes"/>
        </equivalence>
        <equivalence type="inst">
            <token postag=".*[\.:]inst[\.:]?.*|SENT_END" postag_regexp="yes"/>
        </equivalence>
        <equivalence type="loc">
            <token postag=".*[\.:]loc[\.:]?.*|SENT_END" postag_regexp="yes"/>
        </equivalence>
        <equivalence type="voc">
            <token postag=".*[\.:]voc[\.:]?.*|SENT_END" postag_regexp="yes"/>
        </equivalence>
    </unification>

    <unification feature="person">
        <equivalence type="pri">
            <token postag=".*:pri.*|SENT_END" postag_regexp="yes"></token>
        </equivalence>
        <equivalence type="sec">
            <token postag=".*:sec.*|SENT_END" postag_regexp="yes"></token>
        </equivalence>
        <equivalence type="ter">
            <token postag=".*:ter.*|SENT_END" postag_regexp="yes"></token>
        </equivalence>
    </unification>


    <rule name="Dwukropek w zapisie liczb, np. godzin lub proporcji" id="DWUKROPEK_GODZINA">
        <pattern>
            <token regexp="yes">\d+</token>
            <marker>
                <token spacebefore="no">:</token>
            </marker>
            <token spacebefore="no" regexp="yes">\d+</token>
        </pattern>
        <disambig action="add"><wd pos="interp:nospace"/></disambig>
        <example type="untouched">Punkt 5: zrównać płacę minimalną.</example>
        <example type="ambiguous" inputform=":[:]" outputform=":[:/interp:nospace]">Pociąg odjeżdża o 15<marker>:</marker>34.</example>
    </rule>

    <rule name="poor man's agglutination" id="Gdybysie">
        <pattern>
            <token regexp="yes">(gdyby|jeśli|jeżeli|jeżeliby|jeśliby|gdy)(ś|śmy|ście|m)</token>
        </pattern>
        <disambig action="add"><wd lemma="gdyby" pos="conj"/></disambig>
    </rule>

    <rule name="żem żeś" id="ZESIE">
        <pattern>
            <token regexp="yes">że[mś]</token>
        </pattern>
        <disambig action="add"><wd pos="comp" lemma="że"/></disambig>
    </rule>

    <rule name="żebysie" id="zebysie">
        <pattern>
            <token regexp="yes"><exception postag="comp"/>(?:a?żeby|a?by|iżby)(?:ś|śmy|ście|m)</token>
        </pattern>
        <disambig action="add"><wd pos="comp" lemma="by"/></disambig>
    </rule>

    <!-- nazwiska -->

    <rule name="pan …ski" id="PAN_SKI">
        <pattern>
            <token>pan</token>
            <marker>
                <token regexp="yes" postag="UNKNOWN">\p{Lu}\p{Ll}+[cs]ki</token>
            </marker>
        </pattern>
        <disambig action="add"><wd pos="subst:sg:nom:m1"/></disambig>
        <example type="ambiguous" inputform="Ostrzeński[Ostrzeński]"
        outputform="Ostrzeński[Ostrzeński/subst:sg:nom:m1]">O, pan <marker>Ostrzeński</marker> to kombinator, głowę ma nie od parady.</example>
        <example type="untouched">Pan Miłkowski pisze te reguły.</example>
    </rule>

    <rule name="pani …ska" id="PANI_SKA">
        <pattern>
            <token>pani</token>
            <marker>
                <token regexp="yes" postag="UNKNOWN">\p{Lu}\p{Ll}+[cs]ka</token>
            </marker>
        </pattern>
        <disambig action="add"><wd pos="subst:sg:nom:f"/></disambig>
    </rule>

    <!-- conjunctions that take a comma -->
    <rule name="Spójniki wymagające przecinka lub zastępujące go" id="COMP_COMMA">
        <pattern>
            <token inflected="yes" regexp="yes">aby|acz|aczkolwiek|albo|albowiem|ale|aleć|aliści|ani|azali|ażeby|bo|byleby|bądź|choć|chociaż|chociażby|czy|czyli|czyliż|dlaczego|dopóki|dopóty|gdy|gdyby|gdyż|gdyżby|i|ilekolwiek|ilekroć|iż|iżby|jaki|jeśli|jeżeli|kiedy|który|którędy|lecz|lub|oraz|ponieważ|póki|wszelako|zanim|że|żeby</token>
        </pattern>
        <disambig action="add"><wd pos="comp:comma"/></disambig>
        <example type="untouched">To jest krowa.</example>
        <example type="ambiguous" inputform="ale[ale/conj,ale/qub]" outputform="ale[ale/comp:comma,ale/conj,ale/qub]">Lubię go, <marker>ale</marker> kupię mu pistolet.</example>
    </rule>

    <!--  tagging punctuation -->
    <rule name="Interpunkcja - bez kropki" id="PUNCT_NO_DOT">
        <pattern>
            <token regexp="yes">[\p{Punct}-−–—―„«»…”&amp;&amp;[^!\.]]<exception postag="SENT_END"/><exception postag="interp:nospace"/></token>
        </pattern>
        <disambig action="add"><wd pos="interp:comma"/></disambig>
        <example type="untouched">To jest głowa dr. Jekylla.</example>
        <example type="untouched">Pociąg odjeżdża o 15:45.</example>
        <example type="ambiguous" inputform=",[,]" outputform=",[,/interp:comma]">To jest coś<marker>,</marker> co wiedziałem od dawna.</example>
    </rule>

    <rule name="cudzysłowy bez zdania w środku" id="quote_no_interp_1">
        <pattern>
            <marker><token skip="-1">„<exception scope="next" postag="verb:.*(sg|pl).*|verb:imps.*|pred" postag_regexp="yes"/></token>
            </marker>
            <token spacebefore="no">”</token>
        </pattern>
        <disambig action="replace"><wd pos="interp"/></disambig>
        <example type="untouched">Napisał „Gdzie pachną bzy”.</example>
        <example type="ambiguous" inputform="„[„/interp:comma]" outputform="„[„/interp]">On był <marker>„</marker>wyjątkowo” wredny.</example>
    </rule>

    <rule name="cudzysłowy bez zdania w środku" id="quote_no_interp_2">
        <pattern>
            <token skip="-1">„<exception scope="next" postag="verb:.*(sg|pl).*|verb:imps.*|pred" postag_regexp="yes"/></token>
            <marker>
                <token spacebefore="no">”</token>
            </marker>
        </pattern>
        <disambig action="replace"><wd pos="interp"/></disambig>
        <example type="untouched">Napisał „Gdzie pachną bzy”.</example>
        <example type="ambiguous" inputform="”[”/interp:comma]" outputform="”[”/interp]">On był „wyjątkowo<marker>”</marker> wredny.</example>
    </rule>

    <rule id="TO_CONJ" name="to jako spójnik skoordynowany z gdyby i jeśli">
        <pattern>
            <token skip="-1" regexp="yes">(?:gdyby|jeśli|jeżeli|jakby).*</token>
            <marker><token>to<exception scope="previous" postag="interp:comma" negate_pos="yes"/></token></marker>
        </pattern>
        <disambig postag="conj"/>
        <example type="ambiguous" inputform="to[ten/adj:sg:acc:n1.n2:pos,ten/adj:sg:nom.voc:n1.n2:pos,to/conj,to/qub,to/subst:sg:acc:n2,to/subst:sg:nom:n2]" outputform="to[to/conj]">— Gdybyście ją obaczyli — na to Don Kichot — <marker>to</marker> cóż by za zasługa wasza była, że przyznalibyście prawdę.</example>
        <example type="untouched">No to co?</example>
        <example type="untouched">Jeśli jest to głupi przypadek, jestem w kropce.</example>
    </rule>

    <rule name="Liczby z częścią dziesiętną - przecinek nie jest językowy" id="number_comma">
        <pattern>
            <token regexp="yes">\d+</token>
            <marker><token spacebefore="no">,</token></marker>
            <token spacebefore="no" regexp="yes">\d+.*</token>
        </pattern>
        <disambig action="replace"><wd pos="interp"/></disambig>
        <example type="untouched">1, 2, 3</example>
        <example type="ambiguous" inputform=",[,/interp:comma]" outputform=",[,/interp]">85<marker>,</marker>45</example>
        <example type="ambiguous" inputform=",[,/interp:comma]" outputform=",[,/interp]">85<marker>,</marker>45%</example>
    </rule>

    <rule name="nawiasy z wtrąceniem, ale bez zdania w środku" id="nawiasy_1">
        <pattern>
            <marker><token skip="-1">(<exception scope="next" postag="verb:.*(sg|pl).*|verb:imps.*|pred" postag_regexp="yes"/></token>
            </marker>
            <token>)</token>
        </pattern>
        <disambig action="replace"><wd pos="interp"/></disambig>
        <example type="untouched">On był (jeśli w ogóle można mówić o kimś takim „on”) wyjątkowo wredny.</example>
        <example type="ambiguous" inputform="([(/interp:comma]" outputform="([(/interp]">On był <marker>(</marker> wyjątkowo) wredny.</example>
    </rule>

    <rule name="nawiasy z wtrąceniem, ale bez zdania w środku" id="nawiasy_2">
        <pattern>
            <token skip="-1">(<exception scope="next" postag="verb:.*(sg|pl).*|verb:imps.*|pred" postag_regexp="yes"/></token>
            <marker>
            <token>)</token>
            </marker>
        </pattern>
        <disambig action="replace"><wd pos="interp"/></disambig>
        <example type="untouched">On był (jeśli w ogóle można mówić o kimś takim „on”) wyjątkowo wredny.</example>
        <example type="ambiguous" inputform=")[)/interp:comma]" outputform=")[)/interp]">On był (wyjątkowo<marker>)</marker> wredny.</example>
    </rule>

    <rule name="przecinek i znak zapytania w nawiasie wtrącenia" id="przecinek_w_nawiasie">
        <pattern>
            <token postag="interp" skip="-1">(<exception scope="next" regexp="yes">[()]</exception></token>
            <marker><token skip="-1" postag="interp:comma" regexp="yes">[,?!]<exception scope="next">(</exception></token></marker>
            <token postag="interp">)</token>
        </pattern>
        <disambig action="replace"><wd pos="interp"/></disambig>
        <example type="ambiguous" inputform=",[,/interp:comma]" outputform=",[,/interp]">To były liczby (np. 1<marker>,</marker> 2), którymi się posługiwał.</example>
    </rule>

    <rule name="drugi przecinek w nawiasie wtrącenia" id="drugi_przecinek_w_nawiasie">
        <pattern>
            <token postag="interp" skip="-1">(<exception scope="next" regexp="yes">[()]</exception></token>
            <token skip="-1">,<exception scope="next">(</exception></token>
            <marker><token skip="-1" postag="interp:comma">,<exception scope="next">(</exception></token></marker>
            <token postag="interp">)</token>
        </pattern>
        <disambig action="replace"><wd pos="interp"/></disambig>
    </rule>

    <rule name="trzeci przecinek w nawiasie wtrącenia" id="trzeci_przecinek_w_nawiasie">
        <pattern>
            <token postag="interp" skip="-1">(<exception scope="next" regexp="yes">[()]</exception></token>
            <token skip="-1">,<exception scope="next">(</exception></token>
            <token skip="-1">,<exception scope="next">(</exception></token>
            <marker><token skip="-1" postag="interp:comma">,<exception scope="next">(</exception></token></marker>
            <token postag="interp">)</token>
        </pattern>
        <disambig action="replace"><wd pos="interp"/></disambig>
    </rule>

    <rule name="czwarty przecinek w nawiasie wtrącenia" id="czwarty_przecinek_w_nawiasie">
        <pattern>
            <token postag="interp" skip="-1">(<exception scope="next" regexp="yes">[()]</exception></token>
            <token skip="-1">,<exception scope="next">(</exception></token>
            <token skip="-1">,<exception scope="next">(</exception></token>
            <token skip="-1">,<exception scope="next">(</exception></token>
            <marker><token skip="-1" postag="interp:comma">,<exception scope="next">(</exception></token></marker>
            <token postag="interp">)</token>
        </pattern>
        <disambig action="replace"><wd pos="interp"/></disambig>
    </rule>

    <rule name="piąty przecinek w nawiasie wtrącenia" id="piaty_przecinek_w_nawiasie">
        <pattern>
            <token postag="interp" skip="-1">(<exception scope="next" regexp="yes">[()]</exception></token>
            <token skip="-1">,<exception scope="next">(</exception></token>
            <token skip="-1">,<exception scope="next">(</exception></token>
            <token skip="-1">,<exception scope="next">(</exception></token>
            <token skip="-1">,<exception scope="next">(</exception></token>
            <marker><token skip="-1" postag="interp:comma">,<exception scope="next">(</exception></token></marker>
            <token postag="interp">)</token>
        </pattern>
        <disambig action="replace"><wd pos="interp"/></disambig>
    </rule>

    <rule name="wtrącenia z myślnikami, ale bez zdania w środku" id="myslniki_1">
        <pattern>
            <marker><token spacebefore="yes" skip="-1" regexp="yes">[-−–—―]<exception scope="next" postag="verb:.*(sg|pl).*|verb:imps.*|pred|pant.*|pcon.*" postag_regexp="yes"/></token>
            </marker>
            <token spacebefore="yes" regexp="yes">[-−–—―]</token>
        </pattern>
        <disambig action="replace"><wd pos="interp"/></disambig>
        <example type="untouched">On był – jeśli w ogóle można mówić o kimś takim „on” – wyjątkowo wredny.</example>
        <example type="ambiguous" inputform="–[–/interp:comma]" outputform="–[–/interp]">On był <marker>–</marker> wyjątkowo – wredny.</example>
    </rule>

    <rule name="nawiasy z wtrąceniem, ale bez zdania w środku" id="myslniki_2">
        <pattern>
            <token skip="-1" spacebefore="yes" regexp="yes">[-−–—―]<exception scope="next" postag="verb:.*(sg|pl).*|verb:imps.*|pred|pant.*|pcon.*" postag_regexp="yes"/></token>
            <marker>
                <token spacebefore="yes" regexp="yes">[-−–—―]</token>
            </marker>
            <token><exception postag="ppron.*:nom:.*|conj|comp" postag_regexp="yes"/></token>
        </pattern>
        <disambig action="replace"><wd pos="interp"/></disambig>
        <example type="untouched">On był (jeśli w ogóle można mówić o kimś takim „on”) wyjątkowo wredny.</example>
        <example type="ambiguous" inputform="–[–/interp:comma]" outputform="–[–/interp]">On był – wyjątkowo <marker>–</marker> wredny.</example>
        <example type="untouched">„Nie, nie, nie bój się — na to mu Don Kichot — ja mu nie każę, a on rozkazy moje szanować musi”.</example>
        <example type="untouched">— Gdybyście ją obaczyli — na to Don Kichot — to cóż by za zasługa wasza była, że przyznalibyście prawdę.</example>
        <example type="untouched">Szef rządu radzieckiego Nikita  Chruszczow zaapelował dziewiątego sierpnia bieżącego roku do rządów odnośnych państw - w tym również do rządu tureckiego - by wykazały umiar i bezwzględne poszanowanie niezawisłości.</example>
    </rule>

    <rule name="opisany powyżej" id="opisany_powyzej">
        <pattern>
            <token inflected="yes" regexp="yes">pisać|opisać|przedstawić|przedstawiać|podać|zamieścić|wymienić</token>
            <marker>
                <token regexp="yes">powyżej|poniżej</token>
            </marker>
        </pattern>
        <disambig postag="adv:pos:aff"/>
    </rule>

    <rule id="plus" name="plus jako spójnik koło liczb">
        <pattern>
            <marker>
                <token>plus</token>
            </marker>
            <token postag="num.*" postag_regexp="yes"/>
        </pattern>
        <disambig postag="conj"/>
    </rule>

    <rulegroup name="przeszło|ponad + liczba -> kublik (operatory adnumeratywne)" id="przeszlo">
        <rule>
            <pattern>
                <marker>
                    <token regexp="yes">przeszło|ponad|minus|minimum|maksimum|blisko</token>
                </marker>
                <token postag="num.*" postag_regexp="yes"/>
            </pattern>
            <disambig postag="qub"/>
        </rule>
        <rule>
            <pattern>
                <marker>
                    <token regexp="yes">przeszło|ponad|minimum|maksimum|blisko</token>
                </marker>
                <token inflected="yes" regexp="yes">.+letni|.+krotnie|\d+</token>
            </pattern>
            <disambig postag="qub"/>
            <example type="untouched">Przeszło trzydziestu panów pije wódkę.</example>
            <example type="ambiguous" inputform="Przeszło[przejść/verb:praet:sg:n1.n2:ter:perf:nonrefl,przejść/verb:praet:sg:n1.n2:ter:perf:refl,przeszło/qub,przeszły/adja]" outputform="Przeszło[przeszło/qub]"><marker>Przeszło</marker> 30 panów pije wódkę.</example>
        </rule>
        <rule>
            <pattern>
                <marker>
                    <token regexp="yes">przeszło|ponad</token>
                </marker>
                <unify><feature id="case"/>
                <token postag="prep.*" postag_regexp="yes"/>
                <token postag="num.*" postag_regexp="yes"/>
                </unify>
            </pattern>
            <disambig postag="qub"/>
            <example type="ambiguous" inputform="przeszło[przejść/verb:praet:sg:n1.n2:ter:perf:nonrefl,przejść/verb:praet:sg:n1.n2:ter:perf:refl,przeszło/qub,przeszły/adja]"
                     outputform="przeszło[przeszło/qub]">Turnie, wznosząc się <marker>przeszło</marker> na cztery tysiące metrów ponad dnem tej przepaści, spadały ku niej prawie pionowo.</example>
        </rule>
        <rule>
            <pattern>
                <marker>
                    <token regexp="yes">przeszło|ponad</token>
                </marker>
                <unify><feature id="case"/>
                    <token postag="prep.*" postag_regexp="yes"/>
                    <token>roku</token>
                </unify>
            </pattern>
            <disambig postag="qub"/>
            <example type="ambiguous" inputform="przeszło[przejść/verb:praet:sg:n1.n2:ter:perf:nonrefl,przejść/verb:praet:sg:n1.n2:ter:perf:refl,przeszło/qub,przeszły/adja]"
                     outputform="przeszło[przeszło/qub]">Ta sprawa datuje się <marker>przeszło</marker> sprzed roku.</example>
        </rule>

    </rulegroup>

    <rule name="prawie/subst -> kublik" id="prawie">
        <pattern>
            <token><exception postag="prep.*(inst|loc).*" postag_regexp="yes"/></token>
            <marker>
                <token>prawie</token>
            </marker>
        </pattern>
        <disambig postag="qub"/>
    </rule>

    <rule id="prawie_rokiem" name="przed prawie rokiem, półwiekiem, miesiącem... => qub">
        <pattern>
            <token postag="prep:inst:nwok">przed</token>
            <token postag="qub">prawie</token>
            <token postag="subst:sg:inst.*" postag_regexp="yes"/>
        </pattern>
        <disambig action="filterall"/>
    </rule>

    <rule name="ciemku" id="ciemku">
        <pattern>
            <marker>
                <token>ciemku</token>
            </marker>
        </pattern>
        <disambig action="add"><wd lemma="po ciemku" pos="adjp">ciemku</wd></disambig>
    </rule>
<!-- 
	<rule name="Nazwy liter" id="AZ">
		<pattern>
			<token><exception inflected="yes">litera</exception></token>
			<marker><token regexp="yes">[A-Za-z]</token></marker>
		</pattern>
		<disambig action="filter" postag="^(?!subst).*$"></disambig>    
		<example type="ambiguous" inputform="i[i/conj,i/interj,i/qub,i/subst:pl:acc:n2,i/subst:pl:dat:n2,i/subst:pl:gen:n2,i/subst:pl:inst:n2,i/subst:pl:loc:n2,i/subst:pl:nom:n2,i/subst:pl:voc:n2,i/subst:sg:acc:n2,i/subst:sg:dat:n2,i/subst:sg:gen:n2,i/subst:sg:inst:n2,i/subst:sg:loc:n2,i/subst:sg:nom:n2,i/subst:sg:voc:n2]" 
		outputform="i[i/conj,i/interj,i/qub]">Ty <marker>i</marker> ja</example>
		<example type="untouched">To litera a jest pierwsza.</example>  
    </rule>
 -->

    <rule name="litera u/a/i" id="litera_u">
        <pattern>
            <token inflected="yes">litera</token>
            <marker>
            <token case_sensitive="yes" regexp="yes">[AUIW]</token>
            </marker>
        </pattern>
        <disambig action="replace"><wd pos="subst:sg:nom:n2"/></disambig>
        <example type="ambiguous" inputform="U[u/prep:gen]"
                 outputform="U[U/subst:sg:nom:n2]">Utworzył coś w rodzaju ogromnej litery <marker>U</marker>, brzuścem dolnym zwrócone do lądu.</example>
    </rule>

    <rule name="tym" id="tym">
        <pattern>
            <marker>
                <unify> <feature id="number"/><feature id="gender"/> <feature id="case"/>
                    <token>tym</token>
                    <token postag_regexp="yes" postag="(subst|ger):*"/>
                </unify>
            </marker>
        </pattern>
        <disambig action="unify"/>
    </rule>

    <rule name="tym niemniej" id="tym_niemniej">
        <pattern>
            <marker><token>tym</token></marker>
            <token>niemniej</token>
        </pattern>
        <disambig postag="conj"/>
    </rule>

    <rule id="co_najmniej" name="co najmniej">
        <pattern>
            <marker><token>co</token></marker>
            <token regexp="yes">najmniej|najwyżej</token>
        </pattern>
        <disambig postag="prep:acc"/> <!-- za NKJP, w Innym słowniku to jest przysłówek, w Uniwersalnym – partykuła -->
    </rule>

    <rule name="dzisiaj, dziś, wczoraj jako przysłówek" id="dzis_adv">
        <pattern>
            <marker><token regexp="yes">dziś|dzisiaj|wczoraj<exception scope="previous" postag_regexp="yes" postag="prep.*"></exception></token></marker>
        </pattern>
        <disambig postag="adv"/>
    </rule>
        
        <rulegroup name="co (i) rusz" id="CO_RUSZ">
        <rule>
            <pattern >
                    <token regexp="yes">co|ani</token>
                <marker>
                    <token>rusz</token>
                </marker>
            </pattern>
            <disambig postag="qub"/>
            <example type="untouched">Rusz tylko tę książkę!</example>
            <example type="ambiguous" inputform="rusz[rusza/subst:pl:gen:f,ruszyć/verb:impt:sg:sec:perf:refl.nonrefl]" outputform="rusz[rusza/qub]">Co <marker>rusz</marker> pyta o godzinę.</example>
        </rule>
        <rule>
            <pattern>
                    <token postag="qub">co</token>
                    <token>i</token>
                <marker>
                    <token>rusz</token>
                </marker>
            </pattern>
            <disambig postag="qub"/>
            <example type="untouched">Rusz tylko tę książkę!</example>
            <example type="ambiguous" inputform="rusz[rusza/subst:pl:gen:f,ruszyć/verb:impt:sg:sec:perf:refl.nonrefl]" outputform="rusz[rusza/qub]">Co i <marker>rusz</marker> pyta o godzinę.</example>
        </rule>
    </rulegroup>

    <rule id="DOPIERO_CO" name="dopiero co">
        <pattern>
            <marker>
                <token postag="qub">dopiero</token>
                <token postag="qub">co</token>
            </marker>
        </pattern>
        <disambig action="filterall"></disambig>
        <example type="ambiguous" inputform="co[co/comp,co/prep:acc,co/prep:nom,co/qub,co/subst:sg:acc:n2,co/subst:sg:gen:n2,co/subst:sg:nom:n2]"
                 outputform="co[co/qub]">Dopiero <marker>co</marker> to zrobiłeś!</example>
        <example type="untouched">Co ty robisz?</example>
    </rule>

    <rule id="ADJA_WON" name="adja to zła interpretacja bez dywizu">
        <pattern>
            <marker>
                <and>
                    <token postag="adja"/>
                    <token negate_pos="yes" postag="adja"/>
                </and>
            </marker>
            <token><exception regexp="yes">[-–—]</exception></token>
        </pattern>
        <disambig action="remove"><wd pos="adja"/></disambig>
        <example type="ambiguous" inputform="sporo[spora/subst:sg:voc:f,sporo/adv:pos,sporo/num:pl:nom.acc:m1.m2.m3.f.n1.n2.p1.p2:rec,spory/adja]"
                 outputform="sporo[spora/subst:sg:voc:f,sporo/adv:pos,sporo/num:pl:nom.acc:m1.m2.m3.f.n1.n2.p1.p2:rec]">Mam <marker>sporo</marker> pieniędzy.</example>
        <example type="ambiguous" inputform="było[być/verb:praet:sg:n1.n2:ter:imperf:nonrefl,były/adja]"
                 outputform="było[być/verb:praet:sg:n1.n2:ter:imperf:nonrefl]">To <marker>było</marker> obojętne.</example>
        <example type="untouched">abadańsko</example>
        <example type="untouched">Słownik niemiecko-francuski</example>
    </rule>

    <rule id="ADJA_WON_SENT_END" name="adja nie może być na końcu zdania">
        <pattern>
            <marker>
                <and>
                    <token postag="adja"/>
                    <token negate_pos="yes" postag="adja"/>
                    <token postag="SENT_END"/>
                </and>
            </marker>
        </pattern>
        <disambig action="remove"><wd pos="adja"/></disambig>
    </rule>

    <rule id="ADJA_OK" name="adja to dobra interpretacja z dywizem">
        <pattern>
            <marker>
                <and>
                    <token postag="adja"/>
                    <token negate_pos="yes" postag="adja"/>
                </and>
            </marker>
            <token regexp="yes">[-–—]</token>
            <token postag="(?:pact|adj|ppas).*" postag_regexp="yes"/>
        </pattern>
        <disambig postag="adja"/>
        <example type="untouched">Mam sporo pieniędzy.</example>
        <example type="ambiguous" inputform="polsko[polski/adja,polsko/adv:pos]"
                 outputform="polsko[polski/adja]">Słownik <marker>polsko</marker>-francuski</example>
        <example type="ambiguous" inputform="polsko[polski/adja,polsko/adv:pos]"
                 outputform="polsko[polski/adja]">Słownik <marker>polsko</marker>-indonezyjsko-polinezyjski</example>
        <example type="ambiguous" inputform="indonezyjsko[indonezyjski/adja,indonezyjsko/adv:pos]"
                 outputform="indonezyjsko[indonezyjski/adja]">Słownik polsko-<marker>indonezyjsko</marker>-polinezyjski</example>
    </rule>

    <rule id="OD_A_DO_Z_1" name="od a do z">
        <pattern>
            <token>od</token>
            <marker>
                <token>a</token>
            </marker>
            <token>do</token>
            <token>z</token>
        </pattern>
        <disambig action="replace"><wd pos="subst:sg:gen:n2"/></disambig>
    </rule>

    <rule id="OD_A_DO_Z_2" name="od a do z">
        <pattern>
            <token>od</token>
            <token>a</token>
            <token>do</token>
            <marker>
                <token>z</token>
            </marker>
        </pattern>
        <disambig action="replace"><wd pos="subst:sg:gen:n2"/></disambig>
    </rule>

    <rule id="PREP_LITERA_SUBST" name="jednoliterowe wyrazy oznaczające litery w wyliczeniu">
        <pattern>
            <token regexp="yes">\p{L}{1,2}</token>
            <token>,</token>
            <marker><token postag="prep.*" postag_regexp="yes" regexp="yes">\p{L}</token></marker>
            <token>,</token>
            <token regexp="yes">\p{L}{1,2}</token>
        </pattern>
        <disambig action="replace"><wd pos="subst:sg:nom:n2"/></disambig>
    </rule>

    <rule id="A_NUZ" name="a nuż">
        <pattern>
            <marker>
                <token postag="qub">a</token>
                <token postag="qub">nuż</token>
            </marker>
        </pattern>
        <disambig action="filterall"/>
    </rule>

    <rule id="a_kysz" name="a kysz - wykrzyknik">
        <pattern>
            <marker><token>a</token></marker>
            <token regexp="yes">jakże|kysz|sio|fe</token>
        </pattern>
        <disambig postag="interj"></disambig>
    </rule>

    <rule id="a_propos" name="a propos">
        <pattern>
            <marker><token>a</token></marker>
            <token>propos</token>
        </pattern>
        <disambig postag="ign"/>
    </rule>

    <rule id="APOSTROF_A" name="a po apostrofie to nie spójnik ani przyimek">
        <pattern>
            <token regexp="yes">[\p{L}-]+</token>
            <token regexp="yes">&apost;</token>
            <marker><token spacebefore="no">a</token></marker>
        </pattern>
        <disambig postag="ign"/>
        <example type="ambiguous" inputform="a[a/conj,a/interj,a/prep:nom,a/qub]" outputform="a[a/ign]">To było w pierwszej pracy krytycznej Navarrette'<marker>a</marker>.</example>
    </rule>

    <rule id="a_nie_prep" name="a_conj">
        <pattern>
            <token>,</token>
            <marker><token postag="conj">a</token></marker>
        </pattern>
        <disambig postag="conj"/>
    </rule>

    <rule id="ANI_QUB" name="ani jako kublik">
        <pattern>
            <marker><token>ani</token></marker>
            <token regexp="yes">chybi|dudu|mru-mru|razu|trochę</token>
        </pattern>
        <disambig postag="qub"/>
        <example type="untouched">Ani be, ani me, ani kukuryku.</example>
        <example type="ambiguous" inputform="Ani[Ani/comp:comma,Ania/subst:pl:gen:f,Ania/subst:sg:dat:f,Ania/subst:sg:gen:f,Ania/subst:sg:loc:f,ani/conj,ani/qub]"
                 outputform="Ani[ani/qub]"><marker>Ani</marker> chybi kupił pstrąga.</example>
    </rule>

    <rule id="ani_be_ani_me" name="ani be, ani me - wykrzykniki">
        <pattern>
            <token postag="conj" regexp="yes">a?ni</token>
            <token postag="interj">be</token>
            <token>,</token>
            <token postag="conj" regexp="yes">a?ni</token>
            <token postag="interj">me</token>
        </pattern>
        <disambig action="filterall"/>
    </rule>

    <rule id='me_interj' name="me jako barani odgłos i wykrzyknik">
        <pattern>
            <marker>
                <token>me
                <exception scope="previous" postag="subst:pl.*acc.*:n.*|subst:sg:acc:n.*|subst:.*.*nom.*:n.*"></exception>
                </token>
            </marker>
            <token>!</token>
        </pattern>
        <disambig postag="interj"/>
    </rule>

    <rule id="me_nie_interj" name="me jako przymiotnik">
        <pattern>
            <token postag="interj" negate_pos="yes">me</token>
        </pattern>
        <disambig action="remove"><wd pos="interj"/></disambig>
    </rule>

    <rulegroup name="bez czarny" id="bez_czarny">
    	<rule>
    		<pattern>
    		<marker>
    			<token>bez</token>
    		</marker>
    			<token regexp="yes">czarny|dziki</token>
    		</pattern>
    		<disambig action="filter" postag="subst:sg:(acc|nom):m3"></disambig>
    		<example type="untouched">Proszę kremówkę bez kremu.</example>
    		<example type="ambiguous" inputform="bez[bez/prep:gen:nwok,bez/subst:sg:acc:m3,bez/subst:sg:nom:m3,beza/subst:pl:gen:f]" outputform="bez[bez/subst:sg:acc:m3,bez/subst:sg:nom:m3]">Jaki piękny jest <marker>bez</marker> czarny.</example>
    	</rule>
    	<rule>
    		<pattern>
                <token regexp="yes">czarny|dziki</token>
    		<marker>
    			<token>bez</token>
    		</marker>
    		<token><exception postag_regexp="yes" postag=".*gen.*"></exception></token>
    		</pattern>
    		<disambig action="filter" postag="subst:sg:(acc|nom):m3"></disambig>
    		<example type="untouched">Proszę kremówkę bez kremu.</example>
    		<example type="ambiguous" inputform="bez[bez/prep:gen:nwok,bez/subst:sg:acc:m3,bez/subst:sg:nom:m3,beza/subst:pl:gen:f]" outputform="bez[bez/subst:sg:acc:m3,bez/subst:sg:nom:m3]">Jaki piękny jest dziki <marker>bez</marker>.</example>
    	</rule>
    	<rule>
    		<pattern>
    		<marker>
    			<token>bez</token>
    		</marker>
    		<token postag_regexp="yes" postag=".*gen.*"></token>    		
    		</pattern>    		
    		<disambig postag="prep:gen:nwok"></disambig>
    		<example type="ambiguous" inputform="bez[bez/prep:gen:nwok,bez/subst:sg:acc:m3,bez/subst:sg:nom:m3,beza/subst:pl:gen:f]" outputform="bez[bez/prep:gen:nwok]">Proszę kremówkę <marker>bez</marker> kremu.</example>
    		<example type="untouched">Jaki piękny jest dziki <marker>bez</marker>.</example>
    	</rule>
    </rulegroup>


    <rule id="na_per" name="na per => prep">
        <pattern>
            <marker>
            <token postag="prep:acc">na</token>
            <token postag="prep:nom">per</token>
            </marker>
            <token min="0" regexp="yes">[«»„&quot;]</token>
            <token postag=".*nom.*" postag_regexp="yes"/>
        </pattern>
        <disambig action="filterall"/>
    </rule>

    <rule id="na_potem" name="na potem -> adv">
        <pattern>
            <token postag="prep:acc">na</token>
            <token postag="adv">potem</token>
        </pattern>
        <disambig action="filterall"/>
    </rule>

    <rule id="na_szybko" name="na szybko, sypko -> adv:pos">
        <pattern>
            <token postag="prep:acc">na</token>
            <token postag="adv:pos" regexp="yes">szybko|sypko</token>
        </pattern>
        <disambig action="filterall"/>
    </rule>

    <rule id="o_tak" name="o tak -> adv">
        <pattern>
            <token regexp="yes">[wo]|na|nad|przed|pod|pomiędzy</token>
            <marker><token>tak</token></marker>
        </pattern>
        <disambig action="remove"><wd lemma="taka"/></disambig>
    </rule>

    <rule id="tak_num" name="tak + num => adv">
        <pattern>
            <token postag="adv:pos">tak</token>
            <token postag="num:pl.*" postag_regexp="yes" inflected="yes" regexp="yes">wiele|mało</token>
        </pattern>
        <disambig action="filterall"/>
    </rule>

    <rule id="tak_adv" name="tak + adj => adv">
        <pattern>
            <token postag="adv:pos">tak</token>
            <token postag="ad[jv].*:pos|verb.*|ppas.*" postag_regexp="yes"/>
        </pattern>
        <disambig action="filterall"/>
    </rule>

    <rule id="szybko_adv" name="szybko + adj => adv">
        <pattern>
            <token postag="adv:pos|qub" postag_regexp="yes" regexp="yes">szybko|grubo|prawie|płytko</token>
            <token postag="(?:adj|pact|ppas).*" postag_regexp="yes"/>
        </pattern>
        <disambig action="filterall"/>
    </rule>

    <rule id="gora_num" name="góra jako qub">
        <pattern>
            <marker><token>góra</token></marker>
            <token postag="num.*" postag_regexp="yes"/>
        </pattern>
        <disambig postag="qub"/>
    </rule>

    <rule id="gora_num_234" name="góra jako qub">
        <pattern>
            <marker><token>góra</token></marker>
            <token regexp="yes">\d*[234]</token>
            <token postag=".*:pl:nom.*" postag_regexp="yes"/>
        </pattern>
        <disambig postag="qub"/>
    </rule>

    <rule id="gora_num_59" name="góra jako qub">
        <pattern>
            <marker><token>góra</token></marker>
            <token regexp="yes">\d*[5-9]|\d+0|1[1-9]</token>
            <token postag=".*:pl:gen.*" postag_regexp="yes"/>
        </pattern>
        <disambig postag="qub"/>
    </rule>

    <rule id="wraz_z" name="wraz z => burk">
        <pattern>
            <marker>
                <token postag="burk">wraz</token>
                <token postag="prep:inst.*" postag_regexp="yes" inflected="yes">z</token>
            </marker>
        </pattern>
        <disambig action="filterall"/>
    </rule>

    <rule id="znad_inst" name="znad tylko z dopełniaczem!">  <!-- polimorf bug -->
        <pattern>
            <token inflected="yes">znad</token>
        </pattern>
        <disambig action="filter" postag="prep:gen.*"/>
    </rule>

    <rule id="coz_za" name="cóż (to) za => qub">
        <pattern>
            <token postag="subst:sg:nom:n2" regexp="yes">cóż|co</token>
            <token postag="qub">to</token>
            <token postag="qub">za</token>
            <token postag=".*nom.*" postag_regexp="yes"></token>
        </pattern>
        <disambig action="filterall"/>
    </rule>

    <rule id="coz_za2" name="cóż za => qub">
        <pattern>
            <token postag="subst:sg:nom:n2" regexp="yes">cóż|co
                <exception scope="previous">,</exception>
            </token>
            <token postag="qub">za</token>
            <token postag=".*nom.*" postag_regexp="yes"></token>
        </pattern>
        <disambig action="filterall"/>
    </rule>

    <rule id="coz_za3" name="cóż za => qub">
        <pattern>
            <token skip="1" postag="subst:sg:nom:n2" regexp="yes">cóż|co
                <exception scope="previous">,</exception>
            </token>
            <marker>
            <token postag="qub">za</token>
            <token postag=".*nom.*" postag_regexp="yes"></token>
            </marker>
        </pattern>
        <disambig action="filterall"/>
        <example type="untouched">— Oho, odmówiłbym księciu Alby, a majstra Piotra pomieścił — odrzecze gospodarz — jest tu dosyć ludzi, co za widzenie dobrze zapłacą.</example>
    </rule>

    <rule id="CZAS_NIE_PRED" name="czas + gen to nie predykatyw">
        <pattern>
            <marker>
                <token>czas</token>
            </marker>
            <token postag_regexp="yes" postag=".*gen.*"/>
            <token><exception postag_regexp="yes" postag="verb:inf.*"/></token>
        </pattern>
        <disambig action="remove" postag="pred"/>
        <example type="untouched">Czas umierać!</example>
        <example type="ambiguous" inputform="Czas[czas/pred,czas/subst:sg:acc:m3,czas/subst:sg:nom:m3]"
                 outputform="Czas[czas/subst:sg:acc:m3,czas/subst:sg:nom:m3]"><marker>Czas</marker> przygotowania: do 30 minut</example>
    </rule>

    <rule id="prawie_ze" name="prawie że">
        <pattern>
            <token postag="qub">prawie</token>
            <token postag="qub">że</token>
        </pattern>
        <disambig action="filterall"/>
    </rule>

    <rule name="prawie + liczba -> qub" id="prawie_num">
        <pattern>
            <marker>
                <token regexp="yes">niemal|prawie|ponad</token>
            </marker>
            <token regexp="yes">\d+%?</token>
        </pattern>
        <disambig postag="qub"/>
    </rule>

    <rule name="prawie + liczebnik -> qub" id="prawie_numeral">
        <pattern>
            <marker>
                <token regexp="yes">niemal|prawie|ponad</token>
            </marker>
            <token postag_regexp="yes" postag="num:.*"/>
        </pattern>
        <disambig postag="qub"/>
    </rule>

    <rule id="SOL_I_PIEPRZ" name="sól i pieprz do smaku to nie czasowniki">
        <pattern>
            <marker>
                <token regexp="yes" postag="subst:sg.*" postag_regexp="yes">sól|pieprz</token>
                <token>i</token>
                <token regexp="yes" postag="subst:sg.*" postag_regexp="yes">sól|pieprz</token>
            </marker>
            <token>do</token>
            <token>smaku</token>
        </pattern>
        <disambig action="filterall"></disambig>
        <example type="untouched">Nie pieprz!</example>
        <example type="ambiguous" inputform="sól[solić/verb:impt:sg:sec:imperf:refl.nonrefl,sól/subst:sg:acc:f,sól/subst:sg:nom:f]"
                 outputform="sól[sól/subst:sg:acc:f,sól/subst:sg:nom:f]">Dodaj <marker>sól</marker> i pieprz do smaku.</example>
    </rule>

    <rule id="OD_DAWNA" name="od dawna">
        <pattern>
            <token>od</token>
            <token min="0" max="1" regexp="yes">[tj]ak</token>
            <marker><token regexp="yes">dawna|niedawna|nowa</token></marker>
        </pattern>
        <disambig postag="adjp"/>
        <example type="ambiguous" inputform="dawna[dawny/adj:sg:nom.voc:f:pos]" outputform="dawna[dawny/adjp]">Czy od <marker>dawna</marker> tak jest?</example>
        <example type="ambiguous" inputform="dawna[dawny/adj:sg:nom.voc:f:pos]" outputform="dawna[dawny/adjp]">Od jak <marker>dawna</marker> tak jest?</example>
    </rule>

    <rule id="OD_JAK_DAWNA" name="od jak dawna">
        <pattern>
            <marker>
                <token postag="prep:gen:nwok">od</token>
                <token postag="adv.*" postag_regexp="yes" regexp="yes">[tj]ak</token>
            </marker>
            <token>dawna</token>
        </pattern>
        <disambig action="filterall"/>
    </rule>

    <rule id="Z_WOLNA" name="z wolna/daleka">
          <pattern>
              <token postag="prep:acc:nwok">z</token>
              <marker>
              <token regexp="yes">bliska|wolna|daleka|dawna|lekka|lewa|grubsza|nagła|osobna|prawa|pyszna|rzadka|wiejska|wysoka</token>
              </marker>
          </pattern>
        <disambig postag="adjp"/>
        <example type="ambiguous" inputform="wolna[wolny/adj:sg:nom.voc:f:pos]"
                 outputform="wolna[wolny/adjp]">Szedł z <marker>wolna</marker>.</example>
    </rule>

    <rule id="Z_WOLNA_2" name="z wolna/daleka">
        <pattern>
            <marker>
                <token>z</token>
            </marker><token regexp="yes">wolna|bliska|daleka|dawna|lekka|lewa|grubsza|osobna|prawa|pyszna|rzadka|wiejska|wysoka|naprzeciwka</token>
        </pattern>
        <disambig postag="prep:acc:nwok"/>
    </rule>

    <rule id="Z_BARDZO_WOLNA" name="z wolna/daleka">
        <pattern>
            <token>z</token>
            <token>bardzo</token>
            <marker>
                <token regexp="yes">bliska|daleka|dawna|wysoka|wolna</token>
            </marker>
        </pattern>
        <disambig postag="adjp"/>
        <example type="ambiguous" inputform="wolna[wolny/adj:sg:nom.voc:f:pos]"
                 outputform="wolna[wolny/adjp]">Szedł z bardzo <marker>wolna</marker>.</example>
    </rule>

    <rule id="skorzystac_z_prawa_gen" name="skorzystać z prawa">
        <pattern>
            <token inflected="yes" regexp="yes">s?korzystać</token>
            <marker>
                <token>z</token>
                <token>prawa</token>
            </marker>
        </pattern>
        <disambig action="replace"><wd pos="prep:gen:nwok" lemma="z"/><wd pos="subst:sg:gen:n2" lemma="prawo"/></disambig>
    </rule>

    <rule id="CO_GORSZA" name="co gorsza">
        <pattern>
            <token>co</token>
            <marker>
                <token>gorsza</token>
            </marker>
        </pattern>
        <disambig postag="adjp"/>
        <example type="ambiguous" inputform="gorsza[zły/adj:sg:nom.voc:f:com]"
                 outputform="gorsza[zły/adjp]">Co <marker>gorsza</marker>, jadł grzyby.</example>
    </rule>

    <rule id="CO_GORSZA_2" name="co gorsza">
        <pattern>
            <marker>
                <token>co</token>
            </marker><token>gorsza</token>
        </pattern>
        <disambig postag="prep:acc"/>
    </rule>


    <rule id="DO_CNA" name="do cna">
        <pattern>
            <token>do</token>
            <marker>
                <token>cna</token>
            </marker>
        </pattern>
        <disambig action="replace"><wd pos="adjp" lemma="cny"/></disambig>
        <example type="ambiguous" inputform="cna[cna/burk,cny/adj:sg:nom.voc:f:pos]"
                 outputform="cna[cny/adjp]">Przemókł do <marker>cna</marker>.</example>
    </rule>

    <rule id="DO_CZYSTA" name="do czysta">
        <pattern>
            <token>do</token>
            <marker>
                <token>czysta</token>
            </marker>
        </pattern>
        <disambig action="replace"><wd pos="adjp" lemma="czysty"/></disambig>
        <example type="ambiguous" inputform="czysta[czysta/subst:sg:nom:f,czysta/subst:sg:voc:f,czysty/adj:sg:nom.voc:f:pos]"
                 outputform="czysta[czysty/adjp]">Wyporządź mi kancelarię do <marker>czysta</marker>.</example>
    </rule>

    <rule id="DO_NAGA" name="do naga">
        <pattern>
            <token>do</token>
            <marker>
                <token>naga</token>
            </marker>
        </pattern>
        <disambig action="replace"><wd pos="adjp" lemma="nagi"/></disambig>
        <example type="ambiguous" inputform="naga[nagi/adj:sg:nom.voc:f:pos]"
                 outputform="naga[nagi/adjp]">Rozebrała się do <marker>naga</marker>.</example>
    </rule>


    <rule id="DO_NIEDAWNA" name="do niedawna">
        <pattern>
            <token regexp="yes">do|od</token>
            <marker>
                <token>niedawna</token>
            </marker>
        </pattern>
        <disambig action="replace"><wd pos="adjp" lemma="niedawny"/></disambig>
        <example type="ambiguous" inputform="niedawna[niedawny/adj:sg:nom.voc:f:pos]"
                 outputform="niedawna[niedawny/adjp]">Do <marker>niedawna</marker> żarłem jarmuż.</example>
    </rule>

    <rule id="DO_PELNA" name="do pełna">
        <pattern>
            <token>do</token>
            <marker>
                <token>pełna</token>
            </marker>
        </pattern>
        <disambig action="replace"><wd pos="adjp" lemma="pełny"/></disambig>
        <example type="ambiguous" inputform="pełna[pełny/adj:sg:nom.voc:f:pos]"
                 outputform="pełna[pełny/adjp]">Podał mu do <marker>pełna</marker> wypełnioną szklankę.</example>
    </rule>

    <rule id="DO_POZNA" name="do późna">
        <pattern>
            <token>do</token>
            <marker>
                <token>późna</token>
            </marker>
        </pattern>
        <disambig action="replace"><wd pos="adjp" lemma="późny"/></disambig>
        <example type="ambiguous" inputform="późna[późny/adj:sg:nom.voc:f:pos]"
                 outputform="późna[późny/adjp]">Siedziała do <marker>późna</marker>.</example>
    </rule>

    <rule id="DO_SUCHA" name="do sucha">
        <pattern>
            <token>do</token>
            <marker>
                <token>sucha</token>
            </marker>
        </pattern>
        <disambig action="replace"><wd pos="adjp" lemma="suchy"/></disambig>
        <example type="ambiguous" inputform="sucha[suchy/adj:sg:nom.voc:f:pos]"
                 outputform="sucha[suchy/adjp]">Wytarł twarz do <marker>sucha</marker>.</example>
    </rule>

    <rule id="DO_SYTA" name="do syta">
        <pattern>
            <token>do</token>
            <marker>
                <token>syta</token>
            </marker>
        </pattern>
        <disambig action="replace"><wd pos="adjp" lemma="syty"/></disambig>
        <example type="ambiguous" inputform="syta[syta/subst:sg:nom:f,syty/adj:sg:nom.voc:f:pos]"
                 outputform="syta[syty/adjp]">Najadł się do <marker>syta</marker> zupą.</example>
    </rule>


    <rule id="do_cna" name="do cna/czysta">
        <pattern>
            <marker>
                <token>do</token>
            </marker><token regexp="yes">cna|czysta|niedawna|naga|pełna|późna|sucha|syta</token>
        </pattern>
        <disambig postag="prep:gen"/>
    </rule>


    <rule name="od to nie oda" id="OD_PREP_GEN">
        <pattern>
            <marker>
                <token>od</token>
            </marker>
            <token min="0" max="1" regexp="yes">\d+</token>
            <token postag_regexp="yes" postag=".*gen.*|adjp"></token>
        </pattern>
        <disambig postag="prep:gen:nwok"></disambig>
        <example type="untouched">Od rok 2000 jestem nieruchawy.</example>
        <example type="ambiguous" inputform="Od[Oda/subst:pl:gen:f,od/prep:gen:nwok,oda/subst:pl:gen:f]" outputform="Od[od/prep:gen:nwok]"><marker>Od</marker> roku 2000 jestem nieruchawy.</example>
    </rule>

    <rule id="ciagle" name="ciągle to nie ciągło">
        <pattern>
            <token>ciągle</token>
        </pattern>
        <disambig postag="adv:pos"/>
    </rule>

    <rule id="raczej" name="raczej to prawie na pewno kublik">
        <pattern>
            <token>raczej</token>
        </pattern>
        <disambig postag="qub"/>
    </rule>

    <rule id="nader" name="nader =>adv">
        <pattern>
            <marker>
                <token>nader</token>
            </marker>
            <token postag="(adj|ppas|pact).*" postag_regexp="yes"/>
        </pattern>
        <disambig postag="adv"/>
    </rule>

    <rule name="przede wszystkim" id="przede_wszystkim">
        <pattern>
            <token>przede</token>
            <marker><token>wszystkim</token></marker>
        </pattern>
        <disambig postag="subst:sg:inst:n2"/>
    </rule>

    <rule name="W wiek" id="w_wiek">
        <pattern case_sensitive="yes">
            <token regexp="yes">((X{0,2})(V?I{0,3}|I[VX]))(-(X{0,2})(V?I{0,3}|I[VX]))?<exception postag="SENT_START"/><exception>-</exception></token>
            <marker><token>w</token></marker>
            <token>.</token>
        </pattern>
        <disambig postag="brev:pun"/>
        <example type="ambiguous" inputform="w[w/prep:acc:nwok,w/prep:loc:nwok,wiek/brev:pun]" outputform="w[wiek/brev:pun]">Dziwny był ten XX <marker>w</marker>.</example>
        <example type="ambiguous" inputform="w[w/prep:acc:nwok,w/prep:loc:nwok,wiek/brev:pun]" outputform="w[wiek/brev:pun]">Polska w opiniach obcych X-XII <marker>w</marker>.</example>
        <example type="untouched">Mam to w szufladzie.</example>
    </rule>
    <rule id="w_wiek_II" name="W w. XX">
        <pattern case_sensitive="yes">
            <marker><token>w</token></marker>
            <token>.</token>
            <token regexp="yes">((X{0,2})(V?I{0,3}|I[VX]))(-(X{0,2})(V?I{0,3}|I[VX]))?<exception postag="SENT_START"/><exception>-</exception></token>
        </pattern>
        <disambig postag="brev:pun"/>
        <example type="ambiguous" inputform="w[w/prep:acc:nwok,w/prep:loc:nwok,wiek/brev:pun]" outputform="w[wiek/brev:pun]">To było w <marker>w</marker>. XX.</example>
    </rule>
    <rule name="W wat" id="W_wat">
        <pattern case_sensitive="yes">
            <token regexp="yes">\d+</token>
            <marker><token>W</token></marker>
        </pattern>
        <disambig postag="brev:npun"/>
        <example type="untouched">Dużo wody jest w szklance.</example>
        <example type="untouched">To było w XIX w.</example>
        <example type="ambiguous" inputform="W[w/prep:acc:nwok,w/prep:loc:nwok,wat/brev:npun,wiek/brev:pun]" outputform="W[wat/brev:npun]">Te głośniki mają moc 20 <marker>W</marker>.</example>
    </rule>
    <rule name="W jako inicjał" id="W_uppercase">
        <pattern case_sensitive="yes">
            <marker><token>W</token></marker>
            <token>.</token>
            <token regexp="yes">\p{Lu}\p{Ll}+</token>
        </pattern>
        <disambig action="replace"><wd pos="brev:pun"/></disambig>
    </rule>
    <rule name="W prep" id="w_prep">
        <pattern>
            <token postag_regexp="yes" postag="prep:(acc|loc):nwok">w</token>
        </pattern>
        <disambig action="remove" postag="brev:n?pun"/>
        <example type="ambiguous" inputform="w[w/prep:acc:nwok,w/prep:loc:nwok,wiek/brev:pun]" outputform="w[w/prep:acc:nwok,w/prep:loc:nwok]">Mam to <marker>w</marker> szufladzie.</example>
        <example type="untouched">Dziwny XIX w.</example>
    </rule>

    <rule id="woj_brev" name="woj. pomorskie">
        <pattern>
            <token postag="brev:pun">woj</token>
            <token spacebefore="no">.</token>
            <token postag="adj.*n1.*:pos" postag_regexp="yes"/>
        </pattern>
        <disambig action="filterall"/>
    </rule>

    <rule id="WOJ_BREV_ADJA" name="woj jako skrót">
        <pattern>
            <marker>
                <token postag="brev:pun">woj</token>
                <token spacebefore="no">.<exception postag="SENT_END"/></token>
                <token postag="adja"/>
                <token spacebefore="no">-</token>
                <token postag="adj.*n1.*:pos" postag_regexp="yes"/>
            </marker>
        </pattern>
        <disambig action="filterall"/>
        <example type="ambiguous" inputform="woj[woj/subst:sg:nom:m1,województwo/brev:pun,wojo/subst:pl:gen:n2]" outputform="woj[województwo/brev:pun]">Antonia - wieś w <marker>woj</marker>. warmińsko-mazurskim.</example>
    </rule>

    <rule id="uznac_za_acc" name="za po uznać wymaga biernika">
        <pattern>
            <token skip="5" regexp="yes" inflected="yes">uważać|dziękować|przepraszać|uchodzić|przeprosić|uznać|uznawać|odpowiadać<exception scope="next" regexp="yes">[\p{Punct}—–„«»…&amp;&amp;[^\.]]+</exception></token>
            <marker><token>za</token></marker>
          	<token postag=".*acc.*" postag_regexp="yes"><exception postag=".*inst.*" postag_regexp="yes"></exception></token>
        </pattern>
        <disambig postag="prep:acc"/>
    </rule>

    <rule id="cel_nie_brev" name="cel. to skrót, cel nie">
        <pattern>
            <marker><token>cel</token></marker>
            <token><exception>.</exception></token>
        </pattern>
        <disambig action="remove"><wd lemma="celujący"/></disambig>
    </rule>

    <rule id="dol_brev" name="dol. to skrót">
        <pattern>
            <token regexp="yes">\d+|[bm]l[dn]|[\.]</token>
            <marker>
            <token>dol</token>
            </marker>
            <token>.</token>
        </pattern>
        <disambig action="replace"><wd lemma="dolar" pos="brev:pun"/></disambig>
    </rule>

    <rule name="dzięki czemu" id="dzieki_prep_dat">
    <pattern>    		
    		<marker>
    			<token>dzięki</token>
    		</marker>
    		<token postag_regexp="yes" postag=".*dat.*"></token>    		
    		</pattern>    		
    <disambig postag="prep:dat"></disambig>    
    <example type="untouched">Dzięki, mała!</example>
    <example type="ambiguous" inputform="dzięki[dzięk/subst:pl:acc:m3,dzięk/subst:pl:nom:m3,dzięk/subst:pl:voc:m3,dzięka/subst:pl:acc:f,dzięka/subst:pl:nom:f,dzięka/subst:pl:voc:f,dzięka/subst:sg:gen:f,dzięki/prep:dat,dzięki/subst:pl:acc:p3,dzięki/subst:pl:nom:p3,dzięki/subst:pl:voc:p3]" outputform="dzięki[dzięki/prep:dat]">To wszystko <marker>dzięki</marker> pomocy europejskiej.</example>	
    </rule>

    <rule name="(po)mimo że" id="MIMO_ZE_QUB">
        <pattern>
            <marker><token regexp="yes" postag="burk">(?:po)?mimo</token>
            <token postag="comp.*" postag_regexp="yes" inflected="yes" regexp="yes">iż|że</token>
            </marker>
        </pattern>
        <disambig action="filterall"/>
    </rule>

    <rule id="PRZEJSC_MIMO" name="przejść + mimo > adv">
        <pattern>
            <token inflected="yes">przejść</token>
            <marker><token postag="adv">mimo</token></marker>
        </pattern>
        <disambig postag="adv"/>
        <example type="ambiguous" inputform="mimo[mima/subst:sg:voc:m1,mimo/adv,mimo/burk,mimo/prep:gen]" outputform="mimo[mimo/adv]">Pozdrowił ich i przeszedł <marker>mimo</marker>, ale Don Kichot zawołał na niego.</example>
    </rule>


    <rule name="MIMO to nie wołacz" id="MIMO_NIE_VOC">
    	<pattern>
    		<token postag="prep:gen">mimo</token>
    	</pattern>
    	<disambig postag="prep:gen"/>
    </rule>

    <rule name="nic lub coś dziwnego" id="COS_NIC_ADJ_GEN">
        <pattern>
            <marker><token regexp="yes" postag_regexp="yes" postag="subst:sg:(acc|nom):n2">nic|coś</token>
            <token postag="adj:sg:gen:m1.m2.m3.n1.n2:pos"/>
            </marker>
        </pattern>
        <disambig action="filterall"/>
    </rule>

    <rule id="apost_u" name="u jako końcówka po apostrofie">
        <pattern>
            <token regexp="yes">[\p{L}\-]+</token>
            <token spacebefore="no" regexp="yes">&apost;</token>
            <marker><token spacebefore="no">u</token></marker>
        </pattern>
        <disambig action="remove"><wd pos="prep:gen"/></disambig>
        <example type="untouched">To było 'Przyjęcie u kota'.</example>
        <example type="ambiguous" inputform="u[u/prep:gen]" outputform="u[u]">W wormhole'<marker>u</marker> grawitacja się zagina.</example>
    </rule>

    <rule name="jako taki" id="JAKO_TAKI_puddle">
        <pattern>
            <token postag="conj">jako</token>
            <token postag="adj.*" postag_regexp="yes" inflected="yes">taki</token>
        </pattern>
        <disambig action="filterall"/>
    </rule>

    <rule id="JAK_I" name="jak i => spójnik">
        <pattern>
            <token postag="conj">jak</token>
            <token postag="conj">i</token>
        </pattern>
        <disambig action="filterall"/>
    </rule>

    <rule id="ZA_NIE_QUB" name="za to nie kublik, reguła za AdamP (Spejd)">
        <pattern>
            <marker>
                <token postag="prep.*" postag_regexp="yes">za</token>
            </marker>
            <token><exception postag="adv.*|adj.*" postag_regexp="yes" negate="yes">to</exception><exception regexp="yes">mało|dużo</exception></token>
        </pattern>
        <disambig action="filterall"/>
        <example type="ambiguous" inputform="za[za/prep:acc,za/prep:gen,za/prep:inst,za/qub]"
                 outputform="za[za/prep:acc,za/prep:gen,za/prep:inst]">Stoję <marker>za</marker> murem.</example>
        <example type="ambiguous" inputform="za[za/prep:acc,za/prep:gen,za/prep:inst,za/qub]"
                 outputform="za[za/prep:acc,za/prep:gen,za/prep:inst]">Przesuń to <marker>za</marker> to.</example>
        <example type="untouched">To za mało.</example>
    </rule>

    <rule name="mają to nie maić" id="MAJA_MAIC">
        <pattern>
            <token>mają</token>
        </pattern>
        <disambig action="filter"><match no="1">mieć</match></disambig>
        <example type="untouched">Oni mieli robaki.</example>
        <example type="ambiguous" inputform="mają[maić/verb:fin:pl:ter:imperf:refl.nonrefl,maja/subst:sg:inst:f,mieć/verb:fin:pl:ter:imperf:refl.nonrefl]" outputform="mają[mieć/verb:fin:pl:ter:imperf:refl.nonrefl]">Oni <marker>mają</marker> robaki.</example>
    </rule>

    <rule id="BYC_INF" name="być to nie zawsze bycie">
        <pattern>
            <marker>
                <token postag="verb:winien.*" postag_regexp="yes"/>
                <token postag="verb:inf:imperf:nonrefl">być</token>
            </marker>
        </pattern>
        <disambig action="filterall"></disambig>
        <example type="ambiguous" inputform="być[bycie/subst:pl:gen:n2,być/verb:inf:imperf:nonrefl]"
        outputform="być[być/verb:inf:imperf:nonrefl]">To nie powinno <marker>być</marker> trudne.</example>
    </rule>

    <rule name="co przed czasownikiem nie jest przyimkiem" id="CO_VERB_ADAMP">
        <pattern>
            <marker>
                <token>co</token>
            </marker>
            <token postag="verb.*|pred|pcon.*|pant.*" postag_regexp="yes"/>
        </pattern>
        <disambig action="remove" postag="prep.*"/>
        <example type="ambiguous" inputform="Co[co/comp,co/prep:acc,co/prep:nom,co/qub,co/subst:sg:acc:n2,co/subst:sg:gen:n2,co/subst:sg:nom:n2]"
                 outputform="Co[co/comp,co/qub,co/subst:sg:acc:n2,co/subst:sg:gen:n2,co/subst:sg:nom:n2]"><marker>Co</marker> słychać?</example>
    </rule>

    <rule id="CO_PREP" name="co tydzień => prawdopodobnie przyimek">
        <pattern>
            <marker>
            <token postag="prep:acc">co</token>
            <token regexp="yes" postag="subst:sg:.*acc.*" postag_regexp="yes">minutę|godzinę|rok|miesiąc|sekundę|chwilk?ę|tydzień|dzień|noc|poniedziałek|wtorek|środę|czwartek|piątek|sobotę|niedzielę</token>
            </marker>
        </pattern>
        <disambig action="filterall"/>
    </rule>

    <rule id="CO_JAKIS_CZAS" name="co jakiś czas -> przyimek">
        <pattern>
            <marker>
                <token postag="prep:acc">co</token>
                <token postag="adj:sg:acc:m3:pos" regexp="yes">jakiś|pewien</token>
                <token postag="subst:sg:acc:m3">czas</token>
            </marker>
        </pattern>
        <disambig action="filterall"/>
    </rule>

    <rule id="CO_SENT_START_ADAMP" name="na początku zwykle jest zaimkiem rzeczownym">
        <pattern>
            <token postag="SENT_START"/>
            <token min="0" max="1" regexp="yes">&interp;</token>
            <marker><token>co</token></marker>
        </pattern>
        <disambig action="filter" postag="subst.*"></disambig>
        <example type="ambiguous" inputform="Co[co/comp,co/prep:acc,co/prep:nom,co/qub,co/subst:sg:acc:n2,co/subst:sg:gen:n2,co/subst:sg:nom:n2]"
                 outputform="Co[co/subst:sg:acc:n2,co/subst:sg:gen:n2,co/subst:sg:nom:n2]">— <marker>Co</marker> to znaczy?</example>
    </rule>

    <rule id="CO_COMMA_NON_PREP" name="co przed przecinkiem to raczej nie przyimek">
        <pattern>
            <marker><token>co</token></marker>
            <token regexp="yes">[,:;!]</token>
        </pattern>
        <disambig action="remove" postag="prep.*"/>
        <example type="ambiguous" inputform="co[co/comp,co/prep:acc,co/prep:nom,co/qub,co/subst:sg:acc:n2,co/subst:sg:gen:n2,co/subst:sg:nom:n2]"
                 outputform="co[co/comp,co/qub,co/subst:sg:acc:n2,co/subst:sg:gen:n2,co/subst:sg:nom:n2]">Miły bratku Sancho, bredzisz sam nie wiesz <marker>co</marker>, w takich awanturach wyspy się nie wygrywają.</example>
    </rule>

    <rule id="CZYZ_PYTANIE" name="czyż w pytaniu">
        <pattern>
            <token postag="SENT_START"/>
            <token min="0" max="1" regexp="yes">&interp;</token>
            <marker>
                <token skip="-1">czyż</token>
            </marker>
            <token postag="SENT_END">?</token>
        </pattern>
        <disambig postag="qub"/>
        <example type="untouched">Czyż to piękny ptak.</example>
        <example type="ambiguous" inputform="Czyż[Czyż/subst:sg:nom:m1,czyż/qub,czyż/subst:sg:nom:m2]"
                 outputform="Czyż[czyż/qub]"><marker>Czyż</marker> nie znajdziemy prawidła?</example>
    </rule>

    <rule id="CZYZ_PYTANIE_COLON" name="czyż w pytaniu">
        <pattern>
            <token>:</token>
            <marker>
                <token skip="-1">czyż</token>
            </marker>
            <token postag="SENT_END">?</token>
        </pattern>
        <disambig postag="qub"/>
        <example type="untouched">Czyż to piękny ptak.</example>
        <example type="ambiguous" inputform="czyż[czyż/qub,czyż/subst:sg:nom:m2]"
                 outputform="czyż[czyż/qub]">Odrzuciliście jedno, a zachowali drugie: <marker>czyż</marker> kochacie z racji rozumu?</example>
    </rule>

    <rule name="gorzej to nie czasownik" id="GORZEJ">
        <pattern>
            <token regexp="yes">odrobinę|znacznie|nieco|coraz|jeszcze|trochę|dużo|zdecydowanie|stokroć|wiele|im|lub|niewiele</token>
            <marker><token>gorzej</token></marker>
        </pattern>
        <disambig action="remove"><wd lemma="gorzeć"/></disambig>
    </rule>

    <rule name="jaki to nie jaki" id="jaki_to_nie_jak">
        <pattern>
            <token>,</token>
            <marker><token>jaki</token></marker>
        </pattern>
        <disambig action="filter" postag="adj.*"/>
    </rule>

    <rule name="jaka to nie jaka" id="JAKA_NIE_JAKA">
        <pattern>
            <token>,</token>
            <marker><token>jaka</token></marker>
        </pattern>
        <disambig action="remove" postag="subst.*"/>
    </rule>

    <rule name="jak to nie jaka" id="JAK_NIE_JAKA">
        <pattern>
            <token>jak</token>
        </pattern>
        <disambig action="remove"><wd lemma="jaka"/></disambig>
    </rule>

    <rule id="JAKI_PPRON_ADJ" name="unifikacja jaki w wykrzyknieniach">
        <pattern>
            <unify><feature id="gender"/><feature id="number"/>
                <feature id="case"><type id="nom"/></feature>
                <token inflected="yes">jaki</token>
                <token postag="ppron.*" postag_regexp="yes"/>
                <token postag="(?:adj|pact|ppas).*" postag_regexp="yes"/>
            </unify>
        </pattern>
        <disambig action="unify"/>
        <example type="ambiguous" inputform="Jaka[Jaka/comp:comma,jak/subst:sg:acc:m2,jak/subst:sg:gen:m2,jaka/subst:sg:nom:f,jaki/adj:sg:nom.voc:f:pos]" outputform="Jaka[jaki/adj:sg:nom.voc:f:pos]"><marker>Jaka</marker> ona szlachetna!</example>
    </rule>

    <rule name="jak Wernyhora jaki" id="jak_subst_jaki">
        <pattern>
            <token>jak</token>
            <marker>
            <unify>
                <feature id="case"><type id="nom"/></feature>
                <feature id="gender"/><feature id="number"/>
                <token postag="subst.*" postag_regexp="yes"/>
                <token inflected="yes">jaki</token>
            </unify>
            </marker>
        </pattern>
        <disambig action="unify"/>
    </rule>

    <rule name="jaką/jaki/jaka - przymiotnik zawsze i już" id="jaki_hardcore">
        <pattern>
            <token regexp="yes">jak[iaą]</token>
        </pattern>
        <disambig action="filter" postag="adj.*"/>
    </rule>

    <rule name="udomowiony jak" id="JAK_SUBST">
        <pattern>
            <marker>
            <unify>
                <feature id="case"/><feature id="gender"/><feature id="number"/>
                <token>udomowiony</token>
                <token>jak</token>
            </unify>
            </marker>
            <token postag="verb.*" postag_regexp="yes"/>
        </pattern>
        <disambig action="unify"/>
        <example type="ambiguous" inputform="jak[jak/adv,jak/adv:pos,jak/conj,jak/prep:nom,jak/subst:sg:nom:m2]"
                 outputform="jak[jak/subst:sg:nom:m2]">Udomowiony <marker>jak</marker> występuje w centralnej Azji.</example>
        <example type="untouched">Jestem wesoły jak staruszek.</example>
    </rule>

    <rule name="jak parzystokopytny niestety prawie nie istnieje, biedaczek" id="JAK_NIE_SUBST">
        <pattern>
            <token postag="adv">jak</token>
        </pattern>
        <disambig action="remove"><wd pos="subst:sg:nom:m2"/></disambig>
    </rule>

    <rule name="jak i przysłówek/przymiotnik stopnia najwyższego" id="jak_advpos_sup">
        <pattern>
            <marker>
                <token postag="adv:pos">jak</token>
                <token postag=".*sup" postag_regexp="yes"/>
            </marker>
        </pattern>
        <disambig action="filterall"/>
    </rule>


    <rule id="spraw" name="minister spraw">
        <pattern>
            <token inflected="yes">minister</token>
            <marker><token>spraw</token></marker>
        </pattern>
        <disambig action="remove"><wd lemma="sprawić"/></disambig>
    </rule>

    <rule name="praw to zwykle rzeczownik" id="PRAW">
        <pattern>
            <token>praw</token>
        </pattern>
        <disambig postag="subst:pl:gen:n2"/>
    </rule>

    <rule name="cień to nie cienić" id="CIEN">
        <pattern>
            <token>cień</token>
        </pattern>
        <disambig action="remove"><wd lemma="cienić"/></disambig>
    </rule>

    <rule name="istną to nie istnąć" id="istna">
        <pattern>
            <token>istną</token>
        </pattern>
        <disambig action="remove"><wd lemma="istnąć"/></disambig>
    </rule>

    <rule name="JAKI_PYT" id="JAKI_TO_NIE_JAK">
        <pattern>
            <token skip="4" postag="SENT_START"/>
            <marker>
                <token inflected="yes" skip="-1">jaki</token>
            </marker>
            <token>?</token>
        </pattern>
        <disambig action="filter" postag="adj.*"/>
    </rule>


    <rule name="litra, czyli ruski funt prawie nie istnieje" id="litra">
        <pattern>
            <and>
                <token inflected="yes">litra</token>
                <token inflected="yes">litr</token>
            </and>
        </pattern>
        <disambig action="remove"><wd lemma="litra"/></disambig>
    </rule>

    <rule name="lepiej" id="LEPIEJ">
        <pattern>
            <marker><token>lepiej</token></marker>
        </pattern>
        <disambig action="remove"><wd lemma="lepiej"/></disambig>
    </rule>

    <rule name="potem jako przysłówek" id="a_potem">
        <pattern>
            <marker>
            <token postag="conj">a</token>
            <token postag="adv">potem</token></marker>
        </pattern>
        <disambig action="filterall"/>
    </rule>

    <rule name="trochę to nie trocha" id="TROCHE">
        <pattern>
            <token>trochę</token>
        </pattern>
        <disambig action="remove"><wd lemma="trocha"/></disambig>
    </rule>

    <rule name="troszeczkę to nie troszeczka" id="TROSZECZKE">
        <pattern>
            <token>troszeczkę</token>
        </pattern>
        <disambig action="remove"><wd lemma="troszeczka"/></disambig>
    </rule>


    <rule name="księga gości" id="KSIEGA_GOSCI">
        <pattern>
            <token inflected="yes">księga</token>
            <marker><token >gości</token></marker>
        </pattern>
        <disambig postag="subst:pl:gen:m1"/>
    </rule>

    <rule name="stała jako przymiotnik" id="STALA">
        <pattern>
            <token regexp="yes">wartość|ekspozycja|wystawa</token>
            <marker><token>stała</token></marker>
        </pattern>
        <disambig action="remove"><wd lemma="stać"/></disambig>
    </rule>

    <rule name="wzdłuż to nie wzdłużyć" id="WZDLUZ">
        <pattern><token>wzdłuż</token></pattern>
        <disambig action="remove"><wd lemma="wzdłużyć"/></disambig>
    </rule>

    <rule name="wręcz" id="WRECZ">
        <pattern>
            <token regexp="yes" inflected="yes">walczyć|walka</token>
            <marker><token>wręcz</token></marker>
        </pattern>
        <disambig postag="adv"/>
        <example type="untouched">Wręcz mi plik banknotów!</example>
        <example type="ambiguous" inputform="wręcz[wręcz/adv,wręcz/qub,wręczyć/verb:impt:sg:sec:perf:refl.nonrefl]" outputform="wręcz[wręcz/adv]">Trwała walka <marker>wręcz</marker>.</example>
    </rule>

    <rule name="wybrania" id="wybrania">
        <pattern>
            <marker><token>wybrania</token></marker>
            <token postag=".*:gen.*" postag_regexp="yes"/>
        </pattern>
        <disambig action="remove"><wd lemma="wybraniać"/></disambig>
        <example type="untouched">On wybrania wszystkie.</example>
        <example type="ambiguous" inputform="wybrania[wybraniać/verb:fin:sg:ter:imperf:refl.nonrefl,wybrać/ger:sg:gen:n2:perf:aff:refl.nonrefl]" outputform="wybrania[wybrać/ger:sg:gen:n2:perf:aff:refl.nonrefl]">
            Konieczność ponownego <marker>wybrania</marker> numeru.
        </example>
    </rule>

    <rule name="umarły by usłyszał" id="subst_praet_by_praet">
        <pattern>
            <marker>
            <unify><feature id="gender"/><feature id="number"/>
                <and>
                    <token postag="subst.*nom.*" postag_regexp="yes"></token>
                    <token postag="verb:praet.*" postag_regexp="yes"/>
                </and>
                <unify-ignore>
                    <token>by</token>
                </unify-ignore>
                <token postag="verb:praet.*" postag_regexp="yes"/>
            </unify>
            </marker>
        </pattern>
        <disambig action="unify"></disambig>
    </rule>

    <rule name="don_burk" id="DON_KICHOT">
        <pattern>
            <token postag="burk">don</token>
            <token inflected="yes">Kichot</token>
        </pattern>
        <disambig action="filterall"/>
    </rule>

    <rule name="daty dzienne" id="pierwszego_stycznia">
        <pattern>
            <unify><feature id="case"><type id="gen"/></feature><feature id="number"/><feature id="gender"/>
                <token regexp="yes" postag="adj.*" postag_regexp="yes">pierwszego|drugiego|trzeciego|czwartego|piątego|szóstego|ósmego|dziewiątego|dziesiątego|jedenastego|dwunastego|trzynastego|czternastego|piętnastego|szesnastego|siedemnastego|osiemnastego|dziewiętnastego|dwudziestego|trzydziestego</token>
                <token regexp="yes">stycznia|lutego|marca|kwietnia|maja|czerwca|lipca|sierpnia|września|października|listopada|grudnia</token>
            </unify>
        </pattern>
        <disambig action="unify"/>
    </rule>

    <rule name="daty dzienne2" id="dwudziestego_stycznia">
        <pattern>
            <unify><feature id="case"><type id="gen"/></feature><feature id="number"/><feature id="gender"/>
                <token postag="adj.*" postag_regexp="yes">dwudziestego</token>
                <token regexp="yes" postag="adj.*" postag_regexp="yes">pierwszego|drugiego|trzeciego|czwartego|piątego|szóstego|ósmego|dziewiątego</token>
                <token regexp="yes">stycznia|lutego|marca|kwietnia|maja|czerwca|lipca|sierpnia|września|października|listopada|grudnia</token>
            </unify>
        </pattern>
        <disambig action="unify"/>
    </rule>

    <rule name="daty dzienne3" id="trzydziestego_pierwszego_stycznia">
        <pattern>
            <unify><feature id="case"><type id="gen"/></feature><feature id="number"/><feature id="gender"/>
                <token postag="adj.*" postag_regexp="yes">trzydziestego</token>
                <token postag="adj.*" postag_regexp="yes">pierwszego</token>
                <token regexp="yes">stycznia|marca|maja|lipca|sierpnia|października|grudnia</token>
            </unify>
        </pattern>
        <disambig action="unify"/>
    </rule>

    <rule name="przybrać postać" id="PRZYBRAC_POSTAC">
        <pattern>
            <token skip="3" inflected="yes">przybrać</token>
            <marker>
                <token>postać</token>
            </marker>
        </pattern>
        <disambig postag="subst:sg:acc:f"/>
    </rule>

    <rule id="O_WYM_" name="O wym -> nie skrót">
        <pattern>
            <token>o</token>
            <marker>
            <token>wym</token>
            </marker>
            <token><exception negate_pos="yes" postag="SENT_END">.</exception></token>
        </pattern>
        <disambig action="remove"><wd pos="brev:pun"/></disambig>
    </rule>

    <rule id="o_wym_2" name="wym na końcu zdania">
        <pattern>
            <token>o</token>
            <marker>
                <token postag="SENT_END">wym</token>
            </marker>
        </pattern>
        <disambig action="remove"><wd pos="brev:pun"/></disambig>
    </rule>

    <rule id="niby_adv" name="niby jako kublik">
        <pattern>
            <marker><token>niby</token></marker>
            <token postag="adv"/>
        </pattern>
        <disambig postag="qub"/>
        <example type="untouched">Kosę, niby szablę, pod słońce obejrzał.</example>
        <example type="ambiguous" inputform="niby[niby/conj,niby/prep:nom,niby/qub]"
                 outputform="niby[niby/qub]">Ale <marker>niby</marker> dokąd?</example>
    </rule>

    <rule id="oto_adv" name="oto jako kublik">
        <pattern>
            <marker><token>oto</token></marker>
            <token postag="adv"/>
        </pattern>
        <disambig postag="qub"/>
        <example type="ambiguous" inputform="oto[oto/adv,oto/qub]"
                 outputform="oto[oto/qub]">No i <marker>oto</marker> dlaczego mnie nie lubią.</example>
    </rule>

    <rule id="CO_PRAWDA" name="co prawda">
        <pattern>
            <token postag="comp">co</token>
            <token postag="subst:sg:nom:f">prawda</token>
        </pattern>
        <disambig action="filterall"/>
    </rule>

    <rulegroup name="do, re, mi - prep, ppron lub subst" id="DO_PREP_SUBST">
    <rule>
    	<pattern>
			<marker>
                <token postag="subst.*" postag_regexp="yes">do</token>
			    <token postag="subst.*" postag_regexp="yes">re</token>
                <token postag="subst.*" postag_regexp="yes">mi</token>
            </marker>
    	</pattern>
    	<disambig action="filterall" postag="subst.*"/>
    </rule>
    <rule>
    	<pattern>
			<marker><token>do</token></marker>
			<token><exception>re</exception></token>    	
    	</pattern>
    	<disambig postag="prep:gen"/>    
    </rule>
        <rule>
            <pattern>
                <token><exception>re</exception></token>
                <marker><token>mi</token></marker>
            </pattern>
            <disambig action="remove"><wd lemma="mi"></wd></disambig>
            <example type="ambiguous" inputform="mi[ja/ppron12:sg:dat:m1.m2.m3.f.n1.n2:pri:nakc,mi/subst:pl:acc:n2,mi/subst:pl:dat:n2,mi/subst:pl:gen:n2,mi/subst:pl:inst:n2,mi/subst:pl:loc:n2,mi/subst:pl:nom:n2,mi/subst:pl:voc:n2,mi/subst:sg:acc:n2,mi/subst:sg:dat:n2,mi/subst:sg:gen:n2,mi/subst:sg:inst:n2,mi/subst:sg:loc:n2,mi/subst:sg:nom:n2,mi/subst:sg:voc:n2]"
                     outputform="mi[ja/ppron12:sg:dat:m1.m2.m3.f.n1.n2:pri:nakc]">Daj <marker>mi</marker> krowę.</example>
            <example type="untouched">Do re mi!</example>
        </rule>
    </rulegroup>

    <rule name="do to nie subst" id="do_non_subst">
        <pattern>
            <marker><token>do</token></marker>
            <token postag=".*gen.*" postag_regexp="yes"></token>
        </pattern>
        <disambig action="filter" postag="prep:gen.*"/>
    </rule>

    <rulegroup name="od niedawna" id="OD_NIEDAWNA">
    <rule>
        <pattern>
            <marker>
            <token>od</token>
            </marker>
            <token>niedawna</token>
        </pattern>
        <disambig postag="prep:gen:nwok"/>
    </rule>
    <rule>
            <pattern>
                <token>od</token>
                <marker>
                <token>niedawna</token>
                </marker>
            </pattern>
            <disambig postag="qub"/>
    </rule>
    </rulegroup>

    <rule name="względem - prep lub subst" id="wzgledem_subst">
        <pattern>
            <token>pod</token>
            <token postag=".*inst.*" postag_regexp="yes"/>
            <marker>
                <token>względem</token>
            </marker>
        </pattern>
        <disambig postag="subst:sg:inst:m3"/>
        <example type="ambiguous" inputform="względem[wzgląd/subst:sg:inst:m3,względem/prep:gen]" outputform="względem[wzgląd/subst:sg:inst:m3]">Pod tym <marker>względem</marker> Brazylia jest szczególna.</example>
        <example type="untouched">Nie bądź względem niego taki ostry!</example>
    </rule>

    <rule id="na_wspak" name="na wspak">
        <pattern>
            <token>na</token>
            <marker><token>wspak</token></marker>
        </pattern>
        <disambig postag="adv"/>
    </rule>
    
    <rule name="godzinę temu" id="temu">
    	<pattern>    		
    		<token regexp="yes" inflected="yes">godzina|rok|miesiąc|tydzień|minuta|chwila|moment|wiek|stulecie</token>
    		<marker><token>temu</token></marker>
    	</pattern>
    	<disambig postag="prep:acc"/>
    	<example type="ambiguous" inputform="temu[temu/prep:acc,ten/adj:sg:dat:m1.m2.m3.n1.n2:pos,to/subst:sg:dat:n2]" outputform="temu[temu/prep:acc]">Było to godzinę <marker>temu</marker>.</example>
    	<example type="untouched">Nie dziwię się temu.</example>
    </rule>
    <rule name="temu to nie prep" id="temu_non_prep">
    	<pattern>
    		<marker><token postag_regexp="yes" postag="adj.*|subst.*">temu</token></marker>
    	</pattern>
    	<disambig action="remove" postag="prep:acc.*"/>
    	<example type="untouched">To było już godzinę temu.</example>
    	<example type="ambiguous" inputform="temu[temu/prep:acc,ten/adj:sg:dat:m1.m2.m3.n1.n2:pos,to/subst:sg:dat:n2]" outputform="temu[ten/adj:sg:dat:m1.m2.m3.n1.n2:pos,to/subst:sg:dat:n2]">Dziwię się <marker>temu</marker> zachowaniu.</example>
    </rule>     
    
    <rulegroup name="O - dezambiguacja" id="O_brev_interj">
    	<rule>
    		<pattern>
    		<marker><token>o</token></marker>
    		<token regexp="yes">[,!]</token>
    		</pattern>
    		<disambig postag="interj"/>
    		<example type="untouched">O „Gwiazdorze” powiedział coś ciekawego.</example>
    		<example type="ambiguous" inputform="O[o/interj,o/prep:acc,o/prep:loc,ocean/brev:pun,ojciec/brev:pun]" outputform="O[o/interj]"><marker>O</marker>, idzie kościelny!</example>
    	</rule>
        <rule>
            <pattern>
                <marker><token>o</token></marker>
                <token/>
                <token>!</token>
            </pattern>
            <disambig postag="interj"/>
            <example type="untouched">O „Gwiazdorze” powiedział coś ciekawego.</example>
            <example type="ambiguous" inputform="O[o/interj,o/prep:acc,o/prep:loc,ocean/brev:pun,ojciec/brev:pun]" outputform="O[o/interj]"><marker>O</marker> łajdak!</example>
        </rule>
    	<rule>
    		<pattern>
    		<marker><token>o</token></marker>
    		<token spacebefore="no">.</token>
    		</pattern>
    		<disambig postag="brev:pun"></disambig>
    		<example type="untouched">Porozmawiajmy o literaturze.</example>
    		<example type="ambiguous" inputform="O[o/interj,o/prep:acc,o/prep:loc,ocean/brev:pun,ojciec/brev:pun]" outputform="O[ojciec/brev:pun]"><marker>O</marker>. Pio nie jadał pierogów.</example>
    	</rule>
        <rule>
            <pattern>
            <marker>
                    <token postag="interj">o</token>
            <token postag=".*voc.*" postag_regexp="yes"><exception postag=".*acc.*|.*loc.*" postag_regexp="yes"/></token>
            </marker>
            </pattern>
            <disambig action="filterall"/>
            <example type="ambiguous" inputform="o[o/interj,o/prep:acc,o/prep:loc,ocean/brev:pun,ojciec/brev:pun]" outputform="o[o/interj]">Ale <marker>o</marker> bogowie i boginie!</example>
        </rule>
        <rule>
            <pattern>
                <token postag="interj">o</token>
                <token postag="adv">tam</token>
            </pattern>
            <disambig action="filterall"/>
        </rule>
      <rule>
        <pattern>
        <marker>
        <token postag="prep.*" postag_regexp="yes">o</token>
        </marker>
        <token><exception regexp="yes">.|\p{Lu}\p{Ll}.*</exception>
            </token>
      </pattern>
      <disambig action="remove" postag="brev:pun|interj"/>
      <example type="untouched">To jest o. Pio.</example>
      <example type="ambiguous" inputform="o[o/interj,o/prep:acc,o/prep:loc,ocean/brev:pun,ojciec/brev:pun]" outputform="o[o/prep:acc,o/prep:loc]">Spotykamy się <marker>o</marker> dwunastej</example> 
    </rule>
  </rulegroup>
    
    <rule id="o_ile_nie" name="o ile nie">
        <pattern>
            <marker>
                <token postag="prep:acc">o</token>
                <token postag="num:pl:nom.acc:m1.m2.m3.f.n1.n2.p1.p2:rec">ile</token>
                <token postag="qub">nie</token>
            </marker>
        </pattern>
        <disambig action="filterall"/>
    </rule>

    <rule name="auto da fe" id="auto_da_fe">
        <pattern>
            <token regexp="yes">autos?</token>
            <token>da</token>
            <token regexp="yes">f[ée]</token>
        </pattern>
        <disambig action="replace"><wd lemma="auto" pos="ign"/><wd lemma="de" pos="ign"/><wd lemma="fé" pos="ign"/></disambig>
    </rule>

    <rule name="da się" id="da_sie">
        <pattern>
            <token postag="verb:fin:sg:ter:perf:refl.nonrefl">da</token>
            <token postag="qub">się</token>
        </pattern>
        <disambig action="filterall"/>
    </rule>
    <rule name="da się" id="da_sie_2">
        <pattern>
            <token postag="qub">się</token>
            <token postag="verb:fin:sg:ter:perf:refl.nonrefl">da</token>
        </pattern>
        <disambig action="filterall"/>
    </rule>


    <rulegroup name="Na - dezambiguacja" id="na_interj_prep">
      <rule>
        <pattern>
        <marker><token>na</token></marker>
        <token regexp="yes">[,!]|tu</token>
        </pattern>
        <disambig postag="interj"/>
        <example type="untouched">Na Filipinach są gwoździe.</example>
        <example type="ambiguous" inputform="Na[na/interj,na/prep:acc,na/prep:loc]" outputform="Na[na/interj]"><marker>Na</marker>, masz pismo, czytaj.</example>
      </rule>
      <rule>
        <pattern>
        <marker>
        <token postag="prep.*" postag_regexp="yes">na</token>
        </marker>
        <token><exception regexp="yes">[,!]|tu</exception></token>
      </pattern>
      <disambig action="remove" postag="interj"/>
      <example type="untouched">Na tu, piesku</example>
      <example type="ambiguous" inputform="na[na/interj,na/prep:acc,na/prep:loc]" outputform="na[na/prep:acc,na/prep:loc]">Spotykamy się <marker>na</marker> parterze.</example> 
    </rule>
  </rulegroup>

    <rule id="razem_z" name="razem z">
        <pattern>
            <token postag="adv">razem</token>
            <token postag_regexp="yes" postag="prep:inst.*" inflected="yes">z</token>
        </pattern>
        <disambig action="filterall"/>
    </rule>

    <!-- do morfologika -->
    <rule id="OO_interj" name="oo jako wykrzyknienie">
        <pattern>
            <token>oo</token>
        </pattern>
        <disambig action="add"><wd lemma="oo" pos="interj"/></disambig>
    </rule>

    <rule id="interj" name="wykrzyknienia">
        <pattern>
                <token postag="SENT_START"/>
                <token min="0" max="2" regexp="yes">[-–—„]</token>
            <marker>
                <and>
                    <token postag="interj"/>
                    <token negate_pos="yes" postag="interj"/>
                </and>
            </marker>
                <token regexp="yes">[,!]</token>
        </pattern>
        <disambig postag="interj"/>
        <example type="ambiguous" inputform="Ha[ha/interj,ha/subst:pl:acc:n2,ha/subst:pl:dat:n2,ha/subst:pl:gen:n2,ha/subst:pl:inst:n2,ha/subst:pl:loc:n2,ha/subst:pl:nom:n2,ha/subst:pl:voc:n2,ha/subst:sg:acc:n2,ha/subst:sg:dat:n2,ha/subst:sg:gen:n2,ha/subst:sg:inst:n2,ha/subst:sg:loc:n2,ha/subst:sg:nom:n2,ha/subst:sg:voc:n2]"
                 outputform="Ha[ha/interj]"><marker>Ha</marker>, może to prawda?</example>
        <example type="untouched">To litera ha.</example>
    </rule>

    <rule id="ANO_INTERJ" name="ano jako wykrzyknienie">
        <pattern>
            <token postag="SENT_START"/>
            <token min="0" max="2" regexp="yes">[-–—„]</token>
        <marker>
            <token>ano</token>
        </marker>
            <token regexp="yes">[,!]</token>
        </pattern>
        <disambig postag="interj"/>
        <example type="untouched">Ano tak.</example>
        <example type="ambiguous" inputform="Ano[ano/qub]" outputform="Ano[ano/interj]"><marker>Ano</marker>, ni mniej, ni więcej.</example>
    </rule>

    <rule id="A_INTERJ" name="a jako wykrzyknienie">
        <pattern>
            <marker>
                <token>a</token>
            </marker>
            <token regexp="yes">[,!]</token>
        </pattern>
        <disambig postag="interj"/>
    </rule>

    <rule id="I_INTERJ" name="i jako wykrzyknienie nie występuje w korpusie ręcznym i w słownikach">
        <pattern>
            <marker>
                <token>i</token>
            </marker>
        </pattern>
        <disambig action="filter" postag="conj|comp:comma"/>
    </rule>

    <rule id="SENT_START_VOC" name="na początku zdania tylko wołacz, nie miejscownik">
        <pattern>
            <token postag="SENT_START"/>
            <token min="0" max="2" regexp="yes">[-–—„]</token>
            <marker>
                <and>
                    <token postag="subst:.*voc.*" postag_regexp="yes"></token>
                    <token postag="subst:.*loc.*" postag_regexp="yes"><exception negate_pos="yes" postag="subst.*[vl]oc.*" postag_regexp="yes"></exception></token>
                </and>
            </marker>
        </pattern>
        <disambig action="filter" postag="subst.*voc.*"/>
        <example type="ambiguous" inputform="Ludwiku[Ludwik/subst:sg:loc:m1,Ludwik/subst:sg:voc:m1,ludwik/subst:sg:loc:m2,ludwik/subst:sg:voc:m2]"
                 outputform="Ludwiku[Ludwik/subst:sg:voc:m1,ludwik/subst:sg:voc:m2]"><marker>Ludwiku</marker>, kup ciastka!</example>
    </rule>

    <rule id="VOC_IMPT" name="tryb rozkazujący po wołaczu">
        <pattern>
            <unify>
                <feature id="number"></feature>
                <token postag="subst.*voc.*" postag_regexp="yes"><exception postag="subst.*voc.*" negate_pos="yes" postag_regexp="yes"/></token>
                <unify-ignore>
                    <token>,</token>
                </unify-ignore>
                <token postag_regexp="yes" postag="verb:impt.*:sec.*"/>
            </unify>
        </pattern>
        <disambig action="unify"/>
        <example type="ambiguous" inputform="lub[lub/comp:comma,lub/conj,lubić/verb:impt:sg:sec:imperf:nonrefl,lubić/verb:impt:sg:sec:imperf:refl.nonrefl]"
                 outputform="lub[lubić/verb:impt:sg:sec:imperf:nonrefl,lubić/verb:impt:sg:sec:imperf:refl.nonrefl]">Ludwiku, <marker>lub</marker> lubelskie!</example>
    </rule>

    <rule id="VOC_IMPT_NO_COMMA" name="tryb rozkazujący po wołaczu -- bez przecinka po wołaczu">
        <pattern>
            <unify>
                <feature id="number"></feature>
                <token postag="subst.*voc.*" postag_regexp="yes"><exception postag="subst.*voc.*" negate_pos="yes" postag_regexp="yes"/></token>
                <token postag_regexp="yes" postag="verb:impt.*:sec.*"/>
            </unify>
        </pattern>
        <disambig action="unify"/>
        <example type="ambiguous" inputform="lub[lub/comp:comma,lub/conj,lubić/verb:impt:sg:sec:imperf:nonrefl,lubić/verb:impt:sg:sec:imperf:refl.nonrefl]"
                 outputform="lub[lubić/verb:impt:sg:sec:imperf:nonrefl,lubić/verb:impt:sg:sec:imperf:refl.nonrefl]">Ludwiku <marker>lub</marker> lubelskie!</example>
    </rule>

    <rule id="drodzy_panstwo" name="drodzy państwo to wołacz">
        <pattern>
            <token>drodzy</token>
            <marker>
                <token>państwo</token>
            </marker>
        </pattern>
        <disambig postag="subst:pl:voc:p1"/>
    </rule>

    <rule name="warto nie wołacz" id="warto_pred">
        <pattern>
            <marker>
            <token skip="5">warto</token>
            </marker>
            <token postag="verb:inf.*" postag_regexp="yes"/>
        </pattern>
        <disambig action="remove"><wd lemma="warta"/></disambig>
    </rule>

    <rule name="Na wskroś" id="na_wskros_burk">
        <pattern>
            <marker>
                <token postag="prep:acc">na</token>
                <token regexp="yes" postag="burk">wskr[oó]ś</token>
            </marker>
        </pattern>
        <disambig action="filterall"></disambig>
        <example type="untouched">Szedł wskroś krzewów.</example>
        <example type="ambiguous" inputform="wskroś[wskroś/burk,wskroś/prep:gen]" outputform="wskroś[wskroś/burk]">Przebijał mu na <marker>wskroś</marker> tarczę.</example>
    </rule>

    <rule id="BEZ_MALA" name="Bez mała - adjp, jak w NKJP">
        <pattern>
            <token>bez</token>
            <marker>
            <token>mała</token>
            </marker>
        </pattern>
        <disambig action="replace"><wd pos="adjp" lemma="mały"/></disambig>
        <example type="untouched">Bez małej czarnej nie wstanę.</example>
        <example type="ambiguous" inputform="mała[mała/subst:sg:nom:f,mała/subst:sg:voc:f,mały/adj:sg:nom.voc:f:pos]" outputform="mała[mały/adjp]">Bez <marker>mała</marker> wszyscy to robią.</example>
    </rule>

    <rule id="BEZ_MALA_2" name="bez mała">
        <pattern>
            <marker>
                <token>bez</token>
            </marker>
            <token>mała</token>
        </pattern>
        <disambig postag="prep:gen:nwok"/>
    </rule>


    <rule id="Z_GRUBA" name="Z gruba (ciosany) - kublik">
        <pattern>
            <token>z</token>
            <marker><token>gruba</token></marker>
        </pattern>
        <disambig postag="qub"/>
        <example type="ambiguous" inputform="gruba[gruba/subst:sg:nom:f,gruba/subst:sg:voc:f,gruby/adj:sg:nom.voc:f:pos]" outputform="gruba[gruba/qub]">Zdaje się z <marker>gruba</marker> ciosany.</example>
        <example type="untouched">Ona jest gruba.</example>
    </rule>

    <rule id="KOLO_LADA_NOM_NIE_PREP" name="koło, lada, poza jako rzeczownik">
        <pattern>
            <marker>
            <unify>
                <feature id="case"/><feature id="number"/><feature id="gender"/>
                <token postag="adj.*|pact.*" postag_regexp="yes"/>
                <token regexp="yes">koło|lada|poza</token>
            </unify>
            </marker>
            <token regexp="yes">[:,;!]</token>
        </pattern>
        <disambig action="unify"/>
        <example type="ambiguous" inputform="koło[koło/prep:gen,koło/qub,koło/subst:sg:acc:n2,koło/subst:sg:nom:n2,koło/subst:sg:voc:n2]" outputform="koło[koło/subst:sg:acc:n2,koło/subst:sg:nom:n2,koło/subst:sg:voc:n2]">Choć to jest trochę błędne <marker>koło</marker>, bo z drugiej strony trzeba być sobą.</example>
    </rule>

    <rule id="KOLO_LADA_NOM_NIE_PREP_2" name="koło, lada, poza jako rzeczownik">
        <pattern>
            <marker>
                <unify>
                    <feature id="case"/><feature id="number"/><feature id="gender"/>
                    <token regexp="yes">koło|lada|poza</token>
                    <token postag="adj.*|pact.*" postag_regexp="yes"/>
                </unify>
            </marker>
        </pattern>
        <disambig action="unify"/>
        <example type="ambiguous" inputform="koło[koło/prep:gen,koło/qub,koło/subst:sg:acc:n2,koło/subst:sg:nom:n2,koło/subst:sg:voc:n2]" outputform="koło[koło/subst:sg:acc:n2,koło/subst:sg:nom:n2,koło/subst:sg:voc:n2]">To jest <marker>koło</marker> zamachowe gospodarki!</example>
    </rule>

    <rule id="KOLO_MIEJSCOWOSC" name="Koło jako nazwa miejscowości">
        <pattern case_sensitive="yes">
            <marker><token postag="subst:sg:.*:n2" postag_regexp="yes">Koło</token></marker>
            <token>,</token>
            <token regexp="yes">\p{Lu}\p{Ll}+</token>
        </pattern>
        <disambig action="filterall"/>
        <example type="untouched">Mieszkam koło Grójca.</example>
        <example type="ambiguous" inputform="Koło[Koło/subst:sg:acc:n2,Koło/subst:sg:nom:n2,Koło/subst:sg:voc:n2,koło/prep:gen,koło/qub,koło/subst:sg:acc:n2,koło/subst:sg:nom:n2,koło/subst:sg:voc:n2]"
                 outputform="Koło[Koło/subst:sg:acc:n2,Koło/subst:sg:nom:n2,Koło/subst:sg:voc:n2,koło/subst:sg:acc:n2,koło/subst:sg:nom:n2,koło/subst:sg:voc:n2]">Będzin (Bendzin), Grodno, Kalisz,	<marker>Koło</marker>, Lipno.</example>
    </rule>

    <rule id="PRZYJAZNI_POLSKO_RADZIECKIEJ" name="przyjaźni jako rzeczownik">
        <pattern>
            <marker><token>przyjaźni</token></marker>
            <token>polsko</token>
            <token>-</token>
        </pattern>
        <disambig action="filter" postag="subst:.*:f"/>
        <example type="untouched">On się przyjaźni z dżdżownicą.</example>
        <example type="ambiguous" inputform="przyjaźni[przyjazny/adj:pl:nom.voc:m1.p1:pos,przyjaźnić/verb:fin:sg:ter:imperf:refl,przyjaźny/adj:pl:nom.voc:m1.p1:pos,przyjaźń/subst:pl:gen:f,przyjaźń/subst:sg:dat:f,przyjaźń/subst:sg:gen:f,przyjaźń/subst:sg:loc:f,przyjaźń/subst:sg:voc:f]"
                 outputform="przyjaźni[przyjaźń/subst:pl:gen:f,przyjaźń/subst:sg:dat:f,przyjaźń/subst:sg:gen:f,przyjaźń/subst:sg:loc:f,przyjaźń/subst:sg:voc:f]">Miesiąc <marker>przyjaźni</marker> polsko-radzieckiej</example>
    </rule>


    <rule id="MIAST_NIE_PREP" name="miast jako rzeczownik">
        <pattern>
            <marker><token>miast</token></marker>
            <token regexp="yes">[:,;!]</token>
        </pattern>
        <disambig postag="subst:pl:gen:n2"/>
        <example type="ambiguous" inputform="miast[miast/conj,miast/prep:gen,miasto/subst:pl:gen:n2]" outputform="miast[miasto/subst:pl:gen:n2]">Ach, piękne niebo Italii, wykwintne życie jej dworów, <marker>miast</marker>, czary poezji, miłości, sztuki!</example>
    </rule>

    <rule id="NICZYM_NIE_PREP" name="niczym jako rzeczownik">
        <pattern>
            <marker><token>niczym</token></marker>
            <token regexp="yes">[:,;!]</token>
        </pattern>
        <disambig action="filter" postag="subst:sg:.*:n2"/>
    </rule>

    <rule id="NIBY_NIE_PREP" name="niby nie przyimek">
        <pattern>
            <marker><token>niby</token></marker>
            <token regexp="yes">[:,;!]</token>
        </pattern>
        <disambig action="remove" postag="prep:nom"/>
    </rule>

    <rule id="SENT_START_NIM" name="nim jako zanim">
        <pattern>
            <token postag_regexp="yes" postag="SENT_START|interp:comma"/>
            <marker>
                <token>nim</token>
            </marker>
        </pattern>
        <disambig postag="comp"/>
        <example type="ambiguous" inputform="nim[nim/comp,on/ppron3:pl:dat:m1.m2.m3.f.n1.n2.p1.p2.p3:ter:akc.nakc:praep,on/ppron3:sg:inst:m1.m2.m3:ter:akc.nakc:praep.npraep,on/ppron3:sg:inst:n1.n2:ter:akc.nakc:praep.npraep,on/ppron3:sg:loc:m1.m2.m3:ter:akc.nakc:praep.npraep,on/ppron3:sg:loc:n1.n2:ter:akc.nakc:praep.npraep]"
                 outputform="nim[nim/comp]">Po kilku minutach, <marker>nim</marker> krzyki ustały, zaszedł fakt…</example>
    </rule>

    <rule id="NIM_COMP_COMMA" name="nim jako przecinkowy spójnik">
        <pattern>
            <token postag="comp">nim<exception postag="comp" negate_pos="yes"/></token>
        </pattern>
        <disambig action="add"><wd pos="comp:comma"/></disambig>
    </rule>

    <rule id="ZA_OKOLO" name="za około - z biernikiem">
        <pattern>
            <marker><token>za</token></marker>
            <token>około</token>
        </pattern>
        <disambig postag="prep:acc"/>
    </rule>

    <rulegroup id="nowa_adj" name="nowy/a/e jako przymiotnik">
        <rule>
            <pattern>
                <unify>
                    <feature id="case"/><feature id="gender"/><feature id="number"/>
                    <token postag="adj.*" postag_regexp="yes" inflected="yes" regexp="yes">nowy|pierwszy</token>
                    <token postag="subst.*" postag_regexp="yes"/>
                </unify>
            </pattern>
            <disambig action="unify"/>
            <example type="ambiguous" inputform="nową[nowa/subst:sg:acc:f,nowa/subst:sg:inst:f,nowy/adj:sg:acc:f:pos,nowy/adj:sg:inst:f:pos]"
                     outputform="nową[nowy/adj:sg:acc:f:pos]">Obmyślał był <marker>nową</marker> zdradę.</example>
        </rule>
    </rulegroup>

    <rule id="moze_by" name="może bym ->">
        <pattern>
            <marker>
                <token>może</token>
                <token inflected="yes">by</token>
            </marker>
        </pattern>
        <disambig action="replace"><wd pos="qub" lemma="może"/><wd pos="qub" lemma="by"/></disambig>
        <example type="ambiguous" inputform="może[może/qub,móc/verb:fin:sg:ter:imperf:nonrefl]"
                 outputform="może[może/qub]">To <marker>może</marker> byś coś zrobił?</example>
    </rule>

    <rule id="by_moze" name="bym może -> qub">
        <pattern>
            <marker>
                <token inflected="yes">by</token>
                <token>może</token>
            </marker>
        </pattern>
        <disambig action="replace"><wd pos="qub" lemma="by"/><wd pos="qub" lemma="może"/></disambig>
        <example type="ambiguous" inputform="może[może/qub,móc/verb:fin:sg:ter:imperf:nonrefl]"
                 outputform="może[może/qub]">To byś <marker>może</marker> coś zrobił?</example>
    </rule>

    <rule id="by_ger_fin" name="po by nie ma formy finitywnej">
        <pattern>
            <token inflected="yes">by</token>
            <marker>
                <and>
                    <token postag_regexp="yes" postag="(ger|subst|adj|ppron|verb:praet).*"/>
                    <token postag_regexp="yes" postag="verb:fin.*"/>
                </and>
            </marker>
        </pattern>
        <disambig action="filter" postag="(ger|subst|adj|ppron|verb:praet).*"/>
        <example type="ambiguous" inputform="nastanie[nastać/ger:sg:nom.acc:n2:perf:aff:nonrefl,nastać/ger:sg:nom.acc:n2:perf:aff:refl,nastać/verb:fin:sg:ter:perf:nonrefl]"
                 outputform="nastanie[nastać/ger:sg:nom.acc:n2:perf:aff:nonrefl,nastać/ger:sg:nom.acc:n2:perf:aff:refl]">Wydawało się, sam Bóg chce, by <marker>nastanie</marker> nowego porządku poprzedziła zagłada starego.</example>
    </rule>

    <rule id="nim_imperf" name="po nim nie ma formy niedokonanej">
        <pattern>
            <token regexp="yes">(?:za)?nim<exception scope="previous" postag="prep:inst.*" postag_regexp="yes"/></token>
            <marker>
                <and>
                    <token postag_regexp="yes" postag="(ger|subst|adj|ppron|verb.*[:\.]perf.*).*"/>
                    <token postag_regexp="yes" postag="verb:.*imperf.*"/>
                </and>
            </marker>
        </pattern>
        <disambig action="filter" postag="(ger|subst|adj|ppron|verb.*[:\.]perf.*).*"/>
        <example type="ambiguous" inputform="je[jeść/verb:fin:sg:ter:imperf:refl.nonrefl,on/ppron3:pl:acc:m2.m3.f.n1.n2.p2.p3:ter:akc.nakc:npraep,on/ppron3:sg:acc:n1.n2:ter:akc.nakc:npraep]"
                 outputform="je[on/ppron3:pl:acc:m2.m3.f.n1.n2.p2.p3:ter:akc.nakc:npraep,on/ppron3:sg:acc:n1.n2:ter:akc.nakc:npraep]">Świeć oczom moim, nim <marker>je</marker> bielmo gorąco pożądanej śmierci przysłoni!</example>
        <example type="untouched">Krzysztof był postacią charyzmatyczną i praca z nim była wzniosłością.</example>
    </rule>

    <rule id="pot_ger_fin" name="po by nie ma formy finitywnej">
        <pattern>
            <token postag="verb:pot.*" postag_regexp="yes"/>
            <marker>
                <and>
                    <token postag_regexp="yes" postag="(ger|subst|adj).*"/>
                    <token postag_regexp="yes" postag="verb:fin.*"/>
                </and>
            </marker>
        </pattern>
        <disambig action="filter" postag="(ger|subst|adj).*"/>
        <example type="ambiguous" inputform="nastanie[nastać/ger:sg:nom.acc:n2:perf:aff:nonrefl,nastać/ger:sg:nom.acc:n2:perf:aff:refl,nastać/verb:fin:sg:ter:perf:nonrefl]"
                 outputform="nastanie[nastać/ger:sg:nom.acc:n2:perf:aff:nonrefl,nastać/ger:sg:nom.acc:n2:perf:aff:refl]">Byłoby <marker>nastanie</marker> nowego porządku zagładą starego?</example>
    </rule>

    <rule id="albo_complex" name="albo w spójniku złożonym - spójnik na pewno">
        <pattern>
            <marker><token>albo</token></marker>
            <token regexp="yes">więc|i|też</token>
        </pattern>
        <disambig postag="conj"/>
    </rule>

    <rule id="albo_qub" name="albo na początku zdania => kublik">
        <pattern case_sensitive="yes">
            <token postag="SENT_START"/>
            <token min="0" max="2" regexp="yes">[–—„&quot;]</token>
            <marker>
                <token>Albo</token>
            </marker>
        </pattern>
        <disambig postag="qub"/>
        <example type="ambiguous" inputform="Albo[Albo/comp:comma,alba/subst:sg:voc:f,albo/conj,albo/qub]" outputform="Albo[albo/qub]"><marker>Albo</marker> nie.</example>
        <example type="ambiguous" inputform="Albo[Albo/comp:comma,alba/subst:sg:voc:f,albo/conj,albo/qub]" outputform="Albo[albo/qub]">—„<marker>Albo</marker> nie”.</example>
    </rule>

    <rule id="albo_niequb" name="w innych sytuacjach albo -> conj">
        <pattern>
            <token postag="conj">albo</token>
        </pattern>
        <disambig action="filter" postag="comp:comma|conj"/>
    </rule>

    <rule id="ALE_ALE" name="Ale, ale jako wykrzyknik (za Innym słownikiem)">
        <pattern case_sensitive="yes">
            <token postag="SENT_START"/>
            <marker>
            <token>Ale</token>
            <token>,</token>
            <token>ale</token>
            </marker>
            <token regexp="yes">[!,]</token>
        </pattern>
        <disambig action="replace"><wd pos="interj" lemma="ale"/><wd pos="interp:comma" lemma=","/><wd pos="interj" lemma="ale"/></disambig>
        <example type="untouched">Ale to nieprawda.</example>
        <example type="ambiguous" inputform="Ale[Al/depr:pl:nom:m2,Al/depr:pl:voc:m2,Ala/subst:pl:acc:f,Ala/subst:pl:nom:f,Ala/subst:pl:voc:f,Ale/comp:comma,Ali/depr:pl:nom:m2,Ali/depr:pl:voc:m2,Alo/depr:pl:nom:m2,Alo/depr:pl:voc:m2,ale/conj,ale/qub]"
                 outputform="Ale[ale/interj]"><marker>Ale</marker>, ale, byłbym zapomniał!</example>
    </rule>

    <rule id="ALE" name="Ale to pewnie spójnik">
        <pattern case_sensitive="yes">
            <token postag="SENT_START"/>
            <marker><token>Ale<exception postag="interj"/></token></marker>
        </pattern>
        <disambig action="remove" postag="(?:subst|depr).*"/>
        <example type="untouched">To prawda, ale co z tego?</example>
        <example type="ambiguous" inputform="Ale[Al/depr:pl:nom:m2,Al/depr:pl:voc:m2,Ala/subst:pl:acc:f,Ala/subst:pl:nom:f,Ala/subst:pl:voc:f,Ale/comp:comma,Ali/depr:pl:nom:m2,Ali/depr:pl:voc:m2,Alo/depr:pl:nom:m2,Alo/depr:pl:voc:m2,ale/conj,ale/qub]"
                 outputform="Ale[Ale/comp:comma,ale/conj,ale/qub]"><marker>Ale</marker> są głupcami.</example>
    </rule>
    <rule id="ALE_dialog" name="Ale to pewnie spójnik">
        <pattern case_sensitive="yes">
            <token postag="SENT_START"/>
            <token regexp="yes">[\-—–„]</token>
            <marker><token>Ale<exception postag="interj"/></token></marker>
        </pattern>
        <disambig action="remove" postag="(?:subst|depr).*"/>
        <example type="untouched">To prawda, ale co z tego?</example>
        <example type="ambiguous" inputform="Ale[Al/depr:pl:nom:m2,Al/depr:pl:voc:m2,Ala/subst:pl:acc:f,Ala/subst:pl:nom:f,Ala/subst:pl:voc:f,Ale/comp:comma,Ali/depr:pl:nom:m2,Ali/depr:pl:voc:m2,Alo/depr:pl:nom:m2,Alo/depr:pl:voc:m2,ale/conj,ale/qub]"
                 outputform="Ale[Ale/comp:comma,ale/conj,ale/qub]">– <marker>Ale</marker> są głupcami.</example>
    </rule>
    <rule id="ALE_colon" name=": ale to pewnie spójnik">
        <pattern case_sensitive="yes">
            <token postag="interp:comma">:</token>
            <marker><token>Ale<exception postag="interj"/></token></marker>
        </pattern>
        <disambig action="remove" postag="(?:subst|depr).*"/>
        <example type="untouched"><marker>Ale</marker> są głupcami.</example>
        <example type="ambiguous" inputform="Ale[Al/depr:pl:nom:m2,Al/depr:pl:voc:m2,Ala/subst:pl:acc:f,Ala/subst:pl:nom:f,Ala/subst:pl:voc:f,Ale/comp:comma,Ali/depr:pl:nom:m2,Ali/depr:pl:voc:m2,Alo/depr:pl:nom:m2,Alo/depr:pl:voc:m2,ale/conj,ale/qub]"
                 outputform="Ale[Ale/comp:comma,ale/conj,ale/qub]">PAN: <marker>Ale</marker> co z tego?</example>
    </rule>
    <rule id="ALE_comma" name=", ale to pewnie spójnik">
    <pattern>
        <token postag="interp:comma">,</token>
        <marker><token>ale<exception postag="interj"/></token></marker>
    </pattern>
    <disambig postag="conj"/>
    <example type="untouched"><marker>Ale</marker> są głupcami.</example>
    <example type="ambiguous" inputform="ale[ale/comp:comma,ale/conj,ale/qub]"
             outputform="ale[ale/conj]">Nie wiem, <marker>ale</marker> czemu pytasz?</example>
    </rule>

    <rule id="JESLI_TO" name="jeśli/jeżeli, to...">
        <pattern>
            <token skip="-1" regexp="yes">jeśli.*|jeżeli.*<exception scope="next" postag="comp:comma"/></token>
            <token>,</token>
            <marker><token>to</token></marker>
        </pattern>
        <disambig postag="conj"/>
    </rule>

    <rulegroup name="lecz" id="lecz">
        <rule>
            <pattern>
                <marker>
                    <token>lecz</token>
                </marker>
                <token>się</token>
                <token>sam</token>
                <token regexp="yes">[\.!,-—…]+</token>
            </pattern>
            <disambig action="filter" postag="verb:impt.*"/>
        </rule>
        <rule>
            <pattern>
                <token>,</token>
                <marker>
                    <token>lecz</token>
                </marker>
            </pattern>
            <disambig postag="conj"/>
        </rule>
        <rule>
            <pattern>
                <token postag="SENT_START"/>
                <marker>
                    <token>lecz</token>
                </marker>
                <token regexp="yes">też|również|i</token>
            </pattern>
            <disambig postag="conj"/>
        </rule>
        <rule>
            <pattern>
                <token postag="SENT_START"/>
                <marker>
                    <token>lecz</token>
                </marker>
                <token>za</token>
                <token>to</token>
            </pattern>
            <disambig postag="conj"/>
        </rule>
    </rulegroup>

    <rule name="lub" id="lub">
        <pattern>
            <marker><token>lub</token></marker>
            <token postag="(adj|pact|ppas|ger|subst|depr|ppron).*" postag_regexp="yes"><exception postag=".*acc.*" postag_regexp="yes"/></token>
        </pattern>
        <disambig action="filter" postag="conj|comp:comma"/>
        <example type="ambiguous" inputform="lub[lub/comp:comma,lub/conj,lubić/verb:impt:sg:sec:imperf:nonrefl,lubić/verb:impt:sg:sec:imperf:refl.nonrefl]"
                 outputform="lub[lub/comp:comma,lub/conj]">Objawy cofają się <marker>lub</marker> stają się bardzo łagodne.</example>
    </rule>

    <rule name="lub bez wołacza" id="lub_1">
        <pattern>
            <token><exception postag=".*voc|SENT_START" postag_regexp="yes"></exception></token>
            <marker><token>lub</token></marker>
        </pattern>
        <disambig action="filter" postag="conj|comp:comma"/>
        <example type="untouched">Lub robić coś!</example>
        <example type="untouched">Człowieku lub coś!</example>
    </rule>


    <rule name="Bądź i lub jako spójnik w konstrukcji „bądź x, bądź y”" id="badz_koordynacja_2">
        <pattern>
            <marker><token regexp="yes">bądź|lub</token></marker>
            <unify>
                <feature id="case"><type id="acc"/><type id="inst"/><type id="gen"/><type id="dat"/><type id="loc"/><type id="nom"/></feature>
                <token postag="(?:adj|pact|ppas|subst|ger).*" postag_regexp="yes"><exception negate_pos="yes" postag_regexp="yes" postag="(?:adj|pact|ppas|subst|ger).*"/></token>
                <unify-ignore>
                    <token min="0" max="1">,</token>
                    <token regexp="yes">bądź|lub</token>
                </unify-ignore>
                <token postag="(?:adj|pact|ppas|subs|ger).*" postag_regexp="yes"><exception negate_pos="yes" postag_regexp="yes" postag="(?:adj|pact|ppas|subst|ger).*"/></token>
            </unify>
        </pattern>
        <disambig action="filter" postag="conj"/>
        <example type="ambiguous" inputform="bądź[być/verb:impt:sg:sec:imperf:nonrefl,bądź/comp:comma,bądź/conj,bądź/qub]"
                 outputform="bądź[bądź/conj]">Dojadę tam <marker>bądź</marker> rowerem, bądź hulajnogą.</example>
        <example type="ambiguous" inputform="bądź[być/verb:impt:sg:sec:imperf:nonrefl,bądź/comp:comma,bądź/conj,bądź/qub]"
                 outputform="bądź[bądź/conj]">Dojadę tam <marker>bądź</marker> rowerem bądź hulajnogą.</example>
    </rule>

    <rule name="Bądź i lub jako spójnik w konstrukcji „bądź z x, bądź z y”" id="badz_koordynacja_prep">
        <pattern>
            <marker><token regexp="yes">bądź|lub</token></marker>
            <unify>
                <feature id="case"><type id="acc"/><type id="inst"/><type id="gen"/><type id="dat"/><type id="loc"/><type id="nom"/></feature>
                <token postag="prep.*" postag_regexp="yes"/>
                <token postag="(?:adj|pact|ppas|subst|ger).*" postag_regexp="yes"><exception negate_pos="yes" postag_regexp="yes" postag="(?:adj|pact|ppas|subst|ger).*"/></token>
                <unify-ignore>
                    <token min="0" max="1">,</token>
                    <token regexp="yes">bądź|lub</token>
                </unify-ignore>
                <token postag="prep.*" postag_regexp="yes"/>
                <token postag="(?:adj|pact|ppas|subs|ger).*" postag_regexp="yes"><exception negate_pos="yes" postag_regexp="yes" postag="(?:adj|pact|ppas|subst|ger).*"/></token>
            </unify>
        </pattern>
        <disambig action="filter" postag="conj"/>
        <example type="ambiguous" inputform="bądź[być/verb:impt:sg:sec:imperf:nonrefl,bądź/comp:comma,bądź/conj,bądź/qub]"
                 outputform="bądź[bądź/conj]">Dojadę tam <marker>bądź</marker> z Warszawy, bądź z Pcimia.</example>
        <example type="ambiguous" inputform="bądź[być/verb:impt:sg:sec:imperf:nonrefl,bądź/comp:comma,bądź/conj,bądź/qub]"
                 outputform="bądź[bądź/conj]">Dojadę tam <marker>bądź</marker> z Pcimia bądź z Warszawy.</example>
    </rule>


    <rule name="bądź i lub jako spójnik między liczbami" id="badz_num">
        <pattern>
            <token postag="num:.*" postag_regexp="yes"/>
            <marker><token regexp="yes">bądź|lub</token></marker>
            <token postag="num:.*" postag_regexp="yes"/>
        </pattern>
        <disambig postag="conj"/>
        <example type="untouched">Bądź pozdrowiony!</example>
        <example type="ambiguous" inputform="bądź[być/verb:impt:sg:sec:imperf:nonrefl,bądź/comp:comma,bądź/conj,bądź/qub]"
                 outputform="bądź[bądź/conj]">Dawkę leku powtarzamy co dwa <marker>bądź</marker> trzy tygodnie.</example>
        <example type="ambiguous" inputform="lub[lub/comp:comma,lub/conj]"
                 outputform="lub[lub/conj]">Dawkę leku powtarzamy co dwa <marker>lub</marker> trzy tygodnie.</example>
    </rule>

    <rule name="i między liczbami" id="i_conj_num">
            <pattern>
                <token postag="num:.*" postag_regexp="yes"><exception>więcej</exception></token>
                <marker><token>i</token></marker>
                <token postag="num:.*" postag_regexp="yes"/>
            </pattern>
            <disambig postag="conj"/>
        <example type="untouched">Takich spraw do „wyodrębniania” jest znacznie więcej i wiele z nich (na przykład związki gospodarki narodowej z gospodarką światową) sprawia znacznie większe trudności z punktu widzenia stworzenia odpowiednich przepisów regulujących postępowanie przedsiębiorstw.</example>
        <example type="ambiguous" inputform="i[i/comp:comma,i/conj]" outputform="i[i/conj]">Piętnaście <marker>i</marker> szesnaście.</example>
    </rule>

    <rule name="lub że" id="lub_ze">
        <pattern>
            <marker>
                <token regexp="yes">l(?:ub|ecz)</token>
            </marker>
            <token>że</token>
        </pattern>
        <disambig action="filter" postag="conj|comp:comma"/>
        <example type="ambiguous" inputform="Lecz[Lecz/comp:comma,lecz/conj,leczo/subst:pl:gen:n2,leczyć/verb:impt:sg:sec:imperf:refl.nonrefl]"
                 outputform="Lecz[Lecz/comp:comma,lecz/conj]"><marker>Lecz</marker> że żaba była chora, nie chodziła do doktora.</example>
    </rule>

    <rule id="badz_ze" name="bądź że">
        <pattern>
            <token>,</token>
            <marker>
                <token>bądź</token>
            </marker>
            <token skip="-1">że<exception postag="SENT_END|&lt;ELLIPSIS&gt;|comp:comma|interp:comma" postag_regexp="yes" scope="next"></exception></token>
            <token postag="pred|verb:.*(sg|pl).*|verb:imps.*|pcon:imperf.*|pant:perf.*" postag_regexp="yes"/>
        </pattern>
        <disambig postag="conj"/>
        <example type="untouched">Ludwiku, bądż że rozsądny!</example>
        <example type="ambiguous" inputform="bądź[być/verb:impt:sg:sec:imperf:nonrefl,bądź/comp:comma,bądź/conj,bądź/qub]"
                 outputform="bądź[bądź/conj]">Aby podkreślić ładne powiedzenie siostry, <marker>bądź</marker> że zazdrościła Swannowi, ...</example>
    </rule>

    <rule name="bądź co bądź" id="BADZ_CO_BADZ">
        <pattern>
            <marker>
                <token postag="qub">bądź</token>
                <token postag="qub">co</token>
                <token postag="qub">bądź</token>
            </marker>
        </pattern>
        <disambig action="filterall"/>
        <example type="untouched">Bądź pozdrowiony!</example>
        <example type="ambiguous" inputform="bądź[być/verb:impt:sg:sec:imperf:nonrefl,bądź/comp:comma,bądź/conj,bądź/qub]" outputform="bądź[bądź/qub]">Nie wypadało mu mówić głupstw, <marker>bądź</marker> co bądź reprezentował parlament.</example>
    </rule>

    <rule name="bądź jak bądź" id="BADZ_JAK_BADZ">
        <pattern>
            <marker>
                <token postag="qub">bądź</token>
                <token postag="adv">jak</token>
                <token postag="qub">bądź</token>
            </marker>
        </pattern>
        <disambig action="filterall"/>
        <example type="untouched">Bądź pozdrowiony!</example>
        <example type="ambiguous" inputform="bądź[być/verb:impt:sg:sec:imperf:nonrefl,bądź/comp:comma,bądź/conj,bądź/qub]" outputform="bądź[bądź/qub]">„Bądź jak <marker>bądź</marker> – mówił do siebie Rzecki...</example>
    </rule>


    <rule name="bądź zdrów" id="BADZ_VERB">
        <pattern>
            <marker>
                <token postag="verb:impt:sg:sec:imperf:nonrefl">bądź</token>
                <token postag="adjc">zdrów</token>
            </marker>
        </pattern>
        <disambig action="filterall"/>
        <example type="untouched">Bądź co bądź to prawda.</example>
        <example type="ambiguous" inputform="Bądź[Bądź/comp:comma,być/verb:impt:sg:sec:imperf:nonrefl,bądź/conj,bądź/qub]" outputform="Bądź[być/verb:impt:sg:sec:imperf:nonrefl]"><marker>Bądź</marker> zdrów.</example>
    </rule>

    <rule name="bądź to (inspiracja z puddle)" id="badz_to">
        <pattern>
            <token postag="conj|comp:comma" postag_regexp="yes">bądź<exception scope="previous">co</exception></token>
            <token postag="qub" regexp="yes">to|też</token>
        </pattern>
        <disambig action="filterall"/>
        <example type="untouched">Bądź co bądź to prawda.</example>
        <example type="ambiguous" inputform="bądź[być/verb:impt:sg:sec:imperf:nonrefl,bądź/comp:comma,bądź/conj,bądź/qub]"
                 outputform="bądź[bądź/comp:comma,bądź/conj]">Bądź to czysta serweta, <marker>bądź</marker> to brudna ścierka.</example>
    </rule>

    <rule name="jak bądź" id="jak_badz">
        <pattern>
            <token postag="adv" regexp="yes">jak|gdzie|kiedy</token>
            <token postag="qub">bądź</token>
        </pattern>
        <disambig action="filterall"/>
        <example type="untouched">Bądź co bądź to prawda.</example>
        <example type="ambiguous" inputform="bądź[być/verb:impt:sg:sec:imperf:nonrefl,bądź/comp:comma,bądź/conj,bądź/qub]"
                 outputform="bądź[bądź/qub]">Wstał z łóżka, ubrał się jak <marker>bądź</marker> i bez kołnierzyka zbiegł czym prędzej do hallu.</example>
    </rule>

    <rule name="bądź jako spójnik w okolicach czasownika" id="badz_conj_verb">
        <pattern>
            <marker><token postag="verb:impt:sg:sec:imperf:nonrefl" skip="-1">bądź<exception scope="next" postag_regexp="yes" postag="(?:comp|interp):comma|SENT_END"/></token></marker>
            <token postag="verb:.*(sg|pl).*|verb:imp[ts].*|pred" postag_regexp="yes"/>
        </pattern>
        <disambig action="filter" postag="conj|comp:comma"/>
        <example type="ambiguous" inputform="bądź[być/verb:impt:sg:sec:imperf:nonrefl,bądź/comp:comma,bądź/conj,bądź/qub]"
                 outputform="bądź[bądź/comp:comma,bądź/conj]">Mówił <marker>bądź</marker> milczał.</example>
        <example type="untouched">Bądź co bądź to prawda.</example>
    </rule>

    <rule name="bądź więc" id="badz_wiec">
        <pattern>
            <marker><token>bądź</token></marker>
            <token regexp="yes">więc|pan</token>
        </pattern>
        <disambig postag="verb:impt:sg:sec:imperf:nonrefl"/>
        <example type="untouched">Bądź zdrów!</example>
        <example type="ambiguous" inputform="bądź[być/verb:impt:sg:sec:imperf:nonrefl,bądź/comp:comma,bądź/conj,bądź/qub]"
                 outputform="bądź[być/verb:impt:sg:sec:imperf:nonrefl]">List ten piszę własną ręką, <marker>bądź</marker> więc ostrożny.</example>
    </rule>

    <rule name="bądź cicho" id="badz_cicho">
    <pattern>
        <marker><token>bądź</token></marker>
        <token>cicho</token>
        <token regexp="yes">[!,]</token>
    </pattern>
    <disambig postag="verb:impt:sg:sec:imperf:nonrefl"/>
    </rule>


    <rule name="inst + bądź + inst => spójnik" id="inst_badz_inst">
        <pattern>
            <token postag=".*inst.*" postag_regexp="yes"><exception postag="(?:adj|subst|depr|pact|ppas).*" postag_regexp="yes" negate_pos="yes"/></token>
            <marker><token>bądź</token></marker>
            <token postag=".*inst.*" postag_regexp="yes"><exception postag="(?:adj|subst|depr|pact|ppas).*" postag_regexp="yes" negate_pos="yes"/></token>
        </pattern>
        <disambig postag="conj"></disambig>
        <example type="untouched">Bądź zdrów!</example>
        <example type="ambiguous" inputform="bądź[być/verb:impt:sg:sec:imperf:nonrefl,bądź/comp:comma,bądź/conj,bądź/qub]"
                 outputform="bądź[bądź/conj]">To wszystko bez względu na przynależność rasową <marker>bądź</marker> wyznaniową.</example>
    </rule>

    <rule name="rad jestem" id="rad_jestem">
        <pattern>
            <marker><token>rad</token></marker>
            <token regexp="yes">jest(?:e[mś])?|był(?:e[mś])?|będę|byłby[mś]?|będzie(?:sz)?</token>
        </pattern>
        <disambig postag="adj:sg:nom:m1:pos"/>
        <example type="ambiguous" inputform="rad[rad/adj:sg:nom:m1.m2.m3:pos,rad/subst:sg:acc:m3,rad/subst:sg:nom:m3,rada/subst:pl:gen:f]" outputform="rad[rad/adj:sg:nom:m1:pos]">Leżał, patrząc na otaczające go spustoszenie i <marker>rad</marker> był, że nie potrzebuje iść na pokład.</example>
        <example type="untouched">Nie potrzebuję twoich rad!</example>
    </rule>

    <rule id="SENT_START_BYLA_ADJ_NOM" name="była + przymiotnik/imiesłów w mianowniku">
        <pattern>
            <token postag="SENT_START"/>
            <marker>
                <token postag="verb:praet:sg:f:ter:imperf:nonrefl">była</token>
                <token postag_regexp="yes" postag="(?:adj|ppas):sg:nom.voc:f:.*"/>
            </marker>
        </pattern>
        <disambig action="filterall"/>
        <example type="ambiguous" inputform="Była[być/verb:praet:sg:f:ter:imperf:nonrefl,była/subst:sg:nom:f,była/subst:sg:voc:f,były/adj:sg:nom.voc:f:pos]"
                 outputform="Była[być/verb:praet:sg:f:ter:imperf:nonrefl]"><marker>Była</marker> piękna jak nigdy.</example>
    </rule>

    <rule id="BYLY_BYLA_PREZES" name="były jako przymiotnik">
        <pattern>
            <unify>
                <feature id="case"/><feature id="gender"/><feature id="number"/>
                <token postag="adj.*" postag_regexp="yes" inflected="yes">były</token>
                <token inflected="yes" postag="subst.*" postag_regexp="yes" regexp="yes">premier|prezydent|minister|wiceminister|prezes|wiceprezes|przewodnicząc[ay]|dyrektor|wicedyrektor|kierownik|kierowniczka|sekretarz|zawodnik|komisarz</token>
            </unify>
        </pattern>
        <disambig action="unify"/>
        <example type="ambiguous" inputform="prezes[prezes/subst:pl:acc:f,prezes/subst:pl:dat:f,prezes/subst:pl:gen:f,prezes/subst:pl:inst:f,prezes/subst:pl:loc:f,prezes/subst:pl:nom:f,prezes/subst:pl:voc:f,prezes/subst:sg:acc:f,prezes/subst:sg:dat:f,prezes/subst:sg:gen:f,prezes/subst:sg:inst:f,prezes/subst:sg:loc:f,prezes/subst:sg:nom:f,prezes/subst:sg:nom:m1,prezes/subst:sg:voc:f]" outputform="prezes[prezes/subst:sg:nom:m1]">Były <marker>prezes</marker> klepał biedę.</example>
    </rule>

    <rule name="w x była" id="byla_nie_przymiotnik">
        <pattern>
            <token postag="prep:acc.*" postag_regexp="yes"/>
            <token postag="subst:sg:acc:f"/>
            <marker>
                <token>była</token>
            </marker>
        </pattern>
        <disambig postag="verb:praet:sg:f:ter:imperf:nonrefl"/>
        <example type="ambiguous" inputform="była[być/verb:praet:sg:f:ter:imperf:nonrefl,była/subst:sg:nom:f,była/subst:sg:voc:f,były/adj:sg:nom.voc:f:pos]"
                 outputform="była[być/verb:praet:sg:f:ter:imperf:nonrefl]">Przez sekundę <marker>była</marker> tylko cała tym jednym, nieprzytomnym pragnieniem.</example>
    </rule>

    <rule name="w x była" id="byla_nie_przymiotnik_po_okoliczniku">
        <pattern>
            <token postag="prep:acc.*" postag_regexp="yes"/>
            <token postag="adj:sg:acc:f.*" postag_regexp="yes"/>
            <token postag="subst:sg:acc:f"/>
            <marker>
                <token>była</token>
            </marker>
        </pattern>
        <disambig postag="verb:praet:sg:f:ter:imperf:nonrefl"/>
        <example type="ambiguous" inputform="była[być/verb:praet:sg:f:ter:imperf:nonrefl,była/subst:sg:nom:f,była/subst:sg:voc:f,były/adj:sg:nom.voc:f:pos]"
                 outputform="była[być/verb:praet:sg:f:ter:imperf:nonrefl]">Przez krótką sekundę <marker>była</marker> tylko cała tym jednym, nieprzytomnym pragnieniem.</example>
    </rule>

    <rule name="była + adj" id="byla_adj">
        <pattern>
            <marker>
                <token postag="verb:praet:sg:f:ter:imperf:nonrefl">była</token>
                <token postag="adj:sg:nom.voc:f:.*" postag_regexp="yes"/>
            </marker>
        </pattern>
        <disambig action="filterall"/>
        <example type="ambiguous" inputform="była[być/verb:praet:sg:f:ter:imperf:nonrefl,była/subst:sg:nom:f,była/subst:sg:voc:f,były/adj:sg:nom.voc:f:pos]"
                 outputform="była[być/verb:praet:sg:f:ter:imperf:nonrefl]">W USA walka o abolicję niestety <marker>była</marker> trudna.</example>
    </rule>

    <rule name="była + adj" id="byla_adv_adj">
        <pattern>
            <marker>
                <token postag="verb:praet:sg:f:ter:imperf:nonrefl">była</token>
                <token postag="adv.*|qub" postag_regexp="yes"/>
                <token postag="adj:sg:nom.voc:f:.*" postag_regexp="yes"/>
            </marker>
        </pattern>
        <disambig action="filterall"/>
        <example type="ambiguous" inputform="była[być/verb:praet:sg:f:ter:imperf:nonrefl,była/subst:sg:nom:f,była/subst:sg:voc:f,były/adj:sg:nom.voc:f:pos]"
                 outputform="była[być/verb:praet:sg:f:ter:imperf:nonrefl]">W USA walka o abolicję niestety <marker>była</marker> ostatnio trudna.</example>
    </rule>

    <rule name="była + adj" id="byla_quot_adv_adj">
        <pattern>
            <marker>
                <token postag="verb:praet:sg:f:ter:imperf:nonrefl">była</token>
                <token regexp="yes">[&quot;„«»]</token>
                <token postag="adv.*|qub" postag_regexp="yes"/>
                <token postag="adj:sg:nom.voc:f:.*" postag_regexp="yes"/>
            </marker>
        </pattern>
        <disambig action="filterall"/>
        <example type="ambiguous" inputform="była[być/verb:praet:sg:f:ter:imperf:nonrefl,była/subst:sg:nom:f,była/subst:sg:voc:f,były/adj:sg:nom.voc:f:pos]"
                 outputform="była[być/verb:praet:sg:f:ter:imperf:nonrefl]">W USA walka o abolicję niestety <marker>była</marker> „zbyt trudna”.</example>
    </rule>

    <rule name="była + adj" id="byla_zas_adj">
        <pattern>
            <marker>
                <token postag="verb:praet:sg:f:ter:imperf:nonrefl">była</token>
                <token regexp="yes">zaś|bowiem</token>
                <token postag="adj:sg:nom.voc:f:.*" postag_regexp="yes"/>
            </marker>
        </pattern>
        <disambig action="filterall"/>
        <example type="ambiguous" inputform="była[być/verb:praet:sg:f:ter:imperf:nonrefl,była/subst:sg:nom:f,była/subst:sg:voc:f,były/adj:sg:nom.voc:f:pos]"
                 outputform="była[być/verb:praet:sg:f:ter:imperf:nonrefl]">W USA walka o abolicję niestety <marker>była</marker> zaś trudna.</example>
    </rule>

    <rule name="ppas + była" id="ppas_byla">
        <pattern>
            <marker>
                <token postag_regexp="yes" postag="ppas:sg:nom.voc:f:(im)?perf:aff"/>
                <token postag="verb:praet:sg:f:ter:imperf:nonrefl">była</token>
            </marker>
        </pattern>
        <disambig action="filterall"/>
        <example type="untouched">To jest moja była.</example>
        <example type="ambiguous" inputform="była[być/verb:praet:sg:f:ter:imperf:nonrefl,była/subst:sg:nom:f,była/subst:sg:voc:f,były/adj:sg:nom.voc:f:pos]"
                 outputform="była[być/verb:praet:sg:f:ter:imperf:nonrefl]">Postulowana <marker>była</marker> pierwotność intencjonalności.</example>
    </rule>

    <rule name="ppas + była" id="byla_ppas">
        <pattern>
            <marker>
                <token postag="verb:praet:sg:f:ter:imperf:nonrefl">była</token>
                <token postag_regexp="yes" postag="ppas:sg:nom.voc:f:(im)?perf:aff"/>
            </marker>
        </pattern>
        <disambig action="filterall"/>
        <example type="untouched">To jest moja była.</example>
        <example type="ambiguous" inputform="była[być/verb:praet:sg:f:ter:imperf:nonrefl,była/subst:sg:nom:f,była/subst:sg:voc:f,były/adj:sg:nom.voc:f:pos]"
                 outputform="była[być/verb:praet:sg:f:ter:imperf:nonrefl]">Wczoraj <marker>była</marker> postulowana pierwotność intencjonalności.</example>
    </rule>


    <rule name="ppas + były" id="ppas_byly">
        <pattern>
            <marker>
                <token postag="ppas:pl:nom.acc.voc:m2.m3.f.n1.n2.p2.p3:imperf:aff"/>
                <token postag="verb:praet:pl:m2.m3.f.n1.n2.p2.p3:ter:imperf:nonrefl">były</token>
            </marker>
        </pattern>
        <disambig action="filterall"/>
        <example type="untouched">One były tutaj.</example>
        <example type="ambiguous" inputform="były[być/verb:praet:pl:m2.m3.f.n1.n2.p2.p3:ter:imperf:nonrefl,były/adj:sg:acc:m3:pos,były/adj:sg:nom.voc:m1.m2.m3:pos,były/subst:sg:nom:m1,były/subst:sg:voc:m1]"
                 outputform="były[być/verb:praet:pl:m2.m3.f.n1.n2.p2.p3:ter:imperf:nonrefl]">Tam robione <marker>były</marker> przekręty.</example>
    </rule>

    <rule name="ppas + były" id="byly_ppas">
        <pattern>
            <marker>
                <token postag="verb:praet:pl:m2.m3.f.n1.n2.p2.p3:ter:imperf:nonrefl">były</token>
                <token postag="ppas:pl:nom.acc.voc:m2.m3.f.n1.n2.p2.p3:imperf:aff"/>
            </marker>
        </pattern>
        <disambig action="filterall"/>
        <example type="untouched">One pijane były.</example>
        <example type="ambiguous" inputform="były[być/verb:praet:pl:m2.m3.f.n1.n2.p2.p3:ter:imperf:nonrefl,były/adj:sg:acc:m3:pos,były/adj:sg:nom.voc:m1.m2.m3:pos,były/subst:sg:nom:m1,były/subst:sg:voc:m1]"
                 outputform="były[być/verb:praet:pl:m2.m3.f.n1.n2.p2.p3:ter:imperf:nonrefl]">Tam <marker>były</marker> robione przekręty.</example>
    </rule>

    <rule name="ppas + jest/są" id="ppas_jest">
        <pattern>
            <unify>
                <feature id="number"/>
                <token inflected="yes" postag="verb:fin.*:ter:imperf:nonrefl" postag_regexp="yes">być</token>
                <token postag="ppas:.*nom\..*" postag_regexp="yes"/>
            </unify>
        </pattern>
        <disambig action="unify"/>
        <example type="ambiguous" inputform="robione[robiony/adj:pl:acc:m2.m3.f.n1.n2.p2.p3:pos,robiony/adj:pl:nom.voc:m2.m3.f.n1.n2.p2.p3:pos,robiony/adj:sg:acc:n1.n2:pos,robiony/adj:sg:nom.voc:n1.n2:pos,robić/ppas:pl:nom.acc.voc:m2.m3.f.n1.n2.p2.p3:imperf:aff,robić/ppas:sg:nom.acc.voc:n1.n2:imperf:aff]"
                 outputform="robione[robić/ppas:pl:nom.acc.voc:m2.m3.f.n1.n2.p2.p3:imperf:aff]">Tam są <marker>robione</marker> przekręty.</example>
    </rule>

    <rule name="ppas + jest/są" id="jest_ppas">
        <pattern>
            <unify>
                <feature id="number"/>
                <token postag="ppas:.*nom\..*" postag_regexp="yes"/>
                <token inflected="yes" postag="verb:fin.*:ter:imperf:nonrefl" postag_regexp="yes">być</token>
            </unify>
        </pattern>
        <disambig action="unify"/>
    </rule>

    <rule name="jest to..." id="jest_to_nom">
        <pattern>
            <unify>
                <feature id="number"/>
                <marker>
                <token postag="verb:fin.*:ter:imperf:nonrefl" inflected="yes" postag_regexp="yes">być</token>
                    <unify-ignore>
                        <token>to</token>
                    </unify-ignore>
                <token postag=".*nom[:\.].*" postag_regexp="yes"/>
            </marker>
            </unify>
        </pattern>
        <disambig action="unify"/>
        <example type="ambiguous" inputform="niewielki[niewielki/adj:sg:acc:m3:pos,niewielki/adj:sg:nom.voc:m1.m2.m3:pos]"
                 outputform="niewielki[niewielki/adj:sg:nom.voc:m1.m2.m3:pos]">Jest to <marker>niewielki</marker> elektromagnes.</example>
    </rule>

    <rule name="był to..." id="byl_to">
        <pattern>
            <unify>
                <feature id="gender"/><feature id="number"/>
                <token postag_regexp="yes" inflected="yes" postag="verb:praet.*">być</token>
                <unify-ignore>
                    <token>to</token>
                </unify-ignore>
                <token postag=".*nom[\.:].*" postag_regexp="yes"/>
            </unify>
        </pattern>
        <disambig action="unify"/>
        <example type="untouched">Był to czasami wyjątkowo uciążliwy dureń.</example>
        <example type="ambiguous" inputform="niewielki[niewielki/adj:sg:acc:m3:pos,niewielki/adj:sg:nom.voc:m1.m2.m3:pos]"
                 outputform="niewielki[niewielki/adj:sg:nom.voc:m1.m2.m3:pos]">Był to <marker>niewielki</marker> elektromagnes.</example>
    </rule>

    <rule name="był to..." id="byl_to_poadjp">
        <pattern>
            <unify>
                <feature id="gender"/><feature id="number"/>
                <token postag_regexp="yes" inflected="yes" postag="verb:praet.*">być</token>
                <unify-ignore>
                    <token>to</token>
                    <token postag="prep.*" postag_regexp="yes"></token>
                    <token postag="adjp"/>
                </unify-ignore>
                <token postag=".*nom[\.:].*" postag_regexp="yes"/>
            </unify>
        </pattern>
        <disambig action="unify"/>
        <example type="untouched">Był to czasami wyjątkowo uciążliwy dureń.</example>
        <example type="ambiguous" inputform="niewielki[niewielki/adj:sg:acc:m3:pos,niewielki/adj:sg:nom.voc:m1.m2.m3:pos]"
                 outputform="niewielki[niewielki/adj:sg:nom.voc:m1.m2.m3:pos]">Był to od dawna <marker>niewielki</marker> elektromagnes.</example>
    </rule>

    <rule name="miał być" id="MIAL_INF">
        <pattern>
            <marker><token skip="3"><exception scope="next" postag_regexp="yes" postag="interp:comma|verb:(sg|pl).*"/>miał</token></marker>
            <token postag_regexp="yes" postag="verb:inf.*"/>
        </pattern>
        <disambig postag="verb:praet:sg:m1.m2.m3:ter:imperf:refl.nonrefl"/>
        <example type="untouched">Wraca ma ukochana.</example>
        <example type="ambiguous" inputform="miał[miał/subst:sg:acc:m3,miał/subst:sg:nom:m3,mieć/verb:praet:sg:m1.m2.m3:ter:imperf:refl.nonrefl]"
                 outputform="miał[mieć/verb:praet:sg:m1.m2.m3:ter:imperf:refl.nonrefl]">Jak <marker>miał</marker> zrobić zadanie 3?</example>
    </rule>

    <rule name="to jako predykatyw" id="to_pred">
        <pattern>
                <token postag="(?:subst|num).*nom.*" postag_regexp="yes"><exception regexp="yes">to|jaki</exception><exception scope="previous" postag="prep.*" postag_regexp="yes"/></token>
            <marker>
                <token>to</token>
            </marker>
                <token skip="-1" postag="subst.*nom.*" postag_regexp="yes"><exception>to</exception>
                    <exception scope="next" postag="verb:.*(sg|pl).*|verb:imps.*" postag_regexp="yes"/></token>
            <token postag="interp:comma|SENT_END" postag_regexp="yes"/>
        </pattern>
        <disambig action="replace"><wd pos="pred"/></disambig>
        <example type="untouched">To to to!</example>
        <example type="untouched">A ryby to ryby w pysku noszą.</example>
        <example type="ambiguous" inputform="to[ten/adj:sg:acc:n1.n2:pos,ten/adj:sg:nom.voc:n1.n2:pos,to/conj,to/qub,to/subst:sg:acc:n2,to/subst:sg:nom:n2]"
        outputform="to[to/pred]">Ściśle rzecz biorąc, pomidor <marker>to</marker> owoc.</example>
        <example type="untouched">Bylem tylko dostał do rączki to hrabstwo, to już wiem, że dam sobie radę...</example>
    </rule>


    <rule name="przeciw byli" id="przeciw_byli">
        <pattern>
            <token>przeciw</token>
            <marker><token regexp="yes">była|byli</token></marker>
        </pattern>
        <disambig action="filter" postag="verb:praet.*"/>
        <example type="ambiguous" inputform="byli[być/verb:praet:pl:m1.p1:ter:imperf:nonrefl,były/adj:pl:nom.voc:m1.p1:pos,były/subst:pl:nom:m1,były/subst:pl:voc:m1]"
                 outputform="byli[być/verb:praet:pl:m1.p1:ter:imperf:nonrefl]">Przeciw <marker>byli</marker> Schmid i Leuwerik.</example>
    </rule>

    <rule name="pact/adj + acc > pact" id="pact_acc">
        <pattern>
            <marker>
                <token postag="pact:sg:nom.voc:f:imperf:aff.*" postag_regexp="yes"/>
                <token postag="subst.*acc.*" postag_regexp="yes"/>
            </marker>
        </pattern>
        <disambig action="filterall"/>
        <example type="ambiguous" inputform="badająca[badający/adj:sg:nom.voc:f:pos,badać/pact:sg:nom.voc:f:imperf:aff:refl.nonrefl]"
                 outputform="badająca[badać/pact:sg:nom.voc:f:imperf:aff:refl.nonrefl]">dyscyplina nauk społecznych <marker>badająca</marker> organizację kultury</example>
    </rule>

    <rule id="mniej_lub_bardziej" name="mniej lub bardziej -> adv:com">
        <pattern>
            <marker>
                <token postag="adv:com">mniej</token>
                <token postag="conj">lub</token>
            </marker>
            <token>bardziej</token>
        </pattern>
        <disambig action="filterall"/>
    </rule>

    <rule id="kadz_subst" name="kadź + czasownik -> rzeczownik">
        <pattern>
            <marker>
                <token>kadź</token>
            </marker>
            <token postag="verb.*" postag_regexp="yes"/>
        </pattern>
        <disambig action="remove"><wd lemma="kadzić"/></disambig>
    </rule>

    <rule id="bój_subst" name="bój + czasownik -> rzeczownik">
        <pattern>
            <marker>
                <token>bój</token>
            </marker>
            <token postag="verb.*" postag_regexp="yes"/>
        </pattern>
        <disambig action="remove"><wd lemma="bać"/></disambig>
    </rule>

    <rule id="zakup_subst" name="zakup + czasownik => rzeczownik">
        <pattern>
            <marker>
                <token>zakup</token>
            </marker>
            <token postag="verb.*" postag_regexp="yes"/>
        </pattern>
        <disambig action="remove"><wd lemma="zakupić"/></disambig>
    </rule>

    <rule id="GRAND_HOTEL" name="Grand Hotel, Grand Prix -> pierwszy człon to burkinostka">
        <pattern case_sensitive="yes">
            <marker>
                <token>Grand</token>
            </marker>
            <token inflected="yes" regexp="yes">hotel|prix</token>
        </pattern>
        <disambig action="replace"><wd pos="burk" lemma="Grand"/></disambig>
    </rule>


    <rule id="LAS_BURK" name="Las Vegas">
        <pattern case_sensitive="yes">
            <marker>
            <token>Las</token>
            </marker>
            <token regexp="yes">Vegas|Palmas|Casas|Cuevas</token>
        </pattern>
        <disambig postag="burk"/>
    </rule>

    <rule id="LAS_NIE_BURK" name="Las jodłowy itd.">
        <pattern>
            <token postag="subst.*" postag_regexp="yes">las</token>
        </pattern>
        <disambig action="remove"><wd pos="burk"/></disambig>
    </rule>

    <rule id="MAIN_STREET" name="Main Street">
        <pattern case_sensitive="yes">
            <marker>
                <token>Main</token>
            </marker>
            <token>Street</token>
        </pattern>
        <disambig action="replace"><wd pos="burk" lemma="Main"/></disambig>
    </rule>


    <rule id="NEW_BURK" name="New York">
        <pattern case_sensitive="yes">
            <marker>
                <token>New</token>
            </marker>
            <token inflected="yes" regexp="yes">Bedford|Delhi|York|Age|Hampshire|Jersey|Haven|Town|London</token>
        </pattern>
        <disambig postag="burk"/>
    </rule>

    <rule id="SAO_PAULO" name="Sao Paulo => burk">
        <pattern case_sensitive="yes">
            <token>Sao</token>
            <marker>
                <token>Paulo</token>
            </marker>
        </pattern>
        <disambig postag="burk"/>
    </rule>

    <rule id="Sierra_del_Plata" name="Sierra del Plata => burk">
        <pattern case_sensitive="yes">
            <token postag="burk">Sierra</token>
            <token postag="burk">del</token>
            <token postag="burk">Plata</token>
        </pattern>
        <disambig action="filterall"/>
    </rule>

    <rule name="uniesiona + inst > ppas" id="uniesiona_ppas_inst">
        <pattern>
            <marker>
                <token postag="ppas:sg:nom.voc:f:perf:aff" regexp="yes">uniesiona|ośmielona|wzruszona|zdziwiona|znużona|przerażona|wyczerpana|zajęta|przeżarta|przejęta|opanowana|rozjuszona|uzbrojona|podrażniona|zmęczona|zgorszona|zalana|zainteresowana|oblana|obrażona|uzasadniona|zdumiona|zniechęcona|opatrzona</token>
                <token postag_regexp="yes" postag="subst:sg:inst.*"/>
            </marker>
        </pattern>
        <disambig action="filterall"/>
    </rule>

    <rule name="też jako kublik" id="tez_qub">
        <pattern>
            <marker><token>też</token></marker>
            <token postag_regexp="yes" postag="prep:.*"/>
        </pattern>
        <disambig postag="qub"/>
        <example type="ambiguous" inputform="też[tenże/adj:pl:acc:m2.m3.f.n1.n2.p2.p3:pos,tenże/adj:pl:nom.voc:m2.m3.f.n1.n2.p2.p3:pos,też/qub]"
                 outputform="też[też/qub]">Nie masz <marker>też</marker> o co się martwić.</example>
    </rule>

    <rule name="wszędzie dokoła" id="dokoła_adv">
        <pattern>
            <token>wszędzie</token>
            <marker><token>dokoła</token></marker>
        </pattern>
        <disambig postag="adv"/>
        <example type="ambiguous" outputform="dokoła[dokoła/adv]"
                 inputform="dokoła[dokoła/adv,dokoła/prep:gen]">Wszędzie <marker>dokoła</marker> co za blask!</example>
        <example type="untouched">Tańczą dokoła drzewa.</example>
    </rule>

    <rule id="rozdzial_subst" name="Rozdział to rzeczownik">
        <pattern>
            <marker>
                <token regexp="yes">(?:roz)?dział</token>
            </marker>
            <token regexp="yes">\d+|((X{0,2})(V?I{0,3}|I[VX]))(-(X{0,2})(V?I{0,3}|I[VX]))?</token>
        </pattern>
        <disambig action="remove"><wd pos="verb:praet:sg:m1.m2.m3:ter:perf:refl.nonrefl"/></disambig>
        <example type="untouched">Rozdział się pospiesznie.</example>
        <example type="ambiguous" inputform="Rozdział[rozdziać/verb:praet:sg:m1.m2.m3:ter:perf:refl.nonrefl,rozdział/subst:sg:acc:m3,rozdział/subst:sg:nom:m3]" outputform="Rozdział[rozdział/subst:sg:acc:m3,rozdział/subst:sg:nom:m3]"><marker>Rozdział</marker> XXIV</example>
    </rule>

    <rulegroup id="rozdzial_dzial_subst" name="Rozdział i dział to rzeczowniki">
    <rule>
        <pattern>
            <marker>
                <unify>
                  <feature id="gender"/><feature id="case"/><feature id="number"/>
                    <token regexp="yes">(?:roz|po|prze|u)?dział</token>
                    <token postag_regexp="yes" postag="adj.*"/>
                </unify>
            </marker>
        </pattern>
        <disambig action="unify"/>
        <example type="untouched">Rozdział się pospiesznie.</example>
        <example type="ambiguous" inputform="Rozdział[rozdziać/verb:praet:sg:m1.m2.m3:ter:perf:refl.nonrefl,rozdział/subst:sg:acc:m3,rozdział/subst:sg:nom:m3]" outputform="Rozdział[rozdział/subst:sg:acc:m3,rozdział/subst:sg:nom:m3]"><marker>Rozdział</marker> pierwszy</example>
    </rule>
        <rule>
            <pattern>
                <marker>
                    <unify>
                        <feature id="gender"/><feature id="case"/><feature id="number"/>
                        <token postag_regexp="yes" postag="adj.*"/>
                        <token regexp="yes">(?:roz|po|prze|u)?dział</token>
                    </unify>
                </marker>
            </pattern>
            <disambig action="unify"/>
            <example type="untouched">Rozdział się pospiesznie.</example>
            <example type="ambiguous" inputform="rozdział[rozdziać/verb:praet:sg:m1.m2.m3:ter:perf:refl.nonrefl,rozdział/subst:sg:acc:m3,rozdział/subst:sg:nom:m3]" outputform="rozdział[rozdział/subst:sg:acc:m3,rozdział/subst:sg:nom:m3]">Drugi <marker>rozdział</marker> opisuje przyrodę Kaukazu.</example>
        </rule>
    </rulegroup>


    <rule id="INF_MUSZA" name="Muszą jako czasownik">
        <pattern>
            <token postag="verb:inf.*" postag_regexp="yes"/>
            <marker><token>muszą</token></marker>
        </pattern>
        <disambig postag="verb:fin:pl:ter:imperf:nonrefl"/>
        <example type="untouched">Zabawiał się muszą nóżką.</example>
        <example type="ambiguous" inputform="muszą[musieć/verb:fin:pl:ter:imperf:nonrefl,musić/verb:fin:pl:ter:imperf:refl.nonrefl,muszy/adj:sg:acc:f:pos,muszy/adj:sg:inst:f:pos]" outputform="muszą[musieć/verb:fin:pl:ter:imperf:nonrefl]">Oni zarabiać <marker>muszą</marker>.</example>
    </rule>

    <rule id="INF_MUSZA_2" name="Muszą jako czasownik">
        <pattern>
            <marker><token skip="-1"><exception scope="next" postag="interp:comma"/> muszą</token></marker>
            <token postag="verb:inf.*" postag_regexp="yes"/>
        </pattern>
        <disambig postag="verb:fin:pl:ter:imperf:nonrefl"/>
        <example type="untouched">Zabawiał się muszą nóżką.</example>
        <example type="ambiguous" inputform="muszą[musieć/verb:fin:pl:ter:imperf:nonrefl,musić/verb:fin:pl:ter:imperf:refl.nonrefl,muszy/adj:sg:acc:f:pos,muszy/adj:sg:inst:f:pos]" outputform="muszą[musieć/verb:fin:pl:ter:imperf:nonrefl]">Oni <marker>muszą</marker> zarabiać.</example>
    </rule>

    <rule id="INF_MUSZA_3" name="Muszą jako czasownik">
        <pattern>
            <marker><token>muszą</token></marker>
            <token>się</token>
        </pattern>
        <disambig postag="verb:fin:pl:ter:imperf:nonrefl"/>
        <example type="untouched">Zabawiał się muszą nóżką.</example>
        <example type="ambiguous" inputform="muszą[musieć/verb:fin:pl:ter:imperf:nonrefl,musić/verb:fin:pl:ter:imperf:refl.nonrefl,muszy/adj:sg:acc:f:pos,muszy/adj:sg:inst:f:pos]" outputform="muszą[musieć/verb:fin:pl:ter:imperf:nonrefl]">Oni <marker>muszą</marker> się, chcąc nie chcąc, dostosować.</example>
    </rule>


    <rule id="mosci" name="mości jako wołacz">
        <pattern>
            <unify>
                <feature id="case"><type id="voc"/></feature>
                <feature id="gender"><type id="m1"/><type id="f"/></feature>
                <feature id="number"><type id="sg"/></feature>
                <token>mości</token>
                <token postag="subst:sg.*" postag_regexp="yes"/>
            </unify>
        </pattern>
        <disambig action="unify"/>
        <example type="untouched">Jaskółka mości sobie gniazdko.</example>
        <example type="ambiguous" inputform="mości[mości/burk,mościć/verb:fin:sg:ter:imperf:refl.nonrefl,mość/subst:pl:gen:f,mość/subst:sg:acc:m1,mość/subst:sg:dat:f,mość/subst:sg:dat:m1,mość/subst:sg:gen:f,mość/subst:sg:gen:m1,mość/subst:sg:loc:f,mość/subst:sg:loc:m1,mość/subst:sg:voc:f,mość/subst:sg:voc:m1]"
                 outputform="mości[mość/subst:sg:voc:f]">A <marker>mości</marker> brzytewko, miły skrobibrodo!</example>
    </rule>

    <rulegroup id="MNA" name="mną">
     <rule>
        <pattern>
            <token inflected="yes" postag="verb:.*(sg|pl).*|verb:imps.*|pcon:imperf.*|pant:perf.*" postag_regexp="yes" skip="-1">mieć<exception scope="current">miano</exception><exception postag="SENT_END|&lt;ELLIPSIS&gt;|comp:comma|interp:comma" postag_regexp="yes" scope="next"/><exception scope="next" regexp="yes">&interp;</exception></token>
            <marker>
                <token>mną</token>
            </marker>
        </pattern>
        <disambig postag="ppron12:sg:inst:m1.m2.m3.f.n1.n2:pri"/>
         <example type="untouched">Oni mną papiery.</example>
         <example type="ambiguous" inputform="mną[ja/ppron12:sg:inst:m1.m2.m3.f.n1.n2:pri,miąć/verb:fin:pl:ter:imperf:refl.nonrefl]"
                  outputform="mną[ja/ppron12:sg:inst:m1.m2.m3.f.n1.n2:pri]">Masz się <marker>mną</marker> zająć.</example>
    </rule>
        <rule>
            <pattern>
                <token postag="verb:.*(sg|pl).*|verb:imps.*|pcon:imperf.*|pant:perf.*" postag_regexp="yes" skip="-1"><exception postag="subst:.*|adj.*|ppron.*|verb:inf.*|verb:bedzie.*|adv:com|prep.*|qub|adv.*|conj|comp|&lt;/TO_(ZNACZY|JEST)&gt;" postag_regexp="yes" scope="current"></exception><exception scope="current">może</exception><exception postag="SENT_END|&lt;ELLIPSIS&gt;|interp:comma|comp:comma" postag_regexp="yes" scope="next"/><exception scope="next" regexp="yes">&interp;</exception></token>
                <marker>
                    <token>mną</token>
                </marker>
            </pattern>
            <disambig postag="ppron12:sg:inst:m1.m2.m3.f.n1.n2:pri"/>
            <example type="untouched">Oni mną papiery.</example>
            <example type="ambiguous" inputform="mną[ja/ppron12:sg:inst:m1.m2.m3.f.n1.n2:pri,miąć/verb:fin:pl:ter:imperf:refl.nonrefl]"
                     outputform="mną[ja/ppron12:sg:inst:m1.m2.m3.f.n1.n2:pri]">Zajmij się <marker>mną</marker>.</example>
        </rule>
        <rule>
        <pattern>
            <marker>
                <token skip="-1">mną<exception postag="SENT_END|&lt;ELLIPSIS&gt;|interp:comma|comp:comma" postag_regexp="yes" scope="next"/><exception scope="next" regexp="yes">&interp;</exception></token>
            </marker>
            <token postag="verb:.*(sg|pl).*|verb:imps.*|pcon:imperf.*|pant:perf.*" postag_regexp="yes"><exception postag="subst:.*|adj.*|ppron.*|verb:inf.*|verb:bedzie.*|adv:com|prep.*|qub|adv.*|conj|comp|&lt;/TO_(ZNACZY|JEST)&gt;" postag_regexp="yes" scope="current"/><exception scope="current">może</exception></token>
        </pattern>
            <disambig postag="ppron12:sg:inst:m1.m2.m3.f.n1.n2:pri"/>
            <example type="ambiguous" inputform="mną[ja/ppron12:sg:inst:m1.m2.m3.f.n1.n2:pri,miąć/verb:fin:pl:ter:imperf:refl.nonrefl]"
                     outputform="mną[ja/ppron12:sg:inst:m1.m2.m3.f.n1.n2:pri]">Czemu się <marker>mną</marker> zajmujesz?</example>
            <example type="untouched">Oni mną papiery.</example>
        </rule>
    </rulegroup>

    <rule id="WALESA" name="Wałęsa to nazwisko">
        <pattern case_sensitive="yes">
            <token>Wałęsa<exception scope="previous" postag="SENT_END"/></token>
        </pattern>
        <disambig action="replace"><wd pos="subst:sg:nom:m1" lemma="Wałęsa"/></disambig>
        <example type="ambiguous" inputform="Wałęsa[&lt;/S&gt;,Wałęsa/subst:sg:nom:m1,wałęsa/subst:sg:nom:m1,wałęsać/verb:fin:sg:ter:imperf:refl]" outputform="Wałęsa[&lt;/S&gt;,Wałęsa/subst:sg:nom:m1]">Lech <marker>Wałęsa</marker></example>
    </rule>

    <rule id="MIESZKA" name="Mieszka to dopełniacz od Mieszko">
        <pattern case_sensitive="yes">
            <token>Mieszka<exception scope="previous" postag="SENT_END"/></token>
        </pattern>
        <disambig action="filter" postag="subst:sg:.*:m1"/>
        <example type="ambiguous" inputform="Mieszka[Mieszko/subst:sg:acc:m1,Mieszko/subst:sg:gen:m1,mieszek/subst:sg:gen:m3,mieszkać/verb:fin:sg:ter:imperf:nonrefl]"
                 outputform="Mieszka[Mieszko/subst:sg:acc:m1,Mieszko/subst:sg:gen:m1]">
            W tym samym roku władca Polski przywołał z węgierskiego wygnania swego bratanka <marker>Mieszka</marker> Bolesławowica.</example>
    </rule>


    <rule id="SWOJE_LATA" name="Swoje lata -> rzeczownik">
        <pattern>
            <token postag="adj:pl.*" postag_regexp="yes" regexp="yes">pierwsze|swoje|ostatnie|młode|złe</token>
            <token postag="subst:pl.*" postag_regexp="yes">lata</token>
        </pattern>
        <disambig action="filterall"/>
    </rule>

    <rule id="znacznie_com" name="znacznie/dużo + com =>com">
        <pattern>
            <token postag="adv:pos" regexp="yes">dużo|znacznie|sporo</token>
            <token postag=".*:com" postag_regexp="yes"/>
        </pattern>
        <disambig action="filterall"/>
        <example type="untouched">Kwota może znacznie przekraczać milion.</example>
        <example type="ambiguous" inputform="gorszy[gorszyć/verb:fin:sg:ter:imperf:refl.nonrefl,zły/adj:sg:acc:m3:com,zły/adj:sg:nom.voc:m1.m2.m3:com]"
                 outputform="gorszy[zły/adj:sg:acc:m3:com,zły/adj:sg:nom.voc:m1.m2.m3:com]">Dalej wieś miała wygląd znacznie <marker>gorszy</marker>.</example>
    </rule>

    <rule id="DOBRE_JADŁO" name="jadło - rzeczownik">
        <pattern>
            <token postag="adj.*" regexp="yes" postag_regexp="yes">chłopskie|swojskie|dobre|nowe</token>
            <token postag="subst.*" postag_regexp="yes">jadło</token>
        </pattern>
        <disambig action="filterall"/>
    </rule>
    
    <rule id="PETA" name="te pęta - nie czasownik">
        <pattern>
            <unify>
                <feature id="case"/><feature id="number"/>
                <feature id="gender"/>
            <token postag="adj.*" postag_regexp="yes"/>
            <token postag="subst.*" postag_regexp="yes">pęta</token>
            </unify>
        </pattern>
        <disambig action="filterall"/>
        <example type="untouched">On zwierzęta pęta.</example>
        <example type="ambiguous" inputform="pęta[pęta/subst:pl:acc:p3,pęta/subst:pl:nom:p3,pęta/subst:pl:voc:p3,pętać/verb:fin:sg:ter:imperf:refl,pętać/verb:fin:sg:ter:imperf:refl.nonrefl,pęto/subst:pl:acc:n2,pęto/subst:pl:nom:n2,pęto/subst:pl:voc:n2,pęto/subst:sg:gen:n2]"
                 outputform="pęta[pęta/subst:pl:acc:p3,pęta/subst:pl:nom:p3,pęta/subst:pl:voc:p3,pęto/subst:pl:acc:n2,pęto/subst:pl:nom:n2,pęto/subst:pl:voc:n2,pęto/subst:sg:gen:n2]">Do czego służą te <marker>pęta</marker>?</example>
    </rule>


    <rule id="cene_placa" name="cenę płacą > verb">
        <pattern>
            <token>cenę</token>
            <marker>
                <token>płacą</token>
            </marker>
        </pattern>
        <disambig postag="verb:fin:pl:ter:imperf:refl.nonrefl"/>
    </rule>

    <rule id="placa_cene" name="płacą cenę > verb">
        <pattern>
            <marker>
                <token>płacą</token>
            </marker>
            <token>cenę</token>
        </pattern>
        <disambig postag="verb:fin:pl:ter:imperf:refl.nonrefl"/>
    </rule>


    <rulegroup id="powiesc" name="powieść">
        <rule>
        <pattern>
            <token skip="1" regexp="yes" inflected="yes">s?kończyć|zacząć|zaczynać</token>
            <marker><token>powieść</token></marker>
        </pattern>
        <disambig postag="subst:sg:acc:f"></disambig>
        <example type="ambiguous" inputform="powieść[powieść/subst:sg:acc:f,powieść/subst:sg:nom:f,powieść/verb:inf:perf:refl.nonrefl]"
                 outputform="powieść[powieść/subst:sg:acc:f]">Muszę skończyć <marker>powieść</marker>.</example>
        <example type="untouched">Wszystko musi mi się powieść.</example>
    </rule>
        <rule>
            <pattern>
                <unify>
                    <feature id="case"/><feature id="gender"><type id="f"/></feature><feature id="number"><type id="sg"/></feature>
                    <token>powieść</token>
                    <token postag="adj.*" postag_regexp="yes"><exception>ma</exception><exception>była</exception></token>
                </unify>
            </pattern>
            <disambig action="unify"/>
            <example type="ambiguous" inputform="Powieść[powieść/subst:sg:acc:f,powieść/subst:sg:nom:f,powieść/verb:inf:perf:refl.nonrefl]"
                     outputform="Powieść[powieść/subst:sg:nom:f]"><marker>Powieść</marker> ta jest interesująca.</example>
            <example type="untouched">Powieść ma konstrukcję ramową, zaczyna się w tym samym miejscu, w którym się kończy.</example>
        </rule>
    </rulegroup>


    <rule id="POSTAC" name="postać jako rzeczownik z przymiotnikiem">
        <pattern>
            <unify>
                <feature id="case"/><feature id="gender"><type id="f"/></feature><feature id="number"><type id="sg"/></feature>
                <token postag="adj.*" postag_regexp="yes"/>
                <token>postać</token>
            </unify>
        </pattern>
        <disambig action="unify"/>
        <example type="ambiguous" inputform="postać[postać/subst:sg:acc:f,postać/subst:sg:nom:f,postać/verb:inf:perf:nonrefl]"
                 outputform="postać[postać/subst:sg:nom:f]">To historyczna <marker>postać</marker>.</example>
        <example type="untouched">Dziękuję, wolę postać.</example>
    </rule>

    <rule id="POSTAC_2" name="postać jako rzeczownik z przymiotnikiem">
        <pattern>
            <unify>
                <feature id="case"/><feature id="gender"><type id="f"/></feature><feature id="number"><type id="sg"/></feature>
                <token>postać</token>
                <token postag="adj.*" postag_regexp="yes"/>
            </unify>
        </pattern>
        <disambig action="unify"/>
        <example type="ambiguous" inputform="postać[postać/subst:sg:acc:f,postać/subst:sg:nom:f,postać/verb:inf:perf:nonrefl]"
                 outputform="postać[postać/subst:sg:nom:f]">To <marker>postać</marker> historyczna.</example>
        <example type="untouched">Dziękuję, wolę postać.</example>
    </rule>


    <rule id="ON_ONA_MA" name="Ona/on ma...">
        <pattern>
            <token regexp="yes" postag="ppron3.*" postag_regexp="yes">ona?</token>
            <token postag="verb:fin:sg:ter:imperf:refl.nonrefl">ma</token>
        </pattern>
        <disambig action="filterall"/>
    </rule>

    <rule id="SIEC_ROZLEGLA" name="sieć rozległa > nie czasownik">
        <pattern>
            <token postag="subst:sg:nom:f">sieć</token>
            <token postag="adj:sg:nom.voc:f:pos">rozległa</token>
        </pattern>
        <disambig action="filterall"></disambig>
    </rule>

    <rule id="LEZEC_SAMOTNIE" name="leżeć + samotnie > adv:pos">
        <pattern>
            <token inflected="yes" postag="(verb|pact).*" postag_regexp="yes">leżeć</token>
            <token postag="adv:pos">samotnie</token>
        </pattern>
        <disambig action="filterall"/>
        <example type="untouched">Tam leżała samotnia.</example>
        <example type="ambiguous" inputform="samotnie[samotnia/subst:pl:acc:f,samotnia/subst:pl:nom:f,samotnia/subst:pl:voc:f,samotnie/adv:pos]"
                 outputform="samotnie[samotnie/adv:pos]">Paginę zwykłą (bieżącą) leżącą <marker>samotnie</marker> w wierszu liczy się za pół wiersza.</example>
    </rule>

    <rule id="OKAZALA_SIE" name="okazała/przestała się > czasownik">
        <pattern>
            <marker>
                <token postag="verb:praet:.*:ter:perf:refl.nonrefl" postag_regexp="yes" regexp="yes">(?:okazał|przestał)[ya]</token>
                <token postag="qub">się</token>
            </marker>
        </pattern>
        <disambig action="filterall"/>
        <example type="untouched">To była okazała zdobycz.</example>
        <example type="ambiguous" inputform="okazała[okazać/verb:praet:sg:f:ter:perf:refl.nonrefl,okazały/adj:sg:nom.voc:f:pos]"
        outputform="okazała[okazać/verb:praet:sg:f:ter:perf:refl.nonrefl]">Najpopularniejsza <marker>okazała</marker> się amerykańska witryna Napster</example>
    </rule>

    <rule id="SUBST_ACC_OKAZALA" name="okazała coś > czasownik">
        <pattern>
            <marker>
                <token postag='subst:sg:acc:f'/>
                <token postag="verb:praet:sg:f:ter:perf:refl.nonrefl">okazała</token>
            </marker>
        </pattern>
        <disambig action="filterall"/>
    </rule>

    <rule id="TRWALA_GODZINE" name="trwała/stała godzinę > czasownik">
        <pattern>
            <marker>
                <token postag="verb:praet:sg:f:ter:imperf:nonrefl" regexp="yes">trwała|stała|biegła|czuła</token>
                <token postag="subst:sg.*acc.*" postag_regexp="yes" regexp="yes">minutę|godzinę|rok|miesiąc|sekundę|chwilę|mgnienie|chwileczkę</token>
            </marker>
        </pattern>
        <disambig action="filterall"/>
        <example type="untouched">Na jej głowie była trwała.</example>
        <example type="ambiguous" inputform="trwała[trwać/verb:praet:sg:f:ter:imperf:nonrefl,trwała/subst:sg:nom:f,trwała/subst:sg:voc:f,trwały/adj:sg:nom.voc:f:pos]"
                 outputform="trwała[trwać/verb:praet:sg:f:ter:imperf:nonrefl]">Procedura <marker>trwała</marker> rok.</example>
    </rule>

    <rule id="GODZINE_TRWALA" name="godzinę trwała / stała> czasownik">
        <pattern>
            <marker>
                <token postag="subst:sg.*acc.*" postag_regexp="yes" regexp="yes">minutę|godzinę|rok|miesiąc|sekundę|chwilę|mgnienie|chwileczkę</token>
                <token postag="verb:praet:sg:f:ter:imperf:nonrefl" regexp="yes">trwała|stała|biegła|czuła</token>
            </marker>
        </pattern>
        <disambig action="filterall"/>
        <example type="untouched">Na jej głowie była trwała.</example>
        <example type="ambiguous" inputform="trwała[trwać/verb:praet:sg:f:ter:imperf:nonrefl,trwała/subst:sg:nom:f,trwała/subst:sg:voc:f,trwały/adj:sg:nom.voc:f:pos]"
                 outputform="trwała[trwać/verb:praet:sg:f:ter:imperf:nonrefl]">Procedura cały rok <marker>trwała</marker>.</example>
        <example type="ambiguous" inputform="stała[stać/verb:praet:sg:f:ter:imperf:nonrefl,stać/verb:praet:sg:f:ter:perf:refl,stała/subst:sg:nom:f,stała/subst:sg:voc:f,stały/adj:sg:nom.voc:f:pos]"
        outputform="stała[stać/verb:praet:sg:f:ter:imperf:nonrefl]">Chwilę <marker>stała</marker>, trzymając się za serce</example>
    </rule>

    <rule id="GODZINE_CALA_TRWALA" name="godzinę całą trwała / stała> czasownik">
        <pattern>
            <marker>
                <token postag="subst:sg.*acc.*" postag_regexp="yes" regexp="yes">minutę|godzinę|rok|miesiąc|sekundę|chwilę|mgnienie|chwileczkę</token>
                <token postag="adj:sg:acc.*:pos" postag_regexp="yes" inflected="yes">cały</token>
                <token postag="verb:praet:sg:f:ter:imperf:nonrefl" regexp="yes">trwała|stała|biegła|czuła</token>
            </marker>
        </pattern>
        <disambig action="filterall"/>
        <example type="untouched">Na jej głowie była trwała.</example>
        <example type="ambiguous" inputform="trwała[trwać/verb:praet:sg:f:ter:imperf:nonrefl,trwała/subst:sg:nom:f,trwała/subst:sg:voc:f,trwały/adj:sg:nom.voc:f:pos]"
                 outputform="trwała[trwać/verb:praet:sg:f:ter:imperf:nonrefl]">Procedura rok cały <marker>trwała</marker>.</example>
    </rule>


    <rule id="NA_CHWILE_ADJ_VERB" name="na chwilę umilkła > czasownik [heurystyka">
        <pattern>
            <token>na</token>
            <token regexp="yes">chwilk?ę</token>
            <marker>
            <and>
                <token postag="verb:praet:sg:f:ter:.*" postag_regexp="yes"/>
                <token postag="adj:sg:nom.voc:f.*" postag_regexp="yes"/>
            </and>
            </marker>
        </pattern>
        <disambig postag="verb:praet:sg:f:ter:imperf:nonrefl"/>
        <example type="ambiguous" inputform="umilkła[umilknąć/verb:praet:sg:f:ter:perf:nonrefl,umilkły/adj:sg:nom.voc:f:pos]"
                 outputform="umilkła[umilkły/verb:praet:sg:f:ter:imperf:nonrefl]">Mówczyni na chwilę <marker>umilkła</marker>.</example>
    </rule>



    <rule id="przybyla_inst" name="przybyła z narzędnikiem > czasownik">
        <pattern>
            <marker>
                <token postag="verb:praet:sg:f:ter:perf:nonrefl">przybyła</token>
                <token postag=".*inst.*" postag_regexp="yes"/>
            </marker>
        </pattern>
        <disambig action="filterall"/>
        <example type="ambiguous" inputform="przybyła[przybyć/verb:praet:sg:f:ter:perf:nonrefl,przybyła/subst:sg:nom:f,przybyła/subst:sg:voc:f,przybyły/adj:sg:nom.voc:f:pos]"
                 outputform="przybyła[przybyć/verb:praet:sg:f:ter:perf:nonrefl]">Nad wieczorem <marker>przybyła</marker> kurierką od Czałbowa ostatnia partia.</example>
    </rule>

    <rule id="w_gore_wzniosla" name="w górę wzniosła > czasownik">
        <pattern>
            <token>w</token>
            <token>górę</token>
            <marker><token>wzniosła</token></marker>
        </pattern>
        <disambig postag="verb:praet:sg:f:ter:perf:refl.nonrefl"/>
        <example type="untouched">Muzyka była bardzo wzniosła.</example>
        <example type="ambiguous" inputform="wzniosła[wznieść/verb:praet:sg:f:ter:perf:refl.nonrefl,wzniosły/adj:sg:nom.voc:f:pos]"
                 outputform="wzniosła[wznieść/verb:praet:sg:f:ter:perf:refl.nonrefl]">Tu pani Emilia splecione ręce w górę <marker>wzniosła</marker>.</example>
    </rule>

    <rule id="przez_glowe_przebiegla" name="przez głowę przebiegła > czasownik">
        <pattern>
            <token>przez</token>
            <token>głowę</token>
            <marker><token>przebiegła</token></marker>
        </pattern>
        <disambig postag="verb:praet:sg:f:ter:perf:refl.nonrefl"/>
    </rule>

    <rule id="SWIATLA_GEN" name="wiązka światła > rzeczownik">
        <pattern>
            <token inflected="yes" regexp="yes">wiązka|linia|gra|snop|smuga|smużka|refleks|promyk|plama|źródło|natężenie|błysk|plamka|łuna|słup|emisja|absorpcja|natura|istota|zamiana|energia</token>
            <marker><token>światła</token></marker>
        </pattern>
        <disambig postag="subst:sg:gen:n2"></disambig>
    </rule>

    <rule id="PELNY_GEN" name="pełny z dopełniaczem">
        <pattern>
            <token inflected="yes">pełny</token>
            <marker>
                <token postag_regexp="yes" postag=".*gen.*"/>
            </marker>
        </pattern>
        <disambig action="filterall"/>
    </rule>

    <rule id="BRAK_GEN" name="brak z dopełniaczem">
        <pattern>
            <token>brak</token>
            <marker>
                <token postag_regexp="yes" postag=".*gen.*"/>
            </marker>
        </pattern>
        <disambig action="filterall"/>
    </rule>

    <rule id="DZISIAJ_GOSCI" name="dzisiaj gości">
        <pattern>
            <marker>
                <token>dzisiaj</token>
            </marker>
            <token>gości</token>
        </pattern>
        <disambig postag="adv"/>
    </rule>

    <rule id="SLEDZI" name="gatunek + śledzi ->rzeczownik">
        <pattern>
            <token inflected="yes" regexp="yes">gatunek|import|limit|tona|populacja|połów|wyginięcie</token>
            <marker>
                <token>śledzi</token>
            </marker>
        </pattern>
        <disambig postag="subst:pl:gen:m2"/>
    </rule>

    <rule id="STARA_ADJ" name="stara to przymiotnik przed rzeczownikiem r. ż.">
        <pattern>
            <token postag="adj:sg:nom.voc:f:pos">stara</token>
            <token postag="subst:sg:(?:nom|voc):f|adj:sg:nom.voc:f.*" postag_regexp="yes"/>
        </pattern>
        <disambig action="filterall"/>
    </rule>

    <rule id="BABIEJ_ADJ" name="babiej to przymiotnik przed rzeczownikiem r.ż.">
        <pattern>
            <unify>
                <feature id="case"/><feature id="number"><type id="sg"/></feature><feature id="gender"><type id="f"/></feature>
                <token>babiej</token>
                <token postag="(subst|depr|adj|pact|ppas):.*" postag_regexp="yes"/>
            </unify>
        </pattern>
        <disambig action="unify"/>
        <example type="untouched">Nie chcesz, to sobie tutaj babiej!</example>
        <example type="ambiguous" inputform="Babiej[babi/adj:sg:dat:f:pos,babi/adj:sg:gen:f:pos,babi/adj:sg:loc:f:pos,babieć/verb:impt:sg:sec:imperf:nonrefl]"
                 outputform="Babiej[babi/adj:sg:gen:f:pos]">Okolice <marker>Babiej</marker> Góry</example>
    </rule>

    <rule id="moj_boze" name="mój Boże -> vocativus">
        <pattern>
            <token>mój</token>
            <token>Boże</token>
        </pattern>
        <disambig action="replace"><wd pos="adj:sg:nom.voc:m1.m2.m3:pos"/><wd pos="subst:sg:voc:m1" lemma="Bóg"/></disambig>
    </rule>

    <rule id="boze_bron" name="Boże broń -> vocativus">
        <pattern>
            <token postag="subst:sg:voc:m1">Boże</token>
            <token postag="verb:impt:sg:sec:imperf:refl.nonrefl">broń</token>
        </pattern>
        <disambig action="filterall"></disambig>
    </rule>

    <rule id="bron_palna" name='broń palna'>
        <pattern>
            <unify>
                <feature id="number"></feature>
                <feature id="gender"><type id="f"/></feature>
                <feature id="case"/>
                <token inflected="yes">broń</token>
                <token inflected="yes">palny</token>
            </unify>
        </pattern>
        <disambig action="unify"/>
    </rule>

    <rule id="chlodna" name='chłodną + adj/subst => przymiotnik'>
        <pattern>
            <unify>
                <feature id="number"></feature>
                <feature id="gender"><type id="f"/></feature>
                <feature id="case"><type id="acc"/><type id="inst"/></feature>
                <token>chłodną</token>
                <token postag="(subst|adj|pact|ppas).*" postag_regexp="yes"/>
            </unify>
        </pattern>
        <disambig action="unify"/>
        <example type="untouched">Ciała chłodną w kostnicy.</example>
        <example type="ambiguous" inputform="chłodną[chłodny/adj:sg:acc:f:pos,chłodny/adj:sg:inst:f:pos,chłodnąć/verb:fin:pl:ter:imperf:nonrefl]"
                 outputform="chłodną[chłodny/adj:sg:inst:f:pos]">Zrywał się wiatr nasycony <marker>chłodną</marker> wilgocią.</example>
    </rule>

    <rule id="IDZIE" name="idzie to nie id">
        <pattern>
            <token>idzie</token>
        </pattern>
        <disambig action="remove"><wd lemma="id"/></disambig>
    </rule>

    <rule name="kozie śmierć" id="kozie_smierc">
        <pattern>
            <token postag="subst:sg:dat:f">kozie</token>
            <token postag="subst:sg:nom:f">śmierć</token>
        </pattern>
        <disambig action="filterall"/>
    </rule>

    <rule id="OKAZYWAC_UCZUC" name="okazywać + uczuć -> ger">
        <pattern>
            <token regexp="yes" inflected="yes">okazać|okazywać</token>
            <marker><token>uczuć</token></marker>
        </pattern>
        <disambig action="remove"><wd lemma="uczuć"/></disambig>
    </rule>

    <rule id="NOWE_MYSLI" name="myśli to rzeczownik">
        <pattern>
            <token postag="adj.*" postag_regexp="yes" regexp="yes">nowe|podłe</token>
            <token postag="subst.*" postag_regexp="yes">myśli</token>
        </pattern>
        <disambig action="filterall"/>
    </rule>

    <rule id="n2_mysli" name="rzeczownik nieożywiony + myśli => myśl w dopełniaczu">
        <pattern>
            <token postag="subst:sg:nom.*(?:[mn]2|m3)" postag_regexp="yes"><exception postag_regexp="yes" postag="subst:sg:nom.*m1"/></token>
            <marker><token>myśli</token></marker>
            <token><exception>sobie</exception></token>
        </pattern>
        <disambig postag="subst:sg:gen:f"/>
        <example type="untouched">Filozof myśli.</example>
        <example type="untouched">Oto pluszowy miś myśli sobie, jak miło byłoby zjeść trochę miodu na śniadanie.</example>
        <example type="ambiguous" inputform="myśli[myśl/subst:pl:acc:f,myśl/subst:pl:gen:f,myśl/subst:pl:nom:f,myśl/subst:pl:voc:f,myśl/subst:sg:dat:f,myśl/subst:sg:gen:f,myśl/subst:sg:loc:f,myśl/subst:sg:voc:f,myśleć/verb:fin:sg:ter:imperf:nonrefl,myślić/verb:fin:sg:ter:imperf:nonrefl]"
                 outputform="myśli[myśl/subst:sg:gen:f]">Łączyło je samo tylko czyste uczucie i porozumienie <marker>myśli</marker>.</example>
    </rule>

    <rule id="n2_mysla" name="gerundium wymagające narzędnika + myślą => myśl w narzędniku">
        <pattern>
            <token postag="ger.*" postag_regexp="yes" inflected="yes" regexp="yes">&verb_obj_inst;</token>
            <marker><token>myślą</token></marker>
        </pattern>
        <disambig postag="subst:sg:inst:f"/>
    </rule>
    <rule id="ger_refl_mysla" name="gerundium wymagające narzędnika, zwrotne + się + myślą => myśl w narzędniku">
        <pattern>
            <token postag="ger.*:refl(\.nonrefl)?" postag_regexp="yes" inflected="yes" regexp="yes">&verb_obj_inst;</token>
            <token>się</token>
            <marker><token>myślą</token></marker>
        </pattern>
        <disambig postag="subst:sg:inst:f"/>
    </rule>


    <rulegroup id="JE_JESC" name="„je” jako forma „jeść”">
    <rule>
        <pattern>
            <token regexp="yes">zupę|danie|pizzę|mięso|loda</token>
            <marker>
                <token>je</token>
            </marker>
        </pattern>
        <disambig postag="verb:fin:sg:ter:imperf:refl.nonrefl"></disambig>
    </rule>
    <rule>
        <pattern>
            <token postag="subst:sg.*nom.*" postag_regexp="yes"><exception postag="subst.*" postag_regexp="yes" negate_pos="yes"/></token>
            <token postag="verb:fin:sg:ter:imperf:refl.nonrefl">je</token>
            <token postag="subst.*acc.*" postag_regexp="yes"/>
        </pattern>
        <disambig action="filterall"/>
        <example type="ambiguous" inputform="je[jeść/verb:fin:sg:ter:imperf:refl.nonrefl,on/ppron3:pl:acc:m2.m3.f.n1.n2.p2.p3:ter:akc.nakc:npraep,on/ppron3:sg:acc:n1.n2:ter:akc.nakc:npraep]"
                 outputform="je[jeść/verb:fin:sg:ter:imperf:refl.nonrefl]">Krowa <marker>je</marker> trawę.</example>
        <example type="untouched">On je zabierze do kina.</example>
    </rule>
    </rulegroup>

    <rulegroup id="JE_PPRON" name="„je” jako zaimek">
        <rule>
            <pattern>
                <token postag="verb.*" postag_regexp="yes"/>
                <token postag="qub|adv.*" postag_regexp="yes"/>
                <marker><token>je</token></marker>
            </pattern>
            <disambig action="filter" postag="ppron3.*"></disambig>
            <example type="ambiguous" inputform="je[jeść/verb:fin:sg:ter:imperf:refl.nonrefl,on/ppron3:pl:acc:m2.m3.f.n1.n2.p2.p3:ter:akc.nakc:npraep,on/ppron3:sg:acc:n1.n2:ter:akc.nakc:npraep]"
                     outputform="je[on/ppron3:pl:acc:m2.m3.f.n1.n2.p2.p3:ter:akc.nakc:npraep,on/ppron3:sg:acc:n1.n2:ter:akc.nakc:npraep]">Łączy też <marker>je</marker> postać tajemniczej Melindy.</example>
        </rule>
        <rule>
            <pattern>
                <token postag="verb.*" postag_regexp="yes"/>
                <marker><token>je</token></marker>
            </pattern>
            <disambig action="filter" postag="ppron3.*"></disambig>
            <example type="ambiguous" inputform="je[jeść/verb:fin:sg:ter:imperf:refl.nonrefl,on/ppron3:pl:acc:m2.m3.f.n1.n2.p2.p3:ter:akc.nakc:npraep,on/ppron3:sg:acc:n1.n2:ter:akc.nakc:npraep]"
                     outputform="je[on/ppron3:pl:acc:m2.m3.f.n1.n2.p2.p3:ter:akc.nakc:npraep,on/ppron3:sg:acc:n1.n2:ter:akc.nakc:npraep]">Łączy <marker>je</marker> postać tajemniczej Melindy.</example>
        </rule>
        <rule>
            <pattern>
                <marker><token>je</token></marker>
                <token postag="verb.*" postag_regexp="yes"/>
            </pattern>
            <disambig action="filter" postag="ppron3.*"/>
            <example type="ambiguous" inputform="je[jeść/verb:fin:sg:ter:imperf:refl.nonrefl,on/ppron3:pl:acc:m2.m3.f.n1.n2.p2.p3:ter:akc.nakc:npraep,on/ppron3:sg:acc:n1.n2:ter:akc.nakc:npraep]"
                     outputform="je[on/ppron3:pl:acc:m2.m3.f.n1.n2.p2.p3:ter:akc.nakc:npraep,on/ppron3:sg:acc:n1.n2:ter:akc.nakc:npraep]">On <marker>je</marker> lubi.</example>
        </rule>
        <rule>
            <pattern>
                <marker><token>je</token></marker>
                <token postag="qub|adv.*" postag_regexp="yes"/>
                <token postag="verb.*" postag_regexp="yes"/>
            </pattern>
            <disambig action="filter" postag="ppron3.*"/>
            <example type="ambiguous" inputform="je[jeść/verb:fin:sg:ter:imperf:refl.nonrefl,on/ppron3:pl:acc:m2.m3.f.n1.n2.p2.p3:ter:akc.nakc:npraep,on/ppron3:sg:acc:n1.n2:ter:akc.nakc:npraep]"
                     outputform="je[on/ppron3:pl:acc:m2.m3.f.n1.n2.p2.p3:ter:akc.nakc:npraep,on/ppron3:sg:acc:n1.n2:ter:akc.nakc:npraep]">On <marker>je</marker> nawet lubi.</example>
        </rule>
        <rule>
            <pattern>
                <marker><token>je</token></marker>
                <token regexp="yes">czasem|czasami|raz</token>
                <token postag="verb.*" postag_regexp="yes"/>
            </pattern>
            <disambig action="filter" postag="ppron3.*"/>
            <example type="ambiguous" inputform="je[jeść/verb:fin:sg:ter:imperf:refl.nonrefl,on/ppron3:pl:acc:m2.m3.f.n1.n2.p2.p3:ter:akc.nakc:npraep,on/ppron3:sg:acc:n1.n2:ter:akc.nakc:npraep]"
                     outputform="je[on/ppron3:pl:acc:m2.m3.f.n1.n2.p2.p3:ter:akc.nakc:npraep,on/ppron3:sg:acc:n1.n2:ter:akc.nakc:npraep]">On <marker>je</marker> czasami lubi.</example>
        </rule>
    </rulegroup>

    <rule id="DOSYC" name="dosyć nie jako dosycić">
        <pattern>
            <marker>
                <token postag="qub">dosyć</token>
                <token postag="(?:adj|ger|subst).*gen.*" postag_regexp="yes"/>
            </marker>
        </pattern>
        <disambig action="filterall" postag=".*gen.*"/>
        <example type="untouched">Mam wiele do zrobienia.</example>
        <example type="ambiguous" inputform="ludzi[człowiek/subst:pl:acc:m1,człowiek/subst:pl:gen:m1,ludzie/subst:pl:acc:p1,ludzie/subst:pl:gen:p1]" outputform="ludzi[człowiek/subst:pl:gen:m1,ludzie/subst:pl:gen:p1]">Tu było dosyć <marker>ludzi</marker>.</example>
    </rule>
    
    <rule id="STALY_ADJ" name="stały wzrost itp.">
        <pattern>
            <unify>
                <feature id="case"><type id="nom"/><type id="acc"/><type id="voc"/></feature>
                <feature id="number"><type id="sg"/></feature>
                <feature id="gender"><type id="m1"></type><type id="m2"/><type id="m3"/></feature>
                <token>stały</token>
                <token postag="subst.*" postag_regexp="yes"/>
            </unify>
        </pattern>
        <disambig action="unify"/>
        <example type="ambiguous" inputform="stały[stać/verb:praet:pl:m2.m3.f.n1.n2.p2.p3:ter:imperf:nonrefl,stać/verb:praet:pl:m2.m3.f.n1.n2.p2.p3:ter:perf:refl,stały/adj:sg:acc:m3:pos,stały/adj:sg:nom.voc:m1.m2.m3:pos]"
                 outputform="stały[stały/adj:sg:acc:m3:pos,stały/adj:sg:nom.voc:m1.m2.m3:pos]">Trzeba jednak stwierdzić <marker>stały</marker> wzrost zainteresowania radzieckich naukowców omawianą problematyką.</example>
        <example type="untouched">Tam stały czołgi.</example>
    </rule>

    <rule id="LACZY_NIZ_DZIELI_1" name="łączy jako czasownik">
        <pattern>
            <marker>
            <token postag="verb:fin:sg:ter:imperf:refl.nonrefl">łączy</token>
            <token>niż</token>
            <token postag="verb:fin:sg:ter:imperf:refl.nonrefl">dzieli</token>
            </marker>
        </pattern>
        <disambig action="filterall"/>
    </rule>

    <rule id="LACZY_NIZ_DZIELI_2" name="łączy jako czasownik">
        <pattern>
            <marker>
                <token postag="verb:fin:sg:ter:imperf:refl.nonrefl">łączy</token>
                <token>,</token>
                <token>niż</token>
                <token postag="verb:fin:sg:ter:imperf:refl.nonrefl">dzieli</token>
            </marker>
        </pattern>
        <disambig action="filterall"/>
    </rule>

    <rule id="PRAWA_ZACHOWANIA" name="prawa zachowania -> rzeczownik">
        <pattern>
            <marker>
                <token postag="subst.*n2" postag_regexp="yes" regexp="yes">praw[oa]</token>
                <token postag="subst:sg:gen:.*" postag_regexp="yes" regexp="yes">zachowania|pobytu|człowieka|poboru|pracy|jazdy|użytkowania|mniejszości|producenta|własności|dostępu</token>
            </marker>
        </pattern>
        <disambig action="filterall"/>
    </rule>

    <rule id="PRAWA_DO" name="prawa do -> rzeczownik">
        <pattern>
        <marker>
            <token postag="subst.*n2" postag_regexp="yes">prawa</token>
            <token postag="prep:gen">do</token>
            <token postag=".*gen.*" postag_regexp="yes"/>
        </marker>
        </pattern>
        <disambig action="filterall"/>
    </rule>

    <rule id="prawo_cywilne" name="prawo + przymiotnik -> rzeczownik">
        <pattern>
            <unify>
                <feature id="case"/><feature id="number"/><feature id="gender"><type id="n2"/></feature>
                <token postag="subst.*" postag_regexp="yes" inflected="yes">prawo</token>
                <token inflected="yes" postag="(?:adj|ppas).*" postag_regexp="yes" regexp="yes">cywilny|handlowy|karny|autorski|konstytucyjny|prasowy|upadłościowy|polski|energetyczny|obywatelski|europejski|materialny|procesowy|publiczny|podatkowy|wyborczy|naturalny|inwestycyjny|gospodarczy|stanowić|wspólnotowy|wykonawczy|miejscowy|konsumencki</token>
            </unify>
        </pattern>
        <disambig action="unify"/>
    </rule>

    <rule id="POTRZEBA_DAT_GEN" name="potrzeba ci gen">
        <pattern>
            <token postag="pred">potrzeba<exception scope="previous" postag="verb.*(pl|sg).*" postag_regexp="yes"/><exception scope="previous">się</exception></token>
            <token postag=".*dat.*" postag_regexp="yes"/>
            <token postag=".*gen.*" postag_regexp="yes"/>
        </pattern>
        <disambig action="filterall"/>
        <example type="ambiguous" inputform="ci[ci/qub,ten/adj:pl:nom.voc:m1.p1:pos,ty/ppron12:sg:dat:m1.m2.m3.f.n1.n2:sec:nakc]"
        outputform="ci[ty/ppron12:sg:dat:m1.m2.m3.f.n1.n2:sec:nakc]">PAN: Ale potrzeba <marker>ci</marker> konia.</example>
        <example type="untouched">W elektroenergetyce zachodzi potrzeba transformacji napięcia.</example>

    </rule>

    <rule id="BRYLA_ZLOTA" name="złota jako rzeczownik">
        <pattern>
            <token regexp="yes" inflected="yes">bryła|bryłka|cena|garstka|góra|waga|piramida|kopalnia|sztuka|reszta</token>
            <marker>
                <token>złota</token>
            </marker>
        </pattern>
        <disambig postag="subst:sg:gen:n2"/>
        <example type="ambiguous" inputform="złota[złoto/subst:pl:acc:n2,złoto/subst:pl:nom:n2,złoto/subst:pl:voc:n2,złoto/subst:sg:gen:n2,złoty/adj:sg:nom.voc:f:pos]"
        outputform="złota[złoto/subst:sg:gen:n2]">Każda chwila była na wagę <marker>złota</marker>.</example>
    </rule>

    <rule id="UDALI" name="obaj udali - czasownik">
        <pattern>
            <token>obaj</token>
            <marker>
                <token postag="verb:praet:pl:m1.p1:ter:.*" postag_regexp="yes"/>
            </marker>
        </pattern>
        <disambig action="filterall"/>
    </rule>

    <rulegroup id="NUM_CONGR" name="liczebnik ze związkiem zgody">
        <rule>
            <pattern>
                <unify>
                    <feature id="case"/><feature id="number"/><feature id="gender"/>
                    <token postag="num.*:congr" postag_regexp="yes"/>
                    <token postag="num.*:congr" postag_regexp="yes"/>
                    <token postag="num.*:congr" postag_regexp="yes"/>
                    <token postag="(subst|adj|pact|ppas).*" postag_regexp="yes"/>
                </unify>
            </pattern>
            <disambig action="unify"/>
            <example type="untouched">Chyba nie chcesz, żebyśmy się rozdziały przy ludziach?</example>
            <example type="ambiguous" inputform="mężczyzn[mężczyzna/subst:pl:acc:m1,mężczyzna/subst:pl:gen:m1]"
                     outputform="mężczyzn[mężczyzna/subst:pl:gen:m1]">Stu czterdziestu ośmiu <marker>mężczyzn</marker> jadło lody.</example>
        </rule>
        <rule>
            <pattern>
                <unify>
                    <feature id="case"/><feature id="number"/><feature id="gender"/>
                    <token postag="num.*:congr" postag_regexp="yes"/>
                    <token postag="num.*:congr" postag_regexp="yes"/>
                    <token postag="(subst|adj|pact|ppas).*" postag_regexp="yes"/>
                </unify>
            </pattern>
            <disambig action="unify"/>
            <example type="untouched">Chyba nie chcesz, żebyśmy się rozdziały przy ludziach?</example>
            <example type="ambiguous" inputform="mężczyzn[mężczyzna/subst:pl:acc:m1,mężczyzna/subst:pl:gen:m1]"
                     outputform="mężczyzn[mężczyzna/subst:pl:gen:m1]">Czterdziestu ośmiu <marker>mężczyzn</marker> jadło lody.</example>
        </rule>
        <rule>
            <pattern>
                <unify>
                    <feature id="case"/><feature id="number"/><feature id="gender"/>
                    <token postag="num.*:congr" postag_regexp="yes"/>
                    <token postag="(subst|adj|pact|ppas).*" postag_regexp="yes"/>
                </unify>
            </pattern>
            <disambig action="unify"/>
            <example type="untouched">Chyba nie chcesz, żebyśmy się rozdziały przy ludziach?</example>
            <example type="ambiguous" inputform="rozdziały[rozdziać/verb:praet:pl:m2.m3.f.n1.n2.p2.p3:ter:perf:refl.nonrefl,rozdział/subst:pl:acc:m3,rozdział/subst:pl:nom:m3,rozdział/subst:pl:voc:m3]"
                     outputform="rozdziały[rozdział/subst:pl:acc:m3,rozdział/subst:pl:nom:m3,rozdział/subst:pl:voc:m3]">Dwa <marker>rozdziały</marker> książki.</example>
        </rule>
    </rulegroup>

    <rule id="NUM_SUBST_GEN" name="gen, też sg po num:rec">
        <pattern>
            <marker>
                <token postag="num.*:rec|subst:.*" postag_regexp="yes" regexp="yes">dużo|mało|mnóstwo|parę|trochę|część|niewiele|wiele|kilka|ćwierć|para</token>
                <token postag="(?:adj|ger|subst).*gen.*" postag_regexp="yes"/>
            </marker>
        </pattern>
        <disambig action="filterall"/>
        <example type="untouched">Mam wiele do zrobienia.</example>
        <example type="ambiguous" inputform="ludzi[człowiek/subst:pl:acc:m1,człowiek/subst:pl:gen:m1,ludzie/subst:pl:acc:p1,ludzie/subst:pl:gen:p1]" outputform="ludzi[człowiek/subst:pl:gen:m1,ludzie/subst:pl:gen:p1]">Tu było mnóstwo <marker>ludzi</marker>.</example>
    </rule>

    <rule id="WIECEJ_MNIEJ_NIZ" name="com + niż > conj">
        <pattern>
            <token postag=".*:com" postag_regexp="yes"/>
            <marker><token>niż</token></marker>
        </pattern>
        <disambig postag="conj"/>
    </rule>

    <rule id="POLTORA_GEN" name="półtora z dopełniaczem">
        <pattern>
            <unify><feature id="gender"/>
                <token inflected="yes">półtora</token>
                <token postag=".*sg:gen.*" postag_regexp="yes"/>
            </unify>
        </pattern>
        <disambig action="unify"/>
        <example type="ambiguous" inputform="godziny[godzina/subst:pl:acc:f,godzina/subst:pl:nom:f,godzina/subst:pl:voc:f,godzina/subst:sg:gen:f]"
                 outputform="godziny[godzina/subst:sg:gen:f]">Trwało to półtorej <marker>godziny</marker>.</example>
    </rule>

    <rule id="POL_GEN" name="pół z dopełniaczem">
        <pattern>
            <token postag="num:pl:nom.gen.dat.inst.acc.loc.voc:m1.m2.m3.f.n1.n2.p1.p2:rec" regexp="yes">pół|ćwierć</token>
            <token postag="(?:subst|adj|pact|ppas):sg:gen.*" postag_regexp="yes"/>
        </pattern>
        <disambig action="filterall"/>
    </rule>

    <rule id="NUM_REC" name="gen pl po liczebniku bez związku zgody">
        <pattern>
            <marker>
                <token postag="num.*:rec" postag_regexp="yes"><exception>jeden</exception><exception regexp="yes">siła|moc</exception></token>
                <token postag="(?:adj|ger|subst):pl.*gen.*" postag_regexp="yes">
                    <exception regexp="yes">wat|gram|amper|kilowat|kilogram|kiloamper|wolt|kilowolt|złoty|kilometr|metr|centymetr</exception>
                </token>
            </marker>
        </pattern>
        <disambig action="filterall"/>
        <example type="untouched">Mam wiele do zrobienia.</example>
        <example type="ambiguous" inputform="ludzi[człowiek/subst:pl:acc:m1,człowiek/subst:pl:gen:m1,ludzie/subst:pl:acc:p1,ludzie/subst:pl:gen:p1]" outputform="ludzi[człowiek/subst:pl:gen:m1,ludzie/subst:pl:gen:p1]">Tu było tysiąc <marker>ludzi</marker>.</example>
    </rule>

    <rule name="tym + com" id="tym_com"> <!-- W NKJP czasem conj, czasem adv... -->
        <pattern>
            <marker>
                <token postag="adv">tym</token>
                <token postag_regexp="yes" postag="ad[vj].*:com"/>
            </marker>
        </pattern>
        <disambig action="filterall"/>
        <example type="untouched">Tym przypadkiem nie będziemy się zajmować.</example>
        <example type="ambiguous" inputform="Tym[Tym/subst:sg:nom:m1,ten/adj:pl:dat:m1.m2.m3.f.n1.n2.p1.p2.p3:pos,ten/adj:sg:inst:m1.m2.m3.n1.n2:pos,ten/adj:sg:loc:m1.m2.m3.n1.n2:pos,to/subst:sg:inst:n2,to/subst:sg:loc:n2,tym/adv,tym/conj]"
                 outputform="Tym[tym/adv]"><marker>Tym</marker> lepiej!</example>
    </rule>

    <rule name="im + com" id="im_com">
        <pattern>
            <marker>
                <token postag="comp">im</token>
                <token postag_regexp="yes" postag="ad[vj].*:com"/>
            </marker>
        </pattern>
        <disambig action="filterall"/>
        <example type="untouched">Szkoła im. Jadwigi Nowak</example>
        <example type="ambiguous" inputform="im[im/comp,imienia/brev:pun,imiesłów/brev:pun,on/ppron3:pl:dat:m1.m2.m3.f.n1.n2.p1.p2.p3:ter:akc.nakc:npraep]"
                 outputform="im[im/comp]">A <marker>im</marker> wyżej, tym lepiej.</example>
    </rule>

    <rule id="SPORO_NUM_GEN" name="gen po sporo/num">
        <pattern>
            <marker>
                <token postag="num.*" postag_regexp="yes">sporo</token>
                <token postag="(?:adj|ger|subst).*gen.*" postag_regexp="yes"/>
            </marker>
        </pattern>
        <disambig action="filterall"/>
    </rule>

    <rule id="WIEKSZOSC_GEN" name="gen po większość/mniejszość">
        <pattern>
            <token regexp="yes" inflected="yes">mniejszość|większość|dziesiątka|setka|tysiąc|milion|miliard</token>
            <marker>
                <token postag="(?:adj|ger|subst|pact|ppas):pl.*gen.*" postag_regexp="yes"/>
            </marker>
        </pattern>
        <disambig action="filterall"/>
    </rule>

    <rule id="num_fract_gen" name="dopełniacz po liczbach ułamkowych">
        <pattern>
            <token regexp="yes">\d</token>
            <token spacebefore="no">,</token>
            <token spacebefore="no" regexp="yes">\d+</token>
            <marker>
                <token postag="(?:adj|ger|subst|pact|ppas):sg.*gen.*" postag_regexp="yes"/>
            </marker>
        </pattern>
        <disambig action="filterall"/>
        <example type="ambiguous" inputform="metra[metr/subst:sg:acc:m1,metr/subst:sg:gen:m1,metr/subst:sg:gen:m3,metro/subst:pl:acc:n2,metro/subst:pl:nom:n2,metro/subst:pl:voc:n2,metro/subst:sg:gen:n2,metrum/subst:pl:acc:n2,metrum/subst:pl:nom:n2,metrum/subst:pl:voc:n2]"
                 outputform="metra[metr/subst:sg:gen:m1,metr/subst:sg:gen:m3,metro/subst:sg:gen:n2]">
            W skład zestawu oprócz butelki o pojemności 0,7 <marker>metra</marker> szcześciennego wchodzą cukier trzcinowy, tłuczek oraz dwie szklanki do serwowania drinków.
        </example>
    </rule>


    <rule id="num_gen" name="dopełniacz po liczbach > 5">
        <pattern>
            <token regexp="yes">\d*[5-9]|\d+0|1[1-9]
                <exception scope="previous" inflected="yes">rok</exception>
                <exception regexp="yes">1\d{3}</exception>
            </token>
            <marker>
                <token postag="(?:adj|ger|subst|pact|ppas):pl.*gen.*|brev.*" postag_regexp="yes"/>
            </marker>
        </pattern>
        <disambig action="filterall"/>
        <example type="untouched">Do teorii ruchów Browna wiele wniósł w latach 1906–1917 Marian Smoluchowski.</example>
    </rule>

    <rule id="num_tys_gen" name="dopełniacz po liczbach > 5 ze skrótem tys.">
        <pattern>
            <token regexp="yes">\d*[5-9]|\d+0|1[1-9]</token>
            <token>tys</token>
            <token>.</token>
            <marker>
                <token postag="(?:adj|ger|subst|pact|ppas):pl.*gen.*" postag_regexp="yes"/>
            </marker>
        </pattern>
        <disambig action="filterall"/>
    </rule>

    <rule id="num_proc_gen" name="dopełniacz po liczbach ze skrótem proc.">
        <pattern>
            <token regexp="yes">\d+</token>
            <token>proc</token>
            <token>.</token>
            <marker>
                <token postag="(?:adj|ger|subst|pact|ppas):.*gen.*" postag_regexp="yes"/>
            </marker>
        </pattern>
        <disambig action="filterall"/>
    </rule>

    <rule id="num_proc_symbol_gen" name="dopełniacz po liczbach ze znakiem procenta">
        <pattern>
            <token regexp="yes">\d+%</token>
            <marker>
                <token postag="(?:adj|ger|subst|pact|ppas):.*gen.*" postag_regexp="yes"/>
            </marker>
        </pattern>
        <disambig action="filterall"/>
    </rule>

    <rule id="num_proc_verb" name="po liczbie procentowej wystąpi raczej czasownik, jeśli to niezgodny rzeczownik lub przymiotnik">
        <pattern>
        <token regexp="yes">\d+%</token>
        <marker>
            <and>
                <token postag="verb:.*(sg|pl).*" postag_regexp="yes"/>
                <token postag="(?:adj|subst):.*nom.*" postag_regexp="yes">
                    <exception postag="adj:.*:com|(?:adj|subst).*gen.*" postag_regexp="yes"/>
                </token>
            </and>
        </marker>
        </pattern>
        <disambig action="filter" postag="verb:.*(sg|pl).*"/>
        <example type="untouched">Produkt był o 10% gorszy.</example>
        <example type="ambiguous" inputform="wzrosła[wzrosnąć/verb:praet:sg:f:ter:perf:nonrefl,wzrosły/adj:sg:nom.voc:f:pos,wzrość/verb:praet:sg:f:ter:perf:nonrefl]" outputform="wzrosła[wzrosnąć/verb:praet:sg:f:ter:perf:nonrefl,wzrość/verb:praet:sg:f:ter:perf:nonrefl]">Mimo to dopiero po pojawieniu się serwisu genialnego imiennika z 42% do 88% <marker>wzrosła</marker> liczba firm korzystających z social media do celów marketingowych.</example>
    </rule>

    <rule id="sto_gram" name="sto gram wódki">
        <pattern>
            <token regexp="yes">100|sto</token>
            <marker>
                <token>gram</token>
            </marker>
        </pattern>
        <disambig postag="subst:sg:gen:m3"/>
    </rule>

    <rule id="num_wzrosly" name="liczebnik + wzrosły, spadły...">
        <pattern>
            <token postag='num:pl.*:rec' postag_regexp='yes'>
                <exception regexp='yes'>jeden|pół|najmniej|tyleż?|ileż?|wiel[ue]|mało|mniej|moc|nieco</exception>
                <exception postag='adv.*|qub' postag_regexp='yes'></exception>
            </token>
            <marker>
                <and>
                    <token postag="verb:praet:.*:ter:.*" postag_regexp="yes"/>
                    <token postag="adj:sg:nom.voc:.*|subst:sg:nom:n2|adj:pl:nom.voc:m1.p1:pos" postag_regexp="yes"/>
                </and>
            </marker>
        </pattern>
        <disambig action="filter" postag="verb:praet:.*:ter:.*"/>
        <example type="ambiguous" inputform="spadły[spadły/adj:sg:acc:m3:pos,spadły/adj:sg:nom.voc:m1.m2.m3:pos,spaść/verb:praet:pl:m2.m3.f.n1.n2.p2.p3:ter:perf:nonrefl]"
                 outputform="spadły[spaść/verb:praet:pl:m2.m3.f.n1.n2.p2.p3:ter:perf:nonrefl]">Dwóch <marker>spadły</marker>: PPJ 7 (o 0,2 proc.).</example>
    </rule>

    <rule id="oboje_numcol_verbter" name="oboje byli => czasownik">
        <pattern>
            <token skip="5" postag="num:pl:nom.acc.voc:n1.p1.p2:rec">oboje
                <exception scope="next" postag="(subst|ger|pact|ppas):pl:gen.*" postag_regexp="yes"/>
            </token>
            <marker>
            <token postag="verb:praet:pl:m1.p1:ter.*|verb:fin:pl:ter.*" postag_regexp="yes"/>
            </marker>
        </pattern>
        <disambig action="filterall"/>
    </rule>

    <rule id="oboje_mamy" name="oboje + mamy => czasownik">
        <pattern>
            <marker>
                <token postag="num:pl:nom.acc.voc:n1.p1.p2:rec">oboje</token>
                <token postag="verb:fin:pl:pri:imperf:refl.nonrefl">mamy</token>
                <token postag=".*acc.*" postag_regexp="yes"/>
            </marker>
        </pattern>
        <disambig action="filterall"/>
    </rule>

    <rule id="oboje_congr" name="oboje występuje z przymiotnikami l.m. w związku zgody!">
        <pattern> <!-- oboje ma składnię zgody z przymiotnikiem l.m. u najlepszych pisarzy…, np. Rozeszli się, oboje zagniewani. -->
            <marker>
                <token>oboje</token>
            </marker>
            <token postag="(?:adj|ppas|pact):pl:nom.voc:m1.p1.*" postag_regexp="yes"/>
        </pattern>
        <disambig action="replace"><wd lemma="oba" pos="num:pl:nom.voc:m1:congr"/></disambig>
    </rule>

    <rule id="jaki_mamy" name="jaki + mamy => czasownik">
        <pattern>
            <marker>
                <token postag="adj.*acc.*" postag_regexp="yes" inflected="yes">jaki</token>
                <token postag="verb:fin:pl:pri:imperf:refl.nonrefl">mamy</token>
            </marker>
        </pattern>
        <disambig action="filterall"/>
    </rule>

    <rule id="NAPOJ_WYROB" name="napój/wyrób + przymiotnik -> rzeczownik">
        <pattern>
            <marker>
            <unify>
                <feature id="number"><type id="sg"/></feature>
                <feature id="gender"><type id="m3"/></feature><feature id="case"/>
                    <token regexp="yes">napój|wyrób</token>
                     <token postag="(adj|pact).*" postag_regexp="yes"/>
            </unify>
            </marker>
        </pattern>
        <disambig action="unify"/>
        <example type="untouched">Napój swojego konia!</example>
        <example type="ambiguous" inputform="Napój[napoić/verb:impt:sg:sec:perf:refl.nonrefl,napój/subst:sg:acc:m3,napój/subst:sg:nom:m3]" outputform="Napój[napój/subst:sg:acc:m3,napój/subst:sg:nom:m3]"><marker>Napój</marker> miłosny</example>
    </rule>

    <rule id="caly_czas_nkjp" name="cały czas -> biernik">
        <pattern>
            <token postag="adj:sg:acc:m3:pos">cały</token>
            <token postag="subst:sg:acc:m3">czas</token>
        </pattern>
        <disambig action="filterall"/>
    </rule>

    <rule id="na_tyle" name="na tyle + adj|adv -> adv">
        <pattern>
            <token>na</token>
            <marker><token postag="adv">tyle</token></marker>
            <token postag="ad[jv].*" postag_regexp="yes"/>
        </pattern>
        <disambig postag="adv"/>
        <example type="ambiguous" inputform="tyle[tyle/adv,tyle/num:pl:nom.acc.voc:m2.m3.f.n1.n2.p1.p2:rec,tyle/num:pl:nom.acc:m1.m2.m3.f.n1.n2.p1.p2:rec,tyli/adj:pl:acc:m2.m3.f.n1.n2.p2.p3:pos,tyli/adj:pl:nom.voc:m2.m3.f.n1.n2.p2.p3:pos,tyli/adj:sg:acc:n1.n2:pos,tyli/adj:sg:nom.voc:n1.n2:pos,tył/subst:sg:loc:m3,tył/subst:sg:voc:m3]"
                 outputform="tyle[tyle/adv]">Gdy Mowgli był już na <marker>tyle</marker> silny, by móc znosić szorstką nieco musztrę...</example>
    </rule>

    <rule id="na_tyle_tyli" name="tyle to nie tyli">
        <pattern>
            <token postag="prep:acc">na</token>
            <token postag="adv|num.*" postag_regexp="yes">tyle</token>
        </pattern>
        <disambig action="filterall"/>
    </rule>

    <!-- rule id="na_tyle_num" name="na tyle + subst -> num">
        <pattern>
            <token>na</token>
            <unify>
                <feature id="gender"/><feature id="number"/>
                <marker>
                    <token>tyle</token>
                    <token postag="subst:pl.*gen.*" postag_regexp="yes"></token>
                </marker>
            </unify>
        </pattern>
        <disambig action="unify"/>
        <example type="ambiguous" inputform="tyle[tyle/adv,tyle/num:pl:nom.acc.voc:m2.m3.f.n1.n2.p1.p2:rec,tyle/num:pl:nom.acc:m1.m2.m3.f.n1.n2.p1.p2:rec]"
                 outputform="tyle[tyle/num:pl:nom.acc.voc:m2.m3.f.n1.n2.p1.p2:rec,tyle/num:pl:nom.acc:m1.m2.m3.f.n1.n2.p1.p2:rec]">Kleks radzi sobie z gotowaniem na <marker>tyle</marker> osób.</example>
    </rule -->

    <rule id="prep_gen_co" name="co to nie genetiwus po przyimku">
        <pattern>
            <token postag="prep:gen.*" postag_regexp="yes"/>
            <marker><token postag="subst:sg:gen:n2">co</token></marker>
        </pattern>
        <disambig action="remove" postag="subst:sg:gen:n2"/>
    </rule>

    <rulegroup name="Przyimek z rzeczownikiem, poprzedzony zaimkiem w funkcji dzierżawczej" id="PREP_PPRON_SUBST"> <!-- z zaimkiem w środku -->
        <rule>
            <pattern>
                <unify> <feature id="case"/>
                    <token postag="prep.*" postag_regexp="yes"><exception postag="prep.*" negate_pos="yes" postag_regexp="yes"/><exception>co</exception></token>
                    <unify-ignore>
                        <token regexp="yes">jego|ich|jej</token>
                    </unify-ignore>
                    <token postag="(?:adj|depr|ger|num|subst|ppas|pact):.*" postag_regexp="yes"><exception>co</exception><exception postag="qub"/></token>
                </unify>
            </pattern>
            <disambig action="unify"/>
            <example type="untouched">Tu mamy piękny przykład.</example>
            <example type="untouched">Łaciny używamy na co dzień.</example>
            <example type="ambiguous" inputform="samoloty[samolot/subst:pl:acc:m3,samolot/subst:pl:nom:m3,samolot/subst:pl:voc:m3]"
                     outputform="samoloty[samolot/subst:pl:acc:m3]">Patrzę na jej <marker>samoloty</marker>.</example>
        </rule>
        <rule>
            <pattern>
                <unify> <feature id="case"/>
                    <token postag="prep.*" postag_regexp="yes"><exception postag="prep.*" negate_pos="yes" postag_regexp="yes"/><exception>co</exception></token>
                    <unify-ignore>
                        <marker><token regexp="yes">jego|ich|jej</token></marker>
                    </unify-ignore>
                    <token postag="(?:adj|depr|ger|num|subst|ppas|pact):.*" postag_regexp="yes"><exception>co</exception><exception postag="qub"/></token>
                </unify>
            </pattern>
            <disambig action="filter" postag="ppron.*:gen:.*"/>
            <example type="ambiguous" inputform="jego[on/ppron3:sg:acc:m1.m2.m3:ter:akc:npraep,on/ppron3:sg:gen:m1.m2.m3:ter:akc:npraep,on/ppron3:sg:gen:n1.n2:ter:akc:npraep]"
                     outputform="jego[on/ppron3:sg:gen:m1.m2.m3:ter:akc:npraep,on/ppron3:sg:gen:n1.n2:ter:akc:npraep]">Patrzę na <marker>jego</marker> samoloty.</example>
        </rule>
    </rulegroup>

    <!-- reguły potrzebne do działania reguły NIE_RZECZOWNIK -->
    <rule name="o nie + gerundium/acc" id="O_NIE_GER">
        <pattern>
            <marker>
                <token postag="prep:acc">o</token>
                <token postag="qub">nie</token>
                <token postag="ger:sg:nom.acc:n2.*" postag_regexp="yes"/>
            </marker>
        </pattern>
        <disambig action="filterall"/>
    </rule>

    <rule name="o nie + gerundium/loc" id="O_NIE_LOC">
        <pattern>
            <marker>
                <token postag="prep:loc">o</token>
                <token postag="qub">nie</token>
                <token postag="ger:sg:dat.loc:n2.*" postag_regexp="yes"></token>
            </marker>
        </pattern>
        <disambig action="filterall"/>
    </rule>

    <rule id="PO_NIESPODZIEWANIE" name="po niespodziewanie">
        <pattern>
            <token>po</token>
            <marker><token>niespodziewanie</token></marker>
        </pattern>
        <disambig postag="adv:pos"/>
        <example type="ambiguous" inputform="niespodziewanie[niespodziewanie/adv:pos,spodziewać/ger:sg:nom.acc:n2:imperf:neg:refl]"
                 outputform="niespodziewanie[niespodziewanie/adv:pos]">W lipcu 1940, po <marker>niespodziewanie</marker> łatwym zwycięstwie nad Francją...</example>
    </rule>

    <rule id="wynikac_z" name="wynikać + z => genetivus">
        <pattern>
            <token skip="-1" postag="SENT_START|interp:comma" postag_regexp="yes">
                <exception scope="next" postag="prep:gen.*" inflected="yes" postag_regexp="yes">z</exception>
            </token>
            <token inflected="yes">wynikać</token>
            <marker>
                <token inflected="yes">z</token>
            </marker>
        </pattern>
        <disambig action="filter" postag="prep:gen.*"/>
        <example type="untouched">ostateczna weryfikacja teorii poprzez konfrontację wniosków z niej wynikających z faktami.</example>
    </rule>

    <rulegroup name="połączenia który z rzeczownikami rządzącym jego przypadkiem" id="prep_ktory_subst">
        <rule>
            <pattern>
                <token postag="prep:loc">na</token>
                <token postag="adj.*gen.*" postag_regexp="yes" inflected="yes">który</token>
                <token postag="subst:sg:loc:f" regexp="yes">mocy|podstawie</token>
            </pattern>
            <disambig action="filterall"/>
            <example type="ambiguous" inputform="mocy[moc/subst:pl:gen:f,moc/subst:sg:dat:f,moc/subst:sg:gen:f,moc/subst:sg:loc:f,moc/subst:sg:voc:f]"
                     outputform="mocy[moc/subst:sg:loc:f]">Po niemal całonocnych negocjacjach o czwartej nad ranem zostało podpisane rosyjsko-czeczeńskie porozumienie, na którego <marker>mocy</marker> wczoraj zakończono działania zbrojne w zbuntowanej republice.</example>
        </rule>
        <rule> <!-- dodajemy fikcyjny znacznik, żeby oznaczyć ewentualną nadrzędność -->
            <pattern>
                <unify><feature id="gender"/><feature id="number"/>
                    <token skip="-1" postag="(?:subst|ger|depr):.*" postag_regexp="yes"/>
                    <marker>
                        <token inflected='yes' regexp='yes'>który|jaki</token>
                    </marker>
                </unify>
            </pattern>
            <disambig action="add"><wd pos="subord"/></disambig>
        </rule>
        <rule>
            <pattern>
                <token regexp="yes">[,ia—–]|albo|lub|bądź</token>
                <unify><feature id="case"/>
                <token postag="prep.*" postag_regexp="yes"/>
                <unify-ignore>
                    <and>
                    <token postag="adj.*gen.*" postag_regexp="yes" inflected="yes">który</token>
                    <token postag="subord"/>
                    </and>
                    <token min="0" max="1" postag="verb.*" postag_regexp="yes" inflected="yes" regexp="yes">&verb_non_transitive;</token>
                </unify-ignore>
                <token postag="(?:subst|depr|ger|adj|pact|ppas):.*" postag_regexp="yes">
                        <exception  postag="(?:subst|depr|ger|adj|pact|ppas):.*nom.*" postag_regexp="yes"></exception> <!-- podmiot? -->
                </token>
                </unify>
            </pattern>
            <disambig action="filterall"/>
        </rule>
        <rule> <!-- kaskada dwuetapowa -->
            <pattern>
                <token regexp="yes">[,ia—–]|albo|lub|bądź</token>
                <marker>
                <unify><feature id="case"/>
                    <token postag="prep.*" postag_regexp="yes"/>
                    <unify-ignore>
                        <and>
                            <token postag="adj.*gen.*" postag_regexp="yes" inflected="yes">który</token>
                            <token postag="subord"/>
                        </and>
                    </unify-ignore>
                    <token postag="(?:subst|depr|ger|adj|pact|ppas):.*" postag_regexp="yes">
                        <exception  postag="(?:subst|depr|ger|adj|pact|ppas):.*nom.*" postag_regexp="yes"></exception> <!-- podmiot? -->
                    </token>
                </unify>
                </marker>
            </pattern>
            <disambig action="unify"/>
        </rule>
        <rule>   <!-- czyszczenie znacznika "subord" -->
            <pattern>
                <token postag="subord"></token>
            </pattern>
            <disambig action="remove"><wd pos="subord"/></disambig>
        </rule>
    </rulegroup>

    <rulegroup name="prep + czasownik -> ~ czasownik" id="prep_verb">
        <!--  przyimki zawsze z tym samym przypadkiem --> 
        <rule>
            <pattern>
                <token postag="prep:[^\.]+" postag_regexp="yes"><exception>co</exception><exception>a</exception><exception>jak</exception></token>
                <marker>
                    <and>
                        <token><match no="0" postag_regexp="yes" postag="prep:(.*)" postag_replace="(ad[jv]|subst|ppron|num):[^ ]*$1[^ ]*" setpos="yes"/></token>
                        <token postag="verb.*" postag_regexp="yes"/>
                    </and>
                </marker>
            </pattern>
            <disambig action="filter" postag="adj.*|adv.*|subst.*|ppron.*|ger.*|num.*"/>
            <example type="untouched">Tu mamy piękny przykład sztuki barokowej.</example>
            <example type="untouched">A ma o czym marzyć.</example>
            <example type="ambiguous" inputform="mamy[mama/subst:pl:acc:f,mama/subst:pl:nom:f,mama/subst:pl:voc:f,mama/subst:sg:gen:f,mieć/verb:fin:pl:pri:imperf:refl.nonrefl]" outputform="mamy[mama/subst:pl:acc:f,mama/subst:pl:nom:f,mama/subst:pl:voc:f,mama/subst:sg:gen:f]">Spotykaliśmy się u <marker>mamy</marker>.</example>
        </rule>

       <rule>
       	<pattern>
       		<unify>
       			<feature id="case"/>
       			<token postag="prep:.*" postag_regexp="yes"><exception postag="prep.*|adv" negate_pos="yes" postag_regexp="yes"/></token>
                <token postag_regexp="yes" postag="(adj|subst|ger|ppron|pact|num).*"><exception regexp="yes">pewne|mniej|trochę|dużo</exception>
                    <exception postag=".*gen.*" inflected="yes" postag_regexp="yes">który</exception>
                </token>
       		</unify>
       	</pattern>
       	<disambig action="unify"/>
       	<example type="untouched">Oni mną papiery.</example>
       	<example type="ambiguous" inputform="mną[ja/ppron12:sg:inst:m1.m2.m3.f.n1.n2:pri,miąć/verb:fin:pl:ter:imperf:refl.nonrefl]" outputform="mną[ja/ppron12:sg:inst:m1.m2.m3.f.n1.n2:pri]">Oczywiście, że ze <marker>mną</marker>!</example>
           <example type="ambiguous" inputform="chęci[chęć/subst:pl:acc:f,chęć/subst:pl:gen:f,chęć/subst:pl:nom:f,chęć/subst:pl:voc:f,chęć/subst:sg:dat:f,chęć/subst:sg:gen:f,chęć/subst:sg:loc:f,chęć/subst:sg:voc:f]"
                    outputform="chęci[chęć/subst:sg:dat:f]">Żeglarze biegną w stronę wiatru i wbrew <marker>chęci</marker> nawracają wstecz.</example>
       </rule>
        <rule>
            <pattern>
                <unify>
                    <feature id="case"/>
                    <token postag="prep:.*" postag_regexp="yes"><exception postag="prep.*|adv" negate_pos="yes" postag_regexp="yes"/></token>
                    <token postag_regexp="yes" postag="pact.*:refl.*"><exception>pewne</exception></token>
                        <unify-ignore><token>się</token></unify-ignore>
                        <token postag_regexp="yes" postag="(adj|subst|ger).*"/>
                </unify>
            </pattern>
            <disambig action="unify"/>
            <example type="untouched">Oni mną papiery.</example>
            <example type="untouched">Oczywiście, że ze <marker>mną</marker>!</example>
            <example type="ambiguous" inputform="domów[dom/subst:pl:gen:m3,domówić/verb:impt:sg:sec:perf:refl.nonrefl]"
                     outputform="domów[dom/subst:pl:gen:m3]">Ludzie najemni wyładowują z tratew i dźwigają do budujących się <marker>domów</marker> nocami.</example>
        </rule>
    </rulegroup>

    <rule id="A_NON_PREP" name="a + czasownik -> nie przyimek">
        <pattern>
            <marker>
                <token postag="conj">a</token>
            </marker>
            <token postag="(?:verb|pcon|pact).*" postag_regexp="yes"/>
        </pattern>
        <disambig action="filterall"/>
    </rule>

    <rule id="MNIE" name="mnie to nie miąć; bardzo ostra reguła, ale praktycznie nie zdarza się w uzusie...">
        <pattern>
            <marker><token postag="verb:fin:sg:ter:imperf:refl.nonrefl">mnie</token></marker>
        </pattern>
        <disambig action="filter" postag="ppron12.*"/>
    </rule>
    
    <rule id="rozmaicie" name="rozmaicie to przysłówek; reguła bezwarunkowa, ale uzus naprawdę uzasadnia">
        <pattern>
            <marker><token>rozmaicie</token></marker>
        </pattern>
        <disambig postag="adv:pos"/>
    </rule>

    <rule id="stawac_nonrefl" name="stawać niezwrotne">
        <pattern>
            <marker><token regexp="yes" inflected="yes">stać|stawać<exception>stanie</exception></token></marker>
            <token regexp="yes">tyłem|profilem|kępami|bokiem|twarzą|otworem|okoniem|mi|go|we|rzędem|rzędami|pustkami|godzinami|kwadransami|kwaterą</token>
        </pattern>
        <disambig action="filter" postag=".*nonrefl.*"/>
        <example type="untouched">Karol, który stał się aktorem.</example>
        <example type="ambiguous" inputform="stały[stać/verb:praet:pl:m2.m3.f.n1.n2.p2.p3:ter:imperf:nonrefl,stać/verb:praet:pl:m2.m3.f.n1.n2.p2.p3:ter:perf:refl,stały/adj:sg:acc:m3:pos,stały/adj:sg:nom.voc:m1.m2.m3:pos]"
                 outputform="stały[stać/verb:praet:pl:m2.m3.f.n1.n2.p2.p3:ter:imperf:nonrefl]">Piwnice <marker>stały</marker> pustkami.</example>
    </rule>


    <rule id="bardzo_wolno" name="bardzo wolno to nie predykatyw">
        <pattern>
            <token>bardzo</token>
            <marker><token>wolno</token></marker>
        </pattern>
        <disambig postag="adv:pos"/>
        <example type="untouched">Co wolno wojewodzie, to nie tobie, dziki smrodzie!</example>
        <example type="ambiguous" inputform="wolno[wolno/adv:pos,wolno/pred]"
                 outputform="wolno[wolno/adv:pos]">Trzeba się tam posuwać bardzo <marker>wolno</marker>.</example>
    </rule>

    <rule id="PO_ADJP" name="po polsku">
        <pattern>
            <token>po</token>
            <token postag="adjp"/>
        </pattern>
        <disambig postag="prep:loc"/>
    </rule>

    <rule id="OBOK_ADV" name="eliminacja obok:prep">
        <pattern>
            <marker>
                <token regexp="yes">obok|wokół</token>
            </marker>
            <token regexp="yes">[,.;]</token>
        </pattern>
        <disambig postag="adv"/>
    </rule>

    <rule id="HANDLARZE_BRONIA" name="handlarze bronią => rzeczownik">
        <pattern>
            <token inflected="yes" regexp="yes">handlarz|zagrożenie|władanie|gospodarowanie</token>
            <marker><token>bronią</token></marker>
        </pattern>
        <disambig postag="subst:sg:inst:f"/>
    </rule>

    <rule id="BRONIA" name="bronią + przymiotnik -> rzeczownik">
        <pattern>
            <unify>
                <feature id="case"/><feature id="number"/><feature id="gender"/>
                <token>bronią</token>
                <token postag="(?:adj|pact|ppas|subst).*" postag_regexp="yes"/>
            </unify>
        </pattern>
        <disambig action="unify"/>
        <example type="ambiguous" inputform="bronią[bronić/verb:fin:pl:ter:imperf:refl.nonrefl,broń/subst:sg:inst:f]"
                 outputform="bronią[broń/subst:sg:inst:f]">Chwalił się <marker>bronią</marker> asyryjską.</example>
    </rule>


    <rulegroup id="MAJA_ONE_1" name="czasownik pl + one - zaimek">
        <rule>
            <pattern>
                <token postag="verb.*pl.*:ter.*" postag_regexp="yes"/>
                <token postag="ppron3:pl:nom:m2.m3.f.n1.n2.p2.p3:ter:akc.nakc:praep.npraep">one</token>
            </pattern>
            <disambig action="filterall"/>
            <example type="ambiguous" inputform="one[on/adj:pl:acc:m2.m3.f.n1.n2.p2.p3:pos,on/adj:pl:nom.voc:m2.m3.f.n1.n2.p2.p3:pos,on/ppron3:pl:nom:m2.m3.f.n1.n2.p2.p3:ter:akc.nakc:praep.npraep]"
                     outputform="one[on/ppron3:pl:nom:m2.m3.f.n1.n2.p2.p3:ter:akc.nakc:praep.npraep]">Mają <marker>one</marker> niemałe znaczenie.
            </example>
        </rule>
        <rule>
            <pattern>
                <token postag="ppron3:pl:nom:m2.m3.f.n1.n2.p2.p3:ter:akc.nakc:praep.npraep">one</token>
                <token postag="verb.*pl.*:ter.*" postag_regexp="yes"><exception inflected="yes">gotów</exception></token>
            </pattern>
            <disambig action="filterall"/>
        </rule>
    </rulegroup>

    <rule id="verb_adjverb_adj" name="czasownik + czasownik/adv -> adv">
        <pattern>
            <token postag_regexp="yes" postag="verb:.*"/>
            <marker>
                <and>
                    <token postag="verb.*" postag_regexp="yes"><exception postag_regexp="yes" postag="(?:ger|prep).*"/><exception postag="verb.*inf" postag_regexp="yes"/><exception>wręcz</exception></token>
                    <token postag="adv.*" postag_regexp="yes"/>
                </and>
            </marker>
        </pattern>
        <disambig action="filter" postag="adv.*"/>
        <example type="ambiguous" inputform="śmiało[śmiać/verb:praet:sg:n1.n2:ter:imperf:refl,śmiało/adv:pos,śmieć/verb:praet:sg:n1.n2:ter:imperf:nonrefl]"
                 outputform="śmiało[śmiało/adv:pos]">Chodź <marker>śmiało</marker>.</example>
        <example type="untouched">Zaczęła wręcz nawoływać do utworzenia wspólnej listy.</example>
    </rule>

    <rule name="Warsz" id="IMIE_WARSZ">
        <pattern case_sensitive="yes">
            <token inflected="yes">imię</token>
            <marker><token>Warsz</token></marker>
        </pattern>
        <disambig action="replace"><wd lemma="Warsz" pos="subst:sg:nom.voc:m1"/></disambig>
    </rule>

    <rule id="zostanie_ppas" name="zostanie + ppas => verb">
        <pattern>
            <marker><token>zostanie</token></marker>
            <token postag_regexp="yes" postag="ppas.*[\.:]perf.*"/>
        </pattern>
        <disambig postag="verb:fin:sg:ter:perf:refl.nonrefl"/>
        <example type="untouched">Doradziłem mu zostanie w domu.</example>
        <example type="ambiguous" inputform="zostanie[zostać/ger:sg:nom.acc:n2:perf:aff:refl.nonrefl,zostać/verb:fin:sg:ter:perf:refl.nonrefl]"
        outputform="zostanie[zostać/verb:fin:sg:ter:perf:refl.nonrefl]">Spośród planowanych kilkunastu stanowisk wiceprezydentów parę <marker>zostanie</marker> obsadzonych przez PC i KK.</example>
    </rule>

    <rule id="PO_DZIS_DZIEN" name="po dziś dzień - wersja z ręcznie anotowanego NKJP">
        <pattern>
            <token postag="prep:acc">po</token>
            <token postag="subst:sg:acc:n2">dziś</token>
            <token postag="subst:sg:acc:m3">dzień</token>
        </pattern>
        <disambig action="filterall"/>
    </rule>

    <rule id="PREP_LADA_QUB" name="lada jako kublik">
        <pattern>
            <token postag="prep.*" postag_regexp="yes"><exception postag="prep:nom.*" postag_regexp="yes"/></token>
            <marker>
                <token>lada</token>
            </marker>
        </pattern>
        <disambig postag="qub"/>
        <example type="ambiguous" inputform="lada[lada/prep:nom,lada/qub,lada/subst:sg:nom:f]"
                 outputform="lada[lada/qub]">Rozmawiali o <marker>lada</marker> błahostce.</example>
    </rule>

    <rule id="LADA_CO" name="lada co jako kublik">
        <pattern>
            <token postag="qub">lada</token>
            <token postag="subst.*" postag_regexp="yes" inflected="yes">co</token>
        </pattern>
        <disambig action="filterall"/>
        <example type="ambiguous" inputform="lada[lada/prep:nom,lada/qub,lada/subst:sg:nom:f]"
                 outputform="lada[lada/qub]">Zajmują się <marker>lada</marker> czym.</example>
    </rule>

    <rule id="NIE_LADA" name="nie lada jako kublik">
        <pattern>
            <token postag="qub">nie</token>
            <token postag="qub">lada</token>
        </pattern>
        <disambig action="filterall"/>
    </rule>

    <rule id="LADA_CHWILA" name="lada chwila jako prep">
        <pattern>
            <token postag="prep:nom">lada</token>
            <token postag="subst.*nom.*" postag_regexp="yes" regexp="yes">chwila|moment|dzień</token>
        </pattern>
        <disambig action="filterall"/>
    </rule>

    <rule id="SKLADAC_DZIEKI" name="składać dzięki > nie prep">
        <pattern>
            <token inflected="yes">składać</token>
            <marker><token>dzięki</token></marker>
        </pattern>
        <disambig action="filter" postag="subst:pl:acc:p3"/>
    </rule>

    <rule id="PAN_BOG" name="unifikacja „Pan Bóg">
    <pattern case_sensitive="yes">
        <unify>
            <feature id="gender"><type id="m1"/></feature>
            <feature id="number"/><feature id="case"/>
            <token inflected="yes">pan</token>
            <token inflected="yes">bóg</token>
        </unify>
    </pattern>
    <disambig action="unify"/>
        <example type="ambiguous" inputform="Boże[boży/adj:pl:acc:m2.m3.f.n1.n2.p2.p3:pos,boży/adj:pl:nom.voc:m2.m3.f.n1.n2.p2.p3:pos,boży/adj:sg:acc:n1.n2:pos,boży/adj:sg:nom.voc:n1.n2:pos,bóg/subst:sg:voc:m1]" outputform="Boże[bóg/subst:sg:voc:m1]">— Panie <marker>Boże</marker>, który byłeś zawżdy moim opiekunem i obrońcą, widzisz oto nieszczęście, które dybie na mnie.</example>
    </rule>

    <rule id="BOGU_DZIEKI" name="Bogu dzięki > nie prep">
        <pattern case_sensitive="yes">
            <token skip="-1">Bogu</token>
            <marker><token>dzięki</token></marker>
        </pattern>
        <disambig action="filter" postag="subst:pl:nom:p3"/>
        <example type="ambiguous" outputform="dzięki[dzięki/subst:pl:nom:p3]" inputform="dzięki[dzięk/subst:pl:acc:m3,dzięk/subst:pl:nom:m3,dzięk/subst:pl:voc:m3,dzięka/subst:pl:acc:f,dzięka/subst:pl:nom:f,dzięka/subst:pl:voc:f,dzięka/subst:sg:gen:f,dzięki/prep:dat,dzięki/subst:pl:acc:p3,dzięki/subst:pl:nom:p3,dzięki/subst:pl:voc:p3]">Bogu Najwyższemu niechaj będą <marker>dzięki</marker>, że nas tu w łasce swojej raczył obrócić!</example>
    </rule>

    <rule id="DZIEKI_COMMA" name="dzięki + przecinek > nie prep">
        <pattern>
            <marker><token postag="prep:dat">dzięki</token></marker>
            <token regexp="yes">[:,;!]</token>
        </pattern>
        <disambig action="remove" postag="prep:dat"/>
    </rule>

    <rule id="ROLA_SUBST_GEN" name="rola X-a > genetivus">
    <pattern>
        <token inflected="yes">rola</token>
        <marker>
            <token postag=".*gen.*" postag_regexp="yes">
                    <exception postag="verb.*" postag_regexp="yes"/>
            </token>
        </marker>
    </pattern>
    <disambig action="filterall"/>
    </rule>


    <rule id="ZONA_KAPITANA" name="żona kapitana > to nie nom.">
        <pattern>
            <token inflected="yes">żona</token>
            <marker>
                <token>kapitana</token>
            </marker>
        </pattern>
        <disambig postag="subst:sg:gen:m1"/>
        <example type="untouched">W porcie stoi kapitana.</example>
        <example type="ambiguous" inputform="kapitana[kapitan/subst:sg:acc:m1,kapitan/subst:sg:gen:m1,kapitana/subst:sg:nom:f]"
                 outputform="kapitana[kapitan/subst:sg:gen:m1]">Czy jest żoną <marker>kapitana</marker>?</example>
    </rule>

    <rule id="KAPITANA_OKRETU" name="kapitana to kapitan">
        <pattern>
            <marker>
                <token postag="subst:sg.*m1" postag_regexp="yes" inflected="yes">kapitan</token>
                <token regexp="yes" postag="subst:sg.*gen.*" postag_regexp="yes">okrętu|reprezentacji|drużyny|żeglugi|statku|kutra|policji|milicji</token>
            </marker>
        </pattern>
        <disambig action="filterall"/>
        <example type="untouched">W porcie stoi kapitana.</example>
        <example type="ambiguous" inputform="kapitana[kapitan/subst:sg:acc:m1,kapitan/subst:sg:gen:m1,kapitana/subst:sg:nom:f]"
                 outputform="kapitana[kapitan/subst:sg:acc:m1,kapitan/subst:sg:gen:m1]">Czy zastałem <marker>kapitana</marker> okrętu?</example>
    </rule>

    <rule id="TEREN_NIEMIEC" name="teren/potęga Niemiec">
        <pattern case_sensitive="yes">
            <token inflected="yes" regexp="yes">teren|potęga|król|przyszłość|zwycięstwo|przykład|władca|sąsiad|północ|mieszkaniec|przywódca|drużyna|zjednoczenie|jedność|wpływ|odpowiedzialność|wielkość|kanclerz|remilitaryzacja|kapitulacja|podział|landy|ambasada|obywatelka|obywatel|reprezentant|stolica|granica|udział|zachód|wschód|ambasador|dzieje|cesarz|hegemonia|sojusznik|agresja|dominacja|terytorium|ekspansja|prezydent|koszt|historia|episkopat|wróg|atak|pozycja|puchar|rola|plan|polityka|przedstawiciel|obszar|konstytucja|region|gospodarka|scena</token>
            <marker>
                <token>Niemiec</token>
            </marker>
        </pattern>
        <disambig postag="subst:pl:gen:p3"/>
    </rule>

    <rule id="KSIADZ_SUBST" name="ksiądz kanonik, proboszcz, biskup">
        <pattern>
            <unify>
                <feature id="gender"><type id="m1"/></feature>
                <feature id="number"/><feature id="case"/>
                <token inflected="yes">ksiądz</token>
                <token inflected="yes" regexp="yes">kanonik|biskup|proboszcz|prałat|prymas|werbista|kapelan|profesor|katecheta|dziekan|misjonarz|jezuita|arcybiskup|marianin</token>
            </unify>
        </pattern>
        <disambig action="unify"/>
    </rule>

    <rule id="panowie" name="pan Jan Kowalski">
        <pattern>
            <unify>
            <feature id="gender"><type id="m1"/></feature>
            <feature id="number"/><feature id="case"/>
            <token postag="subst:sg:.*" postag_regexp="yes"/>
            <token postag="subst:sg:.*" postag_regexp="yes" regexp="yes">\p{Lu}\p{Ll}+</token>
            <token postag="subst:sg:.*" postag_regexp="yes" regexp="yes">\p{Lu}\p{Ll}+</token>
            </unify>
        </pattern>
        <disambig action="unify"></disambig>
    </rule>

    <rule id="Marian" name="Marian to imię, jeśli jest nazwisko">
        <pattern case_sensitive="yes">
            <marker>
                <token>Marian</token>
            </marker>
            <token regexp="yes">\p{Lu}\p{Ll}+</token>
        </pattern>
        <disambig postag="subst:sg:nom:m1"/>
    </rule>

    <rule id="PRZYRODA_SINGULARE_TANTUM" name="Przyrody to raczej singulare">
        <pattern>
            <token>przyrody</token>
        </pattern>
        <disambig postag="subst:sg:gen:f"/>
        <example type="ambiguous" inputform="przyrody[przyroda/subst:pl:acc:f,przyroda/subst:pl:nom:f,przyroda/subst:pl:voc:f,przyroda/subst:sg:gen:f]"
                outputform="przyrody[przyroda/subst:sg:gen:f]">To pomnik <marker>przyrody</marker>.</example>
    </rule>

    <rule id="skocz_do_komentarzy" name="skocz do komentarzy">
        <pattern>
            <marker>
                <token>skocz</token>
            </marker>
            <token>do</token>
            <token regexp="yes">komentarzy|wody</token>
        </pattern>
        <disambig postag="verb:impt:sg:sec:perf:nonrefl"/>
    </rule>

    <rule id="MIMO_ACC" name="Mimo z biernikiem">
        <pattern>
            <marker>
                <token regexp="yes">(?:po)?mimo</token>
            </marker>
            <token postag=".*acc.*" postag_regexp="yes"><exception postag=".*gen.*" postag_regexp="yes"></exception></token>
        </pattern>
        <disambig postag="prep:acc"/>
    </rule>

    <rule id="MIMO_ACC_UNIFY" name="Mimo z biernikiem">
        <pattern>
            <marker>
                <token postag="prep:acc" regexp="yes">(?:po)?mimo</token>
                <token postag=".*acc.*" postag_regexp="yes"><exception postag=".*gen.*" postag_regexp="yes"></exception></token>
            </marker>
        </pattern>
        <disambig action="filterall"/>
        <example type="untouched">Pomimo tego był niewzruszony.</example>
        <example type="ambiguous" inputform="wszystko[wszystko/adv,wszystko/subst:sg:acc:n2,wszystko/subst:sg:nom:n2]" outputform="wszystko[wszystko/subst:sg:acc:n2]">Faktem mimo <marker>wszystko</marker> pozostaje, że ten produkt jest lepszy.</example>
    </rule>

    <rule id="MIMO_TO" name="mimo to">
        <pattern>
            <marker>
                <token regexp="yes" postag="prep:acc">(?:po)?mimo</token>
                <token postag="subst:sg:acc:n2">to</token>
            </marker>
        </pattern>
        <disambig action="filterall"/>
    </rule>

    <rule id="co_do_tego_jaki" name="co do tego + jaki">
        <pattern>
            <token postag="comp">co</token>
            <token postag="prep:gen">do</token>
            <token postag="subst:sg:gen:n2">tego</token>
            <!--
            <token inflected="yes" postag="adj.*" postag_regexp="yes">jaki</token>
            -->
        </pattern>
        <disambig action="filterall"></disambig>
    </rule>

    <rule id="NEW_YORK" name="New York">
        <pattern case_sensitive="yes">
            <marker>
                <token>New</token>
            </marker>
            <token>York</token>
        </pattern>
        <disambig postag="burk"/>
    </rule>

    <rule id="PREP_NEW_YORK" name="do New York">
        <pattern case_sensitive="yes">
        <unify> <feature id="case"/>
            <token postag="prep.*" postag_regexp="yes"><exception postag="prep.*|burk" negate_pos="yes" postag_regexp="yes"/><exception>co</exception></token>
            <unify-ignore>
                <token>New</token>
            </unify-ignore>
            <token>York</token>
        </unify>
        </pattern>
        <disambig action="unify"/>
    </rule>

    <rule name="co drugi dzień" id="CO_DRUGI_DZIEN">
        <pattern>
            <marker>
                <token>co<exception scope="previous">,</exception></token>
            </marker>
            <unify><feature id="number"><type id="sg"/></feature>
                <feature id="case"><type id="acc"/></feature>
                <feature id="gender"/>
                <token inflected="yes" regexp="yes">drugi|trzeci|czwarty|piąty|szósty|siódmy|ósmy|dziewiąty|dziesiąty</token>
                <token postag="subst.*" postag_regexp="yes"/>
            </unify>
        </pattern>
        <disambig postag="prep:acc"/>
        <example type="untouched">To było coś innego.</example>
        <example type="ambiguous" inputform="co[co/subst:sg:acc:n2]"
                 outputform="co[co/prep:acc]">Spotykamy się w <marker>co</marker> drugi wtorek.</example>
    </rule>

    <rule id="ZA_MAZ" name="za mąż -> biernik (tak w NKJP i w Innym">
        <pattern>
            <token>za</token>
            <token>mąż</token>
        </pattern>
        <disambig action="replace"><wd pos="prep:acc"/><wd pos="subst:sg:acc:m1"/></disambig>
        <example type="ambiguous" inputform="mąż[mąż/subst:sg:nom:m1]"
                 outputform="mąż[mąż/subst:sg:acc:m1]">Tedy byli radzi, że ją, choć naruszoną, ładnie za <marker>mąż</marker> wydadzą, ale ona o Michale nie chciała słyszeć.</example>
    </rule>

    <rulegroup name="Przyimek z rzeczownikiem" id="PREP_SUBST">
    <rule>
        <pattern>
            <unify> <feature id="case"/>
                <token postag="prep.*" postag_regexp="yes"><exception postag="prep.*|burk" negate_pos="yes" postag_regexp="yes"/><exception postag="qub">co</exception></token>
                <token postag="(?:adj|depr|ger|num|subst|ppron.*|ppas|pact|siebie):.*" postag_regexp="yes"><exception>co</exception><exception postag="qub|adv.*" postag_regexp="yes"/></token>
            </unify>
        </pattern>
        <disambig action="unify"/>        
        <example type="untouched">Tu mamy piękny przykład.</example>
        <example type="untouched">Łaciny używamy na co dzień.</example>
    </rule>
        <rule>
            <pattern>
                <unify> <feature id="case"/>
                    <token postag="prep.*" postag_regexp="yes"><exception postag="prep.*|burk" negate_pos="yes" postag_regexp="yes"/><exception>co</exception></token>              <unify-ignore><token regexp="yes">\d+|I{1,3}|I?VI{0,3}|I?XI{0,3}</token></unify-ignore>
                    <token postag="(?:adj|depr|ger|num|subst|ppron.*|ppas|pact|siebie):.*" postag_regexp="yes"><exception>co</exception><exception postag="qub"/></token>
                </unify>
            </pattern>
            <disambig action="unify"/>
            <example type="untouched">Tu mamy piękny przykład.</example>
            <example type="untouched">Łaciny używamy na co dzień.</example>
            <example type="ambiguous" inputform="kwartał[kwartał/subst:sg:acc:m3,kwartał/subst:sg:nom:m3]"
                     outputform="kwartał[kwartał/subst:sg:acc:m3]">Przewidywania na II <marker>kwartał</marker> br. są jednak bardzo optymistyczne.</example>
        </rule>
        <rule>
            <pattern>
                <unify> <feature id="case"/>
                    <token postag="prep.*" postag_regexp="yes"><exception postag="prep.*|burk" negate_pos="yes" postag_regexp="yes"/><exception>co</exception></token>
                    <unify-ignore>
                        <token regexp="yes">[\&quot;„\*]</token>
                    </unify-ignore>
                    <token postag="(?:adj|depr|ger|num|subst|ppron.*|ppas|pact|siebie):.*" postag_regexp="yes"><exception>co</exception><exception postag="qub"/></token>
                </unify>
            </pattern>
            <disambig action="unify"/>
            <example type="untouched">Tu mamy piękny przykład.</example>
            <example type="untouched">Łaciny używamy na co dzień.</example>
            <example type="ambiguous" inputform="ze[z/prep:acc:wok,z/prep:gen:wok,z/prep:inst:wok]" outputform="ze[z/prep:acc:wok,z/prep:gen:wok]">Niebawem oni jedni pozostali przy życiu <marker>ze</marker> *Świętego Ferdynanda*.</example>
            <!-- example type="ambiguous" inputform="mamy[mama/subst:pl:acc:f,mama/subst:pl:nom:f,mama/subst:pl:voc:f,mama/subst:sg:gen:f]" outputform="mamy[mama/subst:sg:gen:f]">Idę do <marker>mamy</marker>.</example>  -->
        </rule>

        <!-- rule>
            <pattern>
                <unify> <feature id="case"/>
                    <token postag="prep.*" postag_regexp="yes"><exception postag="prep.*" negate_pos="yes" postag_regexp="yes"/><exception>co</exception><exception scope="previous">co</exception></token>
                    <token postag="adj:sg.*" postag_regexp="yes" inflected="yes">ten</token>
                    <and>
                    <token postag="(adj|subst|ger|ppron.*|ppas|pact):sg.*" postag_regexp="yes"><exception>co</exception><exception postag="qub"/></token>
                        <token>
                            <match no="1" postag="adj:sg:.*:([fmn123]+)(?:\.([fmn123]+))?(?:\.([fmn123]+))?(?:\.([fmn123]+))?(?:\.([fmn123]+))?:pos" postag_regexp="yes" postag_replace="(?:adj|subst|ger|ppron.*|ppas|pact):sg:.*:(.*$1|$2|$3|$4|$5.*)" setpos="yes"></match></token>
                    </and>
                </unify>
            </pattern>
            <disambig action="unify"/>
            <example type="untouched">Tu mamy piękny przykład.</example>
            <example type="untouched">Łaciny używamy na co dzień.</example>
            <example type="ambiguous" inputform="tym[ten/adj:sg:loc:m1.m2.m3.n1.n2:pos,to/subst:sg:loc:n2]"
                     outputform="tym[ten/adj:sg:loc:m1.m2.m3.n1.n2:pos]">Jesteśmy w <marker>tym</marker> mieście.</example >
        </rule>
        <rule>
            <pattern>
                <unify> <feature id="case"/>
                    <token postag="prep.*" postag_regexp="yes"><exception postag="prep.*" negate_pos="yes" postag_regexp="yes"/><exception>co</exception><exception scope="previous">co</exception></token>
                    <token postag="adj:pl.*" postag_regexp="yes" inflected="yes">ten</token>
                    <token postag="(adj|subst|ger|ppron.*|ppas|pact|num):pl.*" postag_regexp="yes"><exception>co</exception><exception postag="qub"/></token>
                </unify>
            </pattern>
            <disambig action="unify"/>
            <example type="untouched">Tu mamy piękny przykład.</example>
            <example type="untouched">Łaciny używamy na co dzień.</example>
            <example type="ambiguous" inputform="tych[ten/adj:pl:acc:m1.p1:pos,ten/adj:pl:loc:m1.m2.m3.f.n1.n2.p1.p2.p3:pos]"
                     outputform="tych[ten/adj:pl:loc:m1.m2.m3.f.n1.n2.p1.p2.p3:pos]">Jesteśmy w <marker>tych</marker> miastach.</example>
        </rule -->

        <rule>
        <pattern>
            <unify> <feature id="case"/>
                <token postag="prep.*" postag_regexp="yes"><exception postag="prep.*|brev.*" negate_pos="yes" postag_regexp="yes"/><exception>co</exception></token>
                <token inflected="yes">to<exception inflected="yes">ten</exception></token>
            </unify>
        </pattern>
        <disambig action="unify"></disambig>
        <example type="untouched">Tu mamy piękny przykład.</example>
        <example type="untouched">Łaciny używamy na co dzień.</example>
                        
        <!-- example type="ambiguous" inputform="mamy[mama/subst:pl:acc:f,mama/subst:pl:nom:f,mama/subst:pl:voc:f,mama/subst:sg:gen:f]" outputform="mamy[mama/subst:sg:gen:f]">Idę do <marker>mamy</marker>.</example>  -->
    </rule>

        <rule id="PREP_ADV_SUBST_2">
            <pattern>
                <unify> <feature id="case"/>
                    <token postag="prep.*" postag_regexp="yes"><exception postag="prep.*|qub|subst:sg:nom:f" negate_pos="yes" postag_regexp="yes"/><exception>co</exception></token>
                    <unify-ignore><token postag="adv.*" postag_regexp="yes"/></unify-ignore>
                    <token postag="(adj|ppas|pact):.*|num.*congr" postag_regexp="yes"><exception>co</exception><exception postag="qub"/></token>
                    <token postag="(subst|ger|depr).*" postag_regexp="yes"/>
                </unify>
            </pattern>
            <disambig action="unify"/>
            <example type="untouched">Tu mamy piękny przykład.</example>
            <example type="untouched">Łaciny używamy na co dzień.</example>
            <example type="ambiguous" inputform="impertynencji[impertynencja/subst:pl:gen:f,impertynencja/subst:sg:dat:f,impertynencja/subst:sg:gen:f,impertynencja/subst:sg:loc:f,impertynencje/subst:pl:gen:p3]"
                     outputform="impertynencji[impertynencja/subst:pl:gen:f,impertynencja/subst:sg:gen:f,impertynencje/subst:pl:gen:p3]">Posunął się do daleko idącej <marker>impertynencji</marker>.</example>
        </rule>
        <rule id="PREP_ADV_CONJ_ADV_SUBST_2">
            <pattern>
                <unify> <feature id="case"/>
                    <token postag="prep.*" postag_regexp="yes"><exception postag="prep.*" negate_pos="yes" postag_regexp="yes"/><exception>co</exception></token>
                    <unify-ignore>
                        <token postag="adv.*" postag_regexp="yes"/>
                        <token postag="conj"/>
                        <token postag="adv.*" postag_regexp="yes"/>
                    </unify-ignore>
                    <token postag="(adj|ppas|pact):.*" postag_regexp="yes"><exception>co</exception><exception postag="qub"/></token>
                    <token postag="(subst|ger|depr).*" postag_regexp="yes"/>
                </unify>
            </pattern>
            <disambig action="unify"/>
            <example type="untouched">Tu mamy piękny przykład.</example>
            <example type="untouched">Łaciny używamy na co dzień.</example>
            <example type="ambiguous" inputform="impertynencji[impertynencja/subst:pl:gen:f,impertynencja/subst:sg:dat:f,impertynencja/subst:sg:gen:f,impertynencja/subst:sg:loc:f,impertynencje/subst:pl:gen:p3]"
                     outputform="impertynencji[impertynencja/subst:pl:gen:f,impertynencja/subst:sg:gen:f,impertynencje/subst:pl:gen:p3]">Posunął się do mniej lub dalej idącej <marker>impertynencji</marker>.</example>
        </rule>

        <rule id="prep_ppron_adja_adj">
            <pattern>
                <unify><feature id="case"><type id="loc"/><type id="gen"/><type id="dat"/><type id="inst"/><type id="acc"/></feature>
                    <token postag="prep.*" postag_regexp="yes"/>
                    <unify-ignore>
                        <token postag="ppron.*gen.*" postag_regexp="yes"/>
                        <token postag="adja"/>
                        <token spacebefore="no">-</token>
                    </unify-ignore>
                    <token spacebefore="no" postag="(:?subst|adj|ger|ppas|pact|ppron[1-3]):.*" postag_regexp="yes"/>
                </unify>
            </pattern>
            <disambig action="unify"/>
            <example type="ambiguous" inputform="niemieckich[niemiecki/adj:pl:acc:m1.p1:pos,niemiecki/adj:pl:gen:m1.m2.m3.f.n1.n2.p1.p2.p3:pos,niemiecki/adj:pl:loc:m1.m2.m3.f.n1.n2.p1.p2.p3:pos,niemiecki/subst:pl:gen:m3,niemiecki/subst:pl:loc:m3]" outputform="niemieckich[niemiecki/adj:pl:gen:m1.m2.m3.f.n1.n2.p1.p2.p3:pos,niemiecki/subst:pl:gen:m3]">Piszę do jego polsko-<marker>niemieckich</marker> towarzyszy broni.</example>
        </rule>

        <rule id="prep_adja_adj">
            <pattern>
                <unify><feature id="case"><type id="loc"/><type id="gen"/><type id="dat"/><type id="inst"/><type id="acc"/></feature>
                    <token postag="prep.*" postag_regexp="yes"/>
                    <unify-ignore>
                        <token postag="adja"/>
                        <token spacebefore="no">-</token>
                    </unify-ignore>
                    <token spacebefore="no" postag="(:?subst|adj|ger|ppas|pact|ppron[1-3]):.*" postag_regexp="yes"/>
                </unify>
            </pattern>
            <disambig action="unify"/>
            <example type="ambiguous" inputform="niemieckich[niemiecki/adj:pl:acc:m1.p1:pos,niemiecki/adj:pl:gen:m1.m2.m3.f.n1.n2.p1.p2.p3:pos,niemiecki/adj:pl:loc:m1.m2.m3.f.n1.n2.p1.p2.p3:pos,niemiecki/subst:pl:gen:m3,niemiecki/subst:pl:loc:m3]" outputform="niemieckich[niemiecki/adj:pl:gen:m1.m2.m3.f.n1.n2.p1.p2.p3:pos,niemiecki/subst:pl:gen:m3]">Piszę do polsko-<marker>niemieckich</marker> towarzyszy broni.</example>
        </rule>

        <rule id="PREP_ADV_ADJ_ADJ_SUBST">
            <pattern>
                <unify> <feature id="case"/>
                    <token postag="prep.*" postag_regexp="yes"><exception postag="prep.*" negate_pos="yes" postag_regexp="yes"/><exception>co</exception></token>
                    <unify-ignore><token postag="adv.*" postag_regexp="yes"/></unify-ignore>
                    <token postag="(adj|ppas|pact):.*" postag_regexp="yes"><exception>co</exception><exception postag="qub"/></token>
                    <token postag="(adj|ppas|pact):.*" postag_regexp="yes"><exception>co</exception><exception postag="qub"/></token>
                    <token postag="(subst|ger|depr).*" postag_regexp="yes"/>
                </unify>
            </pattern>
            <disambig action="unify"/>
            <example type="untouched">Tu mamy piękny przykład.</example>
            <example type="untouched">Łaciny używamy na co dzień.</example>
            <example type="ambiguous" inputform="impertynencji[impertynencja/subst:pl:gen:f,impertynencja/subst:sg:dat:f,impertynencja/subst:sg:gen:f,impertynencja/subst:sg:loc:f,impertynencje/subst:pl:gen:p3]"
                     outputform="impertynencji[impertynencja/subst:pl:gen:f,impertynencja/subst:sg:gen:f,impertynencje/subst:pl:gen:p3]">Posunął się do niemal każdej obrzydliwej <marker>impertynencji</marker>.</example>
        </rule>

        <rule>
        <pattern>
            <unify> <feature id="case"/>
                <token regexp="yes" postag="prep.*" postag_regexp="yes">przeciw|poza|o?koło|za|o|zamiast</token>
                <token postag="(?:adj|depr|ger|num|subst|ppron.*|ppas|pact|siebie):.*" postag_regexp="yes"><exception>co</exception><exception postag="qub|adv.*" postag_regexp="yes"/></token>
            </unify>
        </pattern>
        <disambig action="unify"/>
            <example type="untouched">Tu mamy piękny przykład.</example>
            <example type="untouched">Łaciny używamy na co dzień.</example>
            <example type="untouched">To za dużo powiedziane.</example>
            <example type="untouched">Nic mnie nie interesuje poza tym.</example>
        </rule>
        <rule>
            <pattern>
                <unify> <feature id="case"/>
                    <token regexp="yes" postag="prep.*" postag_regexp="yes">poza|za|o</token>
                    <token>tym</token>
                </unify>
            </pattern>
            <disambig action="unify"/>
            <example type="untouched">Tu mamy piękny przykład.</example>
            <example type="untouched">Łaciny używamy na co dzień.</example>
            <example type="untouched">To za dużo powiedziane.</example>
            <example type="ambiguous" inputform="tym[ten/adj:pl:dat:m1.m2.m3.f.n1.n2.p1.p2.p3:pos,ten/adj:sg:inst:m1.m2.m3.n1.n2:pos,ten/adj:sg:loc:m1.m2.m3.n1.n2:pos,to/subst:sg:inst:n2,to/subst:sg:loc:n2,tym/adv,tym/conj]"
            outputform="tym[ten/adj:sg:inst:m1.m2.m3.n1.n2:pos,to/subst:sg:inst:n2]">Nic mnie nie interesuje poza <marker>tym</marker>.</example>
        </rule>
    <rule>
    	<pattern>
    		<marker><token regexp="yes">jako?|a|niż|niczym</token></marker> <!-- jeśli a, jak, jako, niczym, niż nie występuje z mianownikiem, to nie jest przyimkiem -->
    		<token postag="(?:adj|depr|ger|num|subst|ppron.*|ppas|pact):.*" postag_regexp="yes"><exception postag=".*nom.*|conj|adv.*" postag_regexp="yes"></exception><exception regexp="yes">.*um</exception></token>
    	</pattern>
    	<disambig><match no="1" postag="^(?!prep:nom).*" postag_regexp="yes"></match></disambig> 
    	<example type="untouched">Mówię dziś jako rzecznik samorządu przedszkolnego.</example>
    	<example type="ambiguous" inputform="jako[jaka/subst:sg:voc:f,jako/adv,jako/conj,jako/prep:nom]" outputform="jako[jaka/subst:sg:voc:f,jako/adv,jako/conj]">Można to określić <marker>jako</marker> ewolucję.</example>
    </rule>
    <rule> <!-- złożone wyrażenie przyimkowe ze związkiem rządu: na mocy, na podstawie-->
            <pattern>
                <token>na</token>
                <token regexp="yes">czele|kształt|mocy|podstawie|rzecz|spodzie|działanie|zewnątrz</token>
                <marker>
                    <token postag="(?:adj|depr|ger|num|subst|ppron.*|ppas|pact):.*" postag_regexp="yes"/>
                </marker>
            </pattern>
            <disambig action="filter" postag=".*gen.*"/>
            <example type="ambiguous" inputform="stymulacji[stymulacja/subst:pl:gen:f,stymulacja/subst:sg:dat:f,stymulacja/subst:sg:gen:f,stymulacja/subst:sg:loc:f]"
                     outputform="stymulacji[stymulacja/subst:pl:gen:f,stymulacja/subst:sg:gen:f]">Na mocy <marker>stymulacji</marker> cytokinowej następuje ich swoiste uczulenie.</example>
    </rule>
        <rule> <!-- złożone wyrażenie przyimkowe ze związkiem rządu: przy pomocy, przy użyciu-->
            <pattern>
                <token>przy</token>
                <token regexp="yes">pomocy|użyciu</token>
                <marker>
                    <token postag="(?:adj|depr|ger|num|subst|ppron.*|ppas|pact):.*" postag_regexp="yes"/>
                </marker>
            </pattern>
            <disambig action="filter" postag=".*gen.*"/>
            <example type="ambiguous" inputform="stymulacji[stymulacja/subst:pl:gen:f,stymulacja/subst:sg:dat:f,stymulacja/subst:sg:gen:f,stymulacja/subst:sg:loc:f]"
                     outputform="stymulacji[stymulacja/subst:pl:gen:f,stymulacja/subst:sg:gen:f]">Przy użyciu <marker>stymulacji</marker> cytokinowej następuje ich swoiste uczulenie.</example>
        </rule>
    <rule> <!-- złożone wyrażenia przyimkowe ze związkiem rządu: w razie, w wyniku, w rezultacie, w efekcie -->
        <pattern>
            <token>w</token>
            <token regexp="yes">braku|celu|ciągu|czasie|efekcie|formie|imię|imieniu|miarę|myśl|postaci|razie|rezultacie|trakcie|wyniku|wypadku|przypadku|głębi|obrębie|środku</token>
            <marker>
                <token postag="(?:adj|depr|ger|num|subst|ppron.*|ppas|pact):.*" postag_regexp="yes"/>
            </marker>
        </pattern>
        <disambig action="filter" postag=".*gen.*"/>
        <example type="ambiguous" inputform="stymulacji[stymulacja/subst:pl:gen:f,stymulacja/subst:sg:dat:f,stymulacja/subst:sg:gen:f,stymulacja/subst:sg:loc:f]"
                 outputform="stymulacji[stymulacja/subst:pl:gen:f,stymulacja/subst:sg:gen:f]">W wyniku <marker>stymulacji</marker> cytokinowej następuje ich swoiste uczulenie.</example>
    </rule>
        <rule> <!-- złożone wyrażenia przyimkowe ze związkiem rządu: w razie, w wyniku, w rezultacie, w efekcie -->
            <pattern>
                <token>we</token>
                <token>wnętrzu</token>
                <marker>
                    <token postag="(?:adj|depr|ger|num|subst|ppron.*|ppas|pact):.*" postag_regexp="yes"/>
                </marker>
            </pattern>
            <disambig action="filter" postag=".*gen.*"/>
            <example type="ambiguous" inputform="stacji[stacja/subst:pl:gen:f,stacja/subst:sg:dat:f,stacja/subst:sg:gen:f,stacja/subst:sg:loc:f]"
                     outputform="stacji[stacja/subst:pl:gen:f,stacja/subst:sg:gen:f]">We wnętrzu <marker>stacji</marker> było przytulnie.</example>
        </rule>
    <rule> <!-- złożone wyrażenia przyimkowe ze związkiem rządu: z powodu, z przyczyny, z wyjątkiem, z pomocą -->
            <pattern>
                <token>z</token>
                <token regexp="yes">nadejściem|początkiem|pomocą|powodu|przyczyny|tytułu|wyjątkiem|wyłączeniem</token>
                <marker>
                    <token postag="(?:adj|depr|ger|num|subst|ppron.*|ppas|pact):.*" postag_regexp="yes"/>
                </marker>
            </pattern>
            <disambig action="filter" postag=".*gen.*"/>
            <example type="ambiguous" inputform="stymulacji[stymulacja/subst:pl:gen:f,stymulacja/subst:sg:dat:f,stymulacja/subst:sg:gen:f,stymulacja/subst:sg:loc:f]"
                     outputform="stymulacji[stymulacja/subst:pl:gen:f,stymulacja/subst:sg:gen:f]">Z powodu <marker>stymulacji</marker> cytokinowej następuje ich swoiste uczulenie.</example>
    </rule>
     <rule> <!-- złożone wyrażenie przyimkowe ze związkiem rządu: za pomocą -->
      <pattern>
            <token>za</token>
                <token regexp="yes">pomocą|pośrednictwem|sprawą</token>
                <marker>
                    <token postag="(?:adj|depr|ger|num|subst|ppron.*|ppas|pact):.*" postag_regexp="yes"/>
                </marker>
            </pattern>
            <disambig action="filter" postag=".*gen.*"/>
            <example type="ambiguous" inputform="stymulacji[stymulacja/subst:pl:gen:f,stymulacja/subst:sg:dat:f,stymulacja/subst:sg:gen:f,stymulacja/subst:sg:loc:f]"
                     outputform="stymulacji[stymulacja/subst:pl:gen:f,stymulacja/subst:sg:gen:f]">Za pomocą <marker>stymulacji</marker> cytokinowej następuje ich swoiste uczulenie.</example>
      </rule>
     <rule> <!-- złożone wyrażenia przyimkowe ze związkiem rządu: pod pretekstem, pod względem -->
            <pattern>
                <token>pod</token>
                <token regexp="yes">kątem|redakcją|pretekstem|względem|wezwaniem</token>
                <marker>
                    <token postag="(?:adj|depr|ger|num|subst|ppron.*|ppas|pact):.*" postag_regexp="yes"/>
                </marker>
            </pattern>
            <disambig action="filter" postag=".*gen.*"/>
            <example type="ambiguous" inputform="stymulacji[stymulacja/subst:pl:gen:f,stymulacja/subst:sg:dat:f,stymulacja/subst:sg:gen:f,stymulacja/subst:sg:loc:f]"
                     outputform="stymulacji[stymulacja/subst:pl:gen:f,stymulacja/subst:sg:gen:f]">Pod pretekstem <marker>stymulacji</marker> cytokinowej następuje ich swoiste uczulenie.</example>
         <example type="untouched">Mam dostęp do wody bardzo dobrej pod względem mi­kro­bio­lo­gicz­nym.</example>
     </rule>
        <rule> <!-- złożone wyrażenia przyimkowe ze związkiem rządu: à propos -->
            <pattern>
                <token regexp="yes">[aà]</token>
                <token>propos</token>
                <marker>
                    <token postag="(?:adj|depr|ger|num|subst|ppron.*|ppas|pact):.*gen.*" postag_regexp="yes"/>
                </marker>
            </pattern>
            <disambig action="filter" postag=".*gen.*"/>
            <example type="ambiguous" inputform="stymulacji[stymulacja/subst:pl:gen:f,stymulacja/subst:sg:dat:f,stymulacja/subst:sg:gen:f,stymulacja/subst:sg:loc:f]"
                     outputform="stymulacji[stymulacja/subst:pl:gen:f,stymulacja/subst:sg:gen:f]">Mówisz to a propos <marker>stymulacji</marker> cytokinowej?</example>
        </rule>
        <rule>
            <pattern>
                <token skip="-1" regexp="yes">(?:po)?między</token>
                <token>a</token>
                <marker><token postag="(?:adj|depr|ger|num|subst|ppron.*|ppas|pact):.*inst.*" postag_regexp="yes"/>
                </marker>
            </pattern>
            <disambig action="filter" postag=".*inst.*"/>
            <example type="ambiguous" inputform="tym[ten/adj:pl:dat:m1.m2.m3.f.n1.n2.p1.p2.p3:pos,ten/adj:sg:inst:m1.m2.m3.n1.n2:pos,ten/adj:sg:loc:m1.m2.m3.n1.n2:pos,to/subst:sg:inst:n2,to/subst:sg:loc:n2,tym/adv,tym/conj]"
                     outputform="tym[ten/adj:sg:inst:m1.m2.m3.n1.n2:pos,to/subst:sg:inst:n2]">Jest to jeszcze gra pomiędzy nią a <marker>tym</marker> młodym i pięknym jak dziewczyna mędrcem.</example>
        </rule>
        <rule>
            <pattern>
                <marker>
                    <token postag="prep:gen">śród</token>
                    <token postag="(?:adj|depr|ger|num|subst|ppron.*|ppas|pact):.*gen.*" postag_regexp="yes"/>
                </marker>
            </pattern>
            <disambig action="filterall"/>
        </rule>
        <rule>
            <pattern>
                <marker>
                    <token postag="prep:gen">względem<exception scope="previous">pod</exception></token>
                    <token postag="(?:adj|depr|ger|num|subst|ppron.*|ppas|pact):.*gen.*" postag_regexp="yes"/>
                </marker>
            </pattern>
            <disambig action="filterall"/>
        </rule>
        <rule>
            <pattern>
            <unify> <feature id="case"/>
                <token postag="prep.*" postag_regexp="yes"><exception postag="prep.*|qub" negate_pos="yes" postag_regexp="yes"/><exception>co</exception><exception scope="previous">co</exception></token>
                <token regexp="yes" inflected="yes">jeden|jedno</token>
            </unify>
        </pattern>
        <disambig action="unify"/>
        </rule>
        <rule>
            <pattern>
                <unify> <feature id="case"/>
                    <token postag="prep.*" postag_regexp="yes">ponad</token>
                    <token postag="(?:adj|depr|ger|subst|ppron.*|ppas|pact):.*" postag_regexp="yes"/>
                </unify>
            </pattern>
            <disambig action="unify"/>
        </rule>
    </rulegroup>

    <rule id="ZA_POMOCA_M1_M2" name="za pomocą + m1/m2/m3 -> m2/m3">
        <pattern>
            <token>za</token>
            <token>pomocą</token>
            <marker>
                <and>
                    <token postag="subst:sg:gen:m1"/>
                    <token postag="subst:sg:gen:(m[23]|f|n[12])" postag_regexp="yes"/>
                </and>
            </marker>
        </pattern>
        <disambig action="remove"><wd pos="subst:sg:gen:m1"/></disambig>
        <example type="ambiguous" inputform="bambusa[bambus/subst:sg:gen:m1,bambus/subst:sg:gen:m2]" outputform="bambusa[bambus/subst:sg:gen:m2]">Kali przedstawił im za pomocą <marker>bambusa</marker> całą niewłaściwość ich postępku.</example>
        <example type="ambiguous" inputform="edytora[edytor/subst:sg:gen:m1,edytor/subst:sg:gen:m3]"
                 outputform="edytora[edytor/subst:sg:gen:m3]">Redaguję tekst za pomocą <marker>edytora</marker> tekstów.</example>
    </rule>

    <!-- rule id="PREP_CD_ROKU_GEN" name="W xxx + 'roku' -> unify">
        <pattern>
            <marker>
                <unify><feature id="case"/>
                <token postag="prep.*" postag_regexp="yes"><exception postag="prep.*" negate_pos="yes" postag_regexp="yes"/><exception>co</exception></token>
                    <unify-ignore>
                        <token regexp="yes">\d{1,4}</token>
                    </unify-ignore>
                <token inflected="yes">rok</token>
                </unify>
            </marker>
        </pattern>
        <disambig action="unify"></disambig>
        <example type="untouched">Byłem tam w tym roku.</example>
        <example type="ambiguous" inputform="roku[rok/subst:sg:gen:m3,rok/subst:sg:loc:m3,rok/subst:sg:voc:m3]"
                 outputform="roku[rok/subst:sg:loc:m3]">Byłem tam w 1994 <marker>roku</marker>.</example>
    </rule -->

    <rule id="BLISKO_GEN" name="blisko/niedaleko + dopełniacz">
        <pattern>
            <token inflected="yes" regexp="yes">blisko|niedaleko</token>
            <marker>
                <token postag=".*gen.*" postag_regexp="yes"/>
            </marker>
        </pattern>
        <disambig action="filterall"/>
        <example type="untouched">On był już blisko.</example>
        <example type="ambiguous" inputform='źródła[źródło/subst:pl:acc:n2,źródło/subst:pl:nom:n2,źródło/subst:pl:voc:n2,źródło/subst:sg:gen:n2]' outputform="źródła[źródło/subst:sg:gen:n2]">I jakby chcąc się znaleźć bliżej <marker>źródła</marker>, z którego kiedyś był wyszedł, i stamtąd zacząć wszystko na nowo, podążył do pani Barbary.</example>
    </rule>

    <rule id="NP_GEN_teoria" name="teoria x-a">
        <pattern>
            <marker>
            <token postag="subst.*" postag_regexp="yes" inflected="yes" regexp="yes">teoria|proces|opis|obraz|widok|światło</token>
            <token postag="subst:.*gen.*" postag_regexp="yes"/></marker>
        </pattern>
        <disambig action="filterall"/>
        <example type="ambiguous" inputform="względności[względność/subst:pl:acc:f,względność/subst:pl:gen:f,względność/subst:pl:nom:f,względność/subst:pl:voc:f,względność/subst:sg:dat:f,względność/subst:sg:gen:f,względność/subst:sg:loc:f,względność/subst:sg:voc:f]"
                 outputform="względności[względność/subst:pl:gen:f,względność/subst:sg:gen:f]">Nie lubię teorii <marker>względności</marker>.</example>
    </rule>

    <rule id="NP_GEN_skutek" name="skutek x-a">
        <pattern>
            <token inflected="yes" regexp="yes">przyczyna|skutek|efekt|owoc|powód|wynik|ramy|okres
                <exception scope="previous" postag="adj.*gen.*" postag_regexp="yes" inflected="yes">ten</exception>
            </token>
            <marker>
                <and>
                    <token postag="subst:.*gen.*" postag_regexp="yes"/>
                    <token negate_pos="yes" postag="subst:.*gen.*" postag_regexp="yes"/>
                </and>
            </marker>
        </pattern>
        <disambig action="filter" postag="subst:.*gen.*"/>
        <example type="ambiguous" inputform="względności[względność/subst:pl:acc:f,względność/subst:pl:gen:f,względność/subst:pl:nom:f,względność/subst:pl:voc:f,względność/subst:sg:dat:f,względność/subst:sg:gen:f,względność/subst:sg:loc:f,względność/subst:sg:voc:f]"
                 outputform="względności[względność/subst:pl:gen:f,względność/subst:sg:gen:f]">To wszystko skutek <marker>względności</marker>.</example>
        <example type="untouched">Ale zauważyli, że cierpią z tego powodu osoby, które nie są zadowolone z wykonywanej pracy albo z uzyskiwanych zarobków!</example>
    </rule>

    <rule id="NP_GEN_teren" name="obszar x-a">
        <pattern>
            <token inflected="yes" regexp="yes">obszar|teren|region|strona|mieszkaniec<exception scope="previous" inflected="yes">ten</exception></token>
            <marker><token postag="subst:sg.*gen.*" postag_regexp="yes"/></marker>
        </pattern>
        <disambig action="filter" postag="subst:sg.*gen.*"/>
        <example type="ambiguous" inputform="Polski[Polska/subst:pl:acc:f,Polska/subst:pl:nom:f,Polska/subst:pl:voc:f,Polska/subst:sg:gen:f,Polski/subst:sg:nom:m1,Polski/subst:sg:voc:m1,polski/adj:sg:acc:m3:pos,polski/adj:sg:nom.voc:m1.m2.m3:pos,polski/subst:sg:acc:m3,polski/subst:sg:nom:m3,polski/subst:sg:voc:m3]"
                 outputform="Polski[Polska/subst:sg:gen:f]">Cały teren <marker>Polski</marker> narażony jest na powodzie.</example>
    </rule>


    <rule id="NP_GEN_architektura" name="architektura von Neumanna">
        <pattern>
            <token inflected="yes">architektura</token>
            <token>von</token>
            <marker><token>Neumanna</token></marker>
        </pattern>
        <disambig postag="subst:sg:gen:m1"/>
    </rule>

    <rule id="EDWARDA_GIERKA" name="Edwarda + nazwisko męskie -> imię męskie">
        <pattern case_sensitive="yes">
            <unify>
                <feature id="case"><type id="acc"/><type id="gen"/></feature>
                <feature id="number"><type id="sg"/></feature>
                <feature id="gender"><type id="m1"/></feature>
                <and>
                    <token postag="subst:sg:(gen|acc):m1" postag_regexp="yes" inflected="yes" regexp="yes">\p{Lu}\p{Ll}+</token>
                    <token postag="subst:sg:nom:f"/>
                </and>
                <token postag="subst:sg:(gen|acc):m1" postag_regexp="yes" inflected="yes" regexp="yes">\p{Lu}\p{Ll}+</token>
            </unify>
        </pattern>
        <disambig action="unify"/>
        <example type="ambiguous" inputform="Edwarda[Edward/subst:sg:acc:m1,Edward/subst:sg:gen:m1,Edwarda/subst:sg:nom:f]"
                 outputform="Edwarda[Edward/subst:sg:acc:m1,Edward/subst:sg:gen:m1]">Spotkałem <marker>Edwarda</marker> Gierka.</example>
        <example type="untouched">W roli głównej Ryszarda Hanin.</example>
    </rule>

    <rule id="NP_GEN_zona" name="żona/córka + genetiwus">
        <pattern>
            <token inflected="yes" regexp="yes">żona|córka|brat|wuj|ciotka</token>
            <marker><token postag="subst:sg:gen:m1"/></marker>
        </pattern>
        <disambig postag="subst:sg:gen:m1"/>
        <example type="ambiguous" inputform="Edwarda[Edward/subst:sg:acc:m1,Edward/subst:sg:gen:m1]"
                 outputform="Edwarda[Edward/subst:sg:gen:m1]">To była żona <marker>Edwarda</marker> Gierka.</example>
    </rule>

    <rule id="panie" name="pani Janina Kowalska">
        <pattern>
            <unify>
                <feature id="gender"><type id="f"/></feature>
                <feature id="number"/><feature id="case"/>
                <token postag="subst:sg:.*" postag_regexp="yes"/>
                <token postag="subst:sg:.*" postag_regexp="yes" regexp="yes">\p{Lu}\p{Ll}+</token>
                <token postag="subst:sg:.*" postag_regexp="yes" regexp="yes">\p{Lu}\p{Ll}+</token>
            </unify>
        </pattern>
        <disambig action="unify"></disambig>
    </rule>

    <rule id="NIE_MA_GEN" name="nie ma + dopełniacz">
        <pattern>
            <token>nie</token>
            <marker>
                <token inflected="yes" postag="verb.*" postag_regexp="yes">mieć</token>
                <token postag=".*gen.*" postag_regexp="yes"><exception postag="verb:inf.*" postag_regexp="yes"/></token>
            </marker>
        </pattern>
        <disambig action="filterall"/>
        <example type="ambiguous" inputform="braterstwa[braterstwo/subst:pl:acc:n2,braterstwo/subst:pl:acc:p1,braterstwo/subst:pl:gen:p1,braterstwo/subst:pl:nom:n2,braterstwo/subst:pl:voc:n2,braterstwo/subst:sg:gen:n2]"
                 outputform="braterstwa[braterstwo/subst:pl:gen:p1,braterstwo/subst:sg:gen:n2]">Nie ma <marker>braterstwa</marker>.</example>
        <example type="untouched">Nic nie jest skrytego, co by nie miało być objawione.</example>
    </rule>

    <rule id="GEN_IMPS" name="Dopełniacz przed czasownikiem wymagającym dopełniacza w formie bezosobowej">
        <pattern>
            <marker><token postag=".*gen.*" postag_regexp="yes"/></marker>
            <token regexp="yes">używano|przestrzegano|wymagano</token>
        </pattern>
        <disambig action="filterall"/>
        <example type="untouched">Miejscami używano także krów.</example>
        <example type="ambiguous" inputform="Pieczęci[pieczęć/subst:pl:gen:f,pieczęć/subst:sg:dat:f,pieczęć/subst:sg:gen:f,pieczęć/subst:sg:loc:f,pieczęć/subst:sg:voc:f]"
                 outputform="Pieczęci[pieczęć/subst:pl:gen:f,pieczęć/subst:sg:gen:f]"><marker>Pieczęci</marker> używano dosyć często.</example>
    </rule>

    <rule name="pomoc z celownikiem" id="pomoc_dat">
        <pattern>
            <token inflected="yes">pomoc</token>
            <marker>
                <unify><feature id="case"><type id="dat"/></feature><feature id="gender"/><feature id="number"/>
                    <token postag="(subst|ger).*" postag_regexp="yes"/>
                    <token postag="(adj|pact|ppas).*" postag_regexp="yes"/>
                </unify>
            </marker>
        </pattern>
        <disambig action="unify"/>
        <example type="ambiguous" inputform="wschodnim[wschodni/adj:pl:dat:m1.m2.m3.f.n1.n2.p1.p2.p3:pos,wschodni/adj:sg:inst:m1.m2.m3.n1.n2:pos,wschodni/adj:sg:loc:m1.m2.m3.n1.n2:pos]" outputform="wschodnim[wschodni/adj:pl:dat:m1.m2.m3.f.n1.n2.p1.p2.p3:pos]">Podstawową formą pomocy chrześcijanom <marker>wschodnim</marker> jest poznanie ich.</example>
    </rule>

    <rule name="koordynacja w miejscowniku" id="LOC_COORDINATION">
        <pattern>
            <unify>
                <feature id="case"><type id="loc"/></feature>
                <feature id="gender"/>
                <feature id="number"/>
                <token postag="(subst|ger).*loc.*" postag_regexp="yes"/>
                <token postag="adj.*" postag_regexp="yes"/>
                <unify-ignore><token>,</token></unify-ignore>
                <token postag="adj.*" postag_regexp="yes"/>
                <unify-ignore><token regexp="yes">i|lub|czy|bądź|tydzież</token></unify-ignore>
                <token postag="adj.*" postag_regexp="yes"/>
            </unify>
        </pattern>
        <disambig action="unify"/>
        <example type="ambiguous" inputform="gminnym[gminny/adj:pl:dat:m1.m2.m3.f.n1.n2.p1.p2.p3:pos,gminny/adj:sg:inst:m1.m2.m3.n1.n2:pos,gminny/adj:sg:loc:m1.m2.m3.n1.n2:pos]" outputform="gminnym[gminny/adj:sg:loc:m1.m2.m3.n1.n2:pos]">Na szczeblu wojewódzkim, powiatowym i <marker>gminnym</marker> również jest mnóstwo przykładów wykorzystywania przez polityków i urzędników swoich pozycji do celów całkowicie prywatnych.</example>
    </rule>

    <rule name="dat + być + wszystko jedno" id="DAT_BYC_WSZYSTKO_JEDNO">
        <pattern>
            <marker>
                <unify><feature id="case"><type id="dat"/></feature><feature id="gender"/><feature id="number"/>
                    <token postag="(subst|ger|adj|pact|ppas).*" postag_regexp="yes"/>
                    <token postag="(adj|pact|ppas|subst|ger).*" postag_regexp="yes"/>
                </unify>
            </marker>
            <token regexp="yes">jest|było|będzie</token>
            <token>wszystko</token>
            <token>jedno</token>
        </pattern>
        <disambig action="unify"/>
    </rule>

    <rule name="subst:dat + być + wszystko jedno" id="SUBST_DAT_BYC_WSZYSTKO_JEDNO">
        <pattern>
            <marker>
                <token postag=".*dat.*" postag_regexp="yes"/>
                <token regexp="yes">jest|było|będzie</token>
                <token postag="subst:sg:nom:n2">wszystko</token>
                <token postag="adj:sg:nom.voc:n1.n2:pos">jedno</token>
            </marker>
        </pattern>
        <disambig action="filterall"/>
    </rule>

    <rule name="być z narzędnikiem dla orzecznika" id="BYC_INST">
        <pattern>
            <token inflected="yes" postag="(?:verb|pact).*" postag_regexp="yes" regexp="yes">by(wa)?ć
                <exception postag="ppas.*nom.*" postag_regexp="yes" scope="previous"/>
            </token>
            <token min="0" max="1" postag="qub|adv.*" postag_regexp="yes">                          <exception postag="qub|adv.*" postag_regexp="yes" negate_pos="yes"/></token>
            <token postag=".*inst.*" postag_regexp="yes"><exception postag="(?:adj|subst|depr|pact|ppas).*" postag_regexp="yes" negate_pos="yes"/>
            </token>
        </pattern>
        <disambig action="filterall"/>
        <example type="untouched">On wart jest stu takich drabów.</example>
        <example type="ambiguous" inputform="eleganckim[elegancki/adj:pl:dat:m1.m2.m3.f.n1.n2.p1.p2.p3:pos,elegancki/adj:sg:inst:m1.m2.m3.n1.n2:pos,elegancki/adj:sg:loc:m1.m2.m3.n1.n2:pos]"
                 outputform="eleganckim[elegancki/adj:sg:inst:m1.m2.m3.n1.n2:pos]">Nie sposób być <marker>eleganckim</marker>.</example>
        <example type="ambiguous" inputform="była[być/verb:praet:sg:f:ter:imperf:nonrefl,była/subst:sg:nom:f,była/subst:sg:voc:f,były/adj:sg:nom.voc:f:pos]"
                 outputform="była[być/verb:praet:sg:f:ter:imperf:nonrefl]">O ile podróż od wybrzeży Kaspijskiego Morza była długa i ciężka, to ta z Moskwy do Charkowa <marker>była</marker> już istną torturą.</example>
        <example type="untouched">Nazwisko Poilâne znane jest wszystkim, którzy lubią dobry chleb.</example>
    </rule>

    <rule name="być z narzędnikiem dla orzecznika" id="BYC_INST_2">
        <pattern>
            <token postag=".*inst.*" postag_regexp="yes"><exception postag="(?:adj|subst|depr|pact|ppas).*" postag_regexp="yes" negate_pos="yes"/></token>
            <token inflected="yes" postag="(?:verb|pact).*" postag_regexp="yes">być</token>
        </pattern>
        <disambig action="filterall"/>
        <example type="untouched">On wart jest stu takich drabów.</example>
        <example type="ambiguous" inputform="eleganckim[elegancki/adj:pl:dat:m1.m2.m3.f.n1.n2.p1.p2.p3:pos,elegancki/adj:sg:inst:m1.m2.m3.n1.n2:pos,elegancki/adj:sg:loc:m1.m2.m3.n1.n2:pos]"
                 outputform="eleganckim[elegancki/adj:sg:inst:m1.m2.m3.n1.n2:pos]">Człowiekiem <marker>eleganckim</marker> był Ludwik.</example>
    </rule>

    <rule name="być z narzędnikiem dla orzecznika" id="BYC_INST_3">
        <pattern>
            <marker>
            <token postag=".*inst.*" postag_regexp="yes"><exception postag="(?:adj|subst|depr|pact|ppas).*" postag_regexp="yes" negate_pos="yes"/>
            <exception scope="previous" postag="subst:.*dat.*" postag_regexp="yes" /></token>
            <token><exception postag="subst:.*dat.*" postag_regexp="yes"/></token>
            <token inflected="yes" postag="(?:verb|pact).*" postag_regexp="yes">być</token>
            </marker>
            <token><exception postag="verb:(?:praet|inf).*" postag_regexp="yes"/></token>
        </pattern>
        <disambig action="filterall"/>
        <example type="untouched">On wart jest stu takich drabów.</example>
        <example type="ambiguous" inputform="eleganckim[elegancki/adj:pl:dat:m1.m2.m3.f.n1.n2.p1.p2.p3:pos,elegancki/adj:sg:inst:m1.m2.m3.n1.n2:pos,elegancki/adj:sg:loc:m1.m2.m3.n1.n2:pos]"
                 outputform="eleganckim[elegancki/adj:sg:inst:m1.m2.m3.n1.n2:pos]">Człowiekiem <marker>eleganckim</marker> dawniej był Ludwik.</example>
        <example type="untouched">Pojęcia nie miał, jaką rolę będzie musiał w tym wszystkim odegrać.</example>
    </rule>

    <rule id="tylko_ze" name="tylko że">
        <pattern>
            <marker><token postag="conj">tylko</token>
                <token postag="comp.*" postag_regexp="yes">że</token>
            </marker>
        </pattern>
        <disambig action="filterall"/>
        <example type="ambiguous" inputform="tylko[tylko/conj,tylko/qub]"
                 outputform="tylko[tylko/conj]">Chętnie was odprowadzę, <marker>tylko</marker> że nie mam parasola.</example>
        <example type="untouched">Goście tylko co wyjechali.</example>
    </rule>

    <rule id="tyle_tylko_ze" name="tyle tylko, że">
        <pattern>
            <marker>
                <token postag="adv">tyle</token>
                <token postag="conj">tylko</token>
                <token min="0" max="1">,</token>
                <token postag="comp.*" postag_regexp="yes">że</token>
            </marker>
        </pattern>
        <disambig action="filterall"/>
        <example type="ambiguous" inputform="tylko[tylko/conj,tylko/qub]"
                 outputform="tylko[tylko/conj]">Chętnie was odprowadzę, tyle <marker>tylko</marker>, że nie mam parasola.</example>
        <example type="untouched">Goście tylko co wyjechali.</example>
    </rule>

    <rule id="ZYCIE_SG_TANTUM" name="życie to prawie singulare tantum">
        <pattern>
            <and>
            <token inflected="yes" postag="subst:sg.*" postag_regexp="yes">życie</token>
            <token inflected="yes" postag="subst:pl.*" postag_regexp="yes">życie</token>
            </and>
        </pattern>
        <disambig action="remove" postag="subst:pl.*"></disambig>
        <example type="ambiguous" inputform="życia[życie/subst:pl:acc:n2,życie/subst:pl:nom:n2,życie/subst:pl:voc:n2,życie/subst:sg:gen:n2,żyć/ger:sg:gen:n2:imperf:aff:nonrefl]"
                 outputform="życia[życie/subst:sg:gen:n2,żyć/ger:sg:gen:n2:imperf:aff:nonrefl]">Nie miała słodkiego <marker>życia</marker>.</example>
    </rule>

    <rule id="PREP_GEN_SUBST_MAMY" name="mamy na końcu wypowiedzenia po wyrażeniu przyimkowym to zwykle rzeczownik">
        <pattern>
            <token postag="prep:gen.*" postag_regexp="yes"/>
            <token postag="subst.*gen.*" postag_regexp="yes"/>
            <marker><token>mamy</token></marker>
            <token postag_regexp="yes" postag="conj|interp:comma|SENT_END"><exception>zarówno</exception></token>
        </pattern>
        <disambig postag="subst:sg:gen:f"/>
        <example type="ambiguous" inputform="mamy[mama/subst:pl:acc:f,mama/subst:pl:nom:f,mama/subst:pl:voc:f,mama/subst:sg:gen:f,mieć/verb:fin:pl:pri:imperf:refl.nonrefl]"
                 outputform="mamy[mama/subst:sg:gen:f]">To było za życia <marker>mamy</marker>.</example>
        <example type="untouched">Wśród autorów mamy wielu ważnych polityków.</example>
    </rule>

    <rulegroup name="rzadkie rzeczowniki" id="subst_rarum">
        <rule>
            <pattern>
                <token regexp="yes">taka|taką</token>
            </pattern>
            <disambig action="filter" postag="adj.*"/>
        </rule>
        <rule>
            <pattern>
                <token regexp="yes">kłamie|czekał</token>
            </pattern>
            <disambig action="filter" postag="verb.*"/>
        </rule>
        <rule>
            <pattern>
                <token>nic</token>
            </pattern>
            <disambig action="remove"><wd lemma="nica" pos="subst:pl:gen:f">nic</wd></disambig>
        </rule>
        <rule>
            <pattern>
                <token>szczerze</token>
            </pattern>
            <disambig action="remove"><wd lemma="szczerza"/></disambig>
        </rule>
    </rulegroup>

    <rule id="EMISJA_CIEPLA" name="emisja ciepła -> subst">
        <pattern>
            <token inflected="yes" regexp="yes">emisja|strata|dostawa|wymiana|fala|ucieczka|porcja|utrata|produkcja|cena|pompa|wymiennik</token>
            <marker>
                <token>ciepła</token>
            </marker>
        </pattern>
        <disambig postag="subst:sg:gen:n2"/>
        <example type="untouched">Była ciepła, miła i uczynna.</example>
        <example type="ambiguous" inputform="ciepła[ciepło/subst:pl:acc:n2,ciepło/subst:pl:nom:n2,ciepło/subst:pl:voc:n2,ciepło/subst:sg:gen:n2,ciepły/adj:sg:nom.voc:f:pos]"
                 outputform="ciepła[ciepło/subst:sg:gen:n2]">Wytwórnia Sprzętu Komunikacyjnego „PZL Gorzyce” w Gorzycach, właścicielka ciepłowni, zawarła z gminą umowę na dostawę <marker>ciepła</marker> m.in. do szkoły i przedszkola.</example>
    </rule>

    <rule id="KUPNA_SUBST" name="oferta kupna -> subst">
        <pattern>
            <token inflected="yes" regexp="yes">oferta|nadwyżka|granica|umowa|propozycja|opcja|transakcja|redukcja|rekomendacja|okazja|dogrywka|decyzja|tendencja|szansa|wola|zlecenie|przewaga|data</token>
            <marker>
                <token>kupna</token>
            </marker>
        </pattern>
        <disambig postag="subst:sg:gen:n2"/>
    </rule>

    <rule id="LUFA_DZIALA" name="lufa działa -> subst">
        <pattern>
            <token inflected="yes">lufa</token>
            <marker><token>działa</token></marker>
        </pattern>
        <disambig postag="subst:sg:gen:n2"></disambig>
    </rule>

    <rule id="BO_DZIALA" name="bo/jak/czy działa -> verb">
        <pattern>
            <token regexp="yes">bo|czy|jak|gdzie|dopóki</token>
            <marker><token>działa</token></marker>
        </pattern>
        <disambig action="remove"><wd lemma="działo"/></disambig>
    </rule>

    <rule id="OSIEDLI_SUBST" name="mieszkańcy/rada osiedli => subst">
        <pattern>
        <token inflected="yes" regexp="yes">mieszkaniec|rada|komitet|lokator</token>
        <marker>
            <token>osiedli</token>
        </marker>
        </pattern>
        <disambig postag="subst:pl:gen:n2"/>
    </rule>

    <rule id="OSIEDLA_SUBST" name="mieszkańcy/rada osiedla => subst">
        <pattern>
            <token inflected="yes" regexp="yes">budowa|mieszkaniec|rada|komitet|lokator|centrum|koniec|model|rzecznik|przykład|wykonawca|remont|podział|brzydota|powstanie|krajobraz|projektant|mieszkanka|etap|bliskość|infrastruktura|zarząd|lokalizacja</token>
            <marker>
                <token>osiedla</token>
            </marker>
        </pattern>
        <disambig postag="subst:sg:gen:n2"/>
    </rule>

    <rule id="OSIEDLA_UPPER" name="osiedla Za Żelazną Bramą => subst">
        <pattern>
            <marker>
                <token>osiedla</token>
            </marker>
            <token regexp="yes">\p{Lu}\p{Ll}+|dla</token>
        </pattern>
        <disambig postag="subst:sg:gen:n2"/>
    </rule>

    <rule id="SLOWY" name="słowy – narzędnik archaiczny">
        <pattern>
            <token>słowy</token>
        </pattern>
        <disambig action="add"><wd pos="subst:pl:inst:p3" lemma="słowa"/></disambig>
    </rule>


    <!-- wyrazy do usunięcia z morfologika 2.2 -->
    <rule id="DREWNY" name="drewny to archaizm">
        <pattern>
            <token inflected="yes">drewny</token>
        </pattern>
        <disambig action="remove"><wd lemma="drewny"/></disambig>
    </rule>
    <rule id="halac" name="halać to przest.">
        <pattern>
            <token inflected="yes">halać</token>
        </pattern>
        <disambig action="remove"><wd lemma="halać"/></disambig>
    </rule>
    <rule id="KUPIA" name="kupia to przest.">
        <pattern>
            <token inflected="yes">kupia</token>
        </pattern>
        <disambig action="remove"><wd lemma="kupia"/></disambig>
    </rule>
    <rule id="KWIETNI" name="kwietni to archaizm">
        <pattern>
            <token inflected="yes">kwietni</token>
        </pattern>
        <disambig action="remove"><wd lemma="kwietni"/></disambig>
    </rule>
    <rule id="OBOJ" name="oboj to przestarzałe dziwactwo">
        <pattern>
            <token inflected="yes">oboj</token>
        </pattern>
        <disambig action="remove"><wd lemma="oboj"/></disambig>
    </rule>
    <rule id="OPADNY" name="opadny to przestarzałe dziwactwo">
        <pattern>
            <token inflected="yes">opadny</token>
        </pattern>
        <disambig action="remove"><wd lemma="opadny"/></disambig>
    </rule>
    <rule id="ROSNY" name="rosny to przestarzałe dziwactwo">
        <pattern>
            <token inflected="yes">rosny</token>
        </pattern>
        <disambig action="remove"><wd lemma="rosny"/></disambig>
    </rule>
    <rule id="ROSNIA" name="rośnia to przestarzałe dziwactwo">
        <pattern>
            <token inflected="yes">rośnia</token>
        </pattern>
        <disambig action="remove"><wd lemma="rośnia"/></disambig>
    </rule>
    <rule id="SOJUSZYC" name="sojuszyć to daw.">
        <pattern>
            <token inflected="yes">sojuszyć</token>
        </pattern>
        <disambig action="remove"><wd lemma="sojuszyć"/></disambig>
    </rule>
    <rule id="SPRZEDAJ" name="sprzedaj to przest.">
        <pattern>
            <token inflected="yes">sprzedaj</token>
        </pattern>
        <disambig action="remove"><wd lemma="sprzedaj"/></disambig>
    </rule>
    <rule id="STRUMIENIC" name="strumienić jest daw.">
        <pattern>
            <token inflected="yes">strumienić</token>
        </pattern>
        <disambig action="remove"><wd lemma="strumienić"/></disambig>
    </rule>
    <rule id="TAJEMNICZEC" name="tajemniczeć to archaizm">
        <pattern>
            <token inflected="yes">tajemniczeć</token>
        </pattern>
        <disambig action="remove"><wd lemma="tajemniczeć"/></disambig>
    </rule>
    <rule id="WSTRZYMALY" name="wstrzymały to archaizm">
        <pattern>
            <token inflected="yes">wstrzymały</token>
        </pattern>
        <disambig action="remove"><wd lemma="wstrzymały"/></disambig>
    </rule>
    <rule id="WINAC" name="winąć to daw.">
        <pattern>
            <token inflected="yes">winąć</token>
        </pattern>
        <disambig action="remove"><wd lemma="winąć"/></disambig>
    </rule>


    <rule id="CZUJE" name="czuje to nie czuj">
        <pattern>
            <token>czuje</token>
        </pattern>
        <disambig postag="verb:fin:sg:ter:imperf:refl.nonrefl"/>
    </rule>

    <rule id="dyrektorzy" name="dyrektorzy to zwykle subst">
        <pattern>
            <token>dyrektorzy</token>
        </pattern>
        <disambig action="remove"><wd lemma="dyrektorzyć"/></disambig>
    </rule>

    <rule id="GOSPODARZY_NA_OJCOWIZNIE" name="gospodarzy na ojcowiźnie -> czasownik">
        <pattern>
            <marker>
                <token>gospodarzy</token>
            </marker>
            <token>na</token>
            <token>ojcowiźnie</token>
        </pattern>
        <disambig postag="verb:fin:sg:ter:imperf:refl.nonrefl"/>
    </rule>

    <rule id="GOSPODARZY_SUBST" name="gospodarzy to zwykle dopełniacz">
        <pattern>
            <marker><token postag="subst.*" postag_regexp="yes">gospodarzy</token></marker>
        </pattern>
        <disambig action="remove"><wd lemma="gospodarzyć"/></disambig>
    </rule>

    <rule id="KLADZIE" name="kładzie to kłaść">
        <pattern>
            <token>kładzie</token>
        </pattern>
        <disambig postag="verb:fin:sg:ter:imperf:refl.nonrefl"/>
    </rule>

    <rule id="PLATNA" name="płatną to nie płatnąć">
        <pattern>
            <token>płatną</token>
        </pattern>
        <disambig action="remove"><wd lemma="płatnąć"/></disambig>
    </rule>


    <rule id="SWIEZY" name="świeży to nie świeżyć">
        <pattern>
            <token regexp="yes">śwież[ąy]</token>
        </pattern>
        <disambig action="remove"><wd lemma="świeżyć"/></disambig>
    </rule>

    <rule id="BOLI" name='boli to nie bola'>
        <pattern>
            <token>boli</token>
        </pattern>
        <disambig action="remove"><wd lemma="bola"/></disambig>
    </rule>

    <rule id="DOROSLA" name="osoba dorosła">
        <pattern>
            <token postag="subst:sg:nom:f">osoba</token>
            <token postag="adj:sg:nom.voc:f:pos">dorosła</token>
        </pattern>
        <disambig action="filterall"/>
    </rule>

    <rule id="DUZE" name="duże to nie duha">
        <pattern>
            <token>duże</token>
        </pattern>
        <disambig action="remove"><wd lemma="duha"/></disambig>
    </rule>

    <rule id="FURMANI" name="furmani to nie furmanić">
        <pattern>
            <token>furmani</token>
        </pattern>
        <disambig action="remove"><wd lemma="furmanić"/></disambig>
    </rule>

    <rule id="GLEBI" name="głębi to nie głębić">
        <pattern>
            <token>głębi</token>
        </pattern>
        <disambig action="remove"><wd lemma="głębić"/></disambig>
    </rule>

    <rule id="GOTOWI" name="gotowi to nie gotowić">
        <pattern>
            <token>gotowi</token>
        </pattern>
        <disambig action="remove"><wd lemma="gotowić"/></disambig>
    </rule>

    <rule id="MAJ" name="maj to nie maić">
        <pattern>
            <token>maj</token>
        </pattern>
        <disambig action="remove"><wd lemma="maić"/></disambig>
    </rule>

    <rule id="MUSI" name="musi to nie muszy">
        <pattern>
            <marker><token>musi</token></marker>
        </pattern>
        <disambig action="remove"><wd lemma="muszy"/></disambig>
    </rule>

    <rule id="NIZ" name="niż to nie nizać">
        <pattern>
            <token>niż</token>
        </pattern>
        <disambig action="remove" postag="verb.*"/>
    </rule>

    <rule id="OGNI" name="ogni to nie ognić">
        <pattern>
            <marker><token>ogni</token></marker>
        </pattern>
        <disambig action="remove"><wd lemma="ognić"/></disambig>
    </rule>

    <rule id="PADLA_OFIARA" name="padła ofiarą to czasownik">
        <pattern>
            <marker>
                <token>padła</token>
            </marker>
            <token regexp="yes">ofiarą|na</token>
        </pattern>
        <disambig postag="verb:praet:sg:f:ter:perf:nonrefl"></disambig>
        <example type="untouched">W stajni leżała padła szkapa.</example>
        <example type="ambiguous" inputform="padła[padło/subst:pl:acc:n2,padło/subst:pl:nom:n2,padło/subst:pl:voc:n2,padło/subst:sg:gen:n2,padły/adj:sg:nom.voc:f:pos,paść/verb:praet:sg:f:ter:perf:nonrefl]"
                 outputform="padła[paść/verb:praet:sg:f:ter:perf:nonrefl]">Józefa <marker>padła</marker> ofiarą przemytu nocników.</example>
    </rule>

    <rule id="PATRZY" name="patrzy to nie pater">
        <pattern>
            <token>patrzy</token>
        </pattern>
        <disambig action="remove"><wd lemma="pater"/></disambig>
    </rule>

    <rule id="podoba" name="podoba to nie subst">
        <pattern>
            <token>podoba</token>
        </pattern>
        <disambig action="remove"><wd lemma="podoba"/></disambig>
    </rule>

    <rule id="PORECZY_SCHODOW" name="poręczy schodów to nie poręczyć">
        <pattern>
            <marker><token>poręczy</token></marker>
            <token>schodów</token>
        </pattern>
        <disambig action="remove"><wd lemma="poręczyć"/></disambig>
    </rule>

    <rule id="PROZNIACZY" name="próźniaczy to nie próźniaczyć">
        <pattern>
            <token>próżniaczy</token>
        </pattern>
        <disambig action="remove"><wd lemma="próżniaczyć"/></disambig>
    </rule>

    <rule id="PRZECIE" name="przecie to nie przeć">
        <pattern>
            <token>przecie</token>
        </pattern>
        <disambig action="replace"><wd lemma="przecie" pos="qub"/></disambig>
    </rule>

    <rule id="ROSNIE" name="rośnie to raczej czasownik">
        <pattern>
            <token>rośnie</token>
        </pattern>
        <disambig postag="verb:fin:sg:ter:imperf:nonrefl"/>
    </rule>

    <rule id="ROZSTROJ" name="rozstrój to nie rozstroić (AdamP)">
        <pattern>
            <token>rozstrój</token>
        </pattern>
        <disambig action="remove"><wd lemma="rozstroić"/></disambig>
    </rule>

    <rule id="RZECZ" name="rzecz to prawie nigdy nie jest rzec">
        <pattern>
            <token>rzecz</token>
        </pattern>
        <disambig action="remove"><wd lemma="rzec"/></disambig>
    </rule>

    <rule id="STAJE" name="staje to czasownik (jeśli nie z liczebnikiem, kaskada z num_congr">
        <pattern>
            <token postag="verb:fin:sg:ter:.*" postag_regexp="yes">staje</token>
        </pattern>
        <disambig action="filterall"/>
    </rule>

    <rule id="STALA_ADJ" name="cena/kwatera… stała">
        <pattern>
            <token postag="subst:sg:nom:f" regexp="yes">cena|kwatera|wystawa|instytucja|opłata</token>
            <token postag="adj:sg:nom.voc:f:pos">stała</token>
        </pattern>
        <disambig action="filterall"/>
    </rule>

    <rule id="BYC_ONA_STALA_ADJ" name="być ona stała -> adj">
        <pattern>
            <token inflected="yes">być</token>
            <token>ona</token>
            <marker>
            <token>stała</token>
            </marker>
        </pattern>
        <disambig postag="adj:sg:nom.voc:f:pos"/>
    </rule>


    <rule id="SKRAJNIE" name="skrajnie to też adv">
        <pattern>
            <marker><token>skrajnie</token></marker>
            <token regexp="yes" inflected="yes">liberalny|prawicowy|lewicowy|negatywny|pesymistyczny|niebezpieczny|depresyjny|antyrządowy|nacjonalistyczny</token>
        </pattern>
        <disambig postag="adv:pos"/>
    </rule>

    <rule id="TYLE_TYLI" name="tyle to nie tyli">
        <pattern><token>tyle</token></pattern>
        <disambig action="remove"><wd lemma="tyli"/></disambig>
    </rule>

    <rule id="WALNIE_VERB" name="walnie pięścią to walnąć">
        <pattern>
            <marker><token>walnie</token></marker>
            <token>pięścią</token>
        </pattern>
        <disambig action="remove"><wd lemma="walnie"/></disambig>
    </rule>

    <rule id="WALNIE_ADV_1" name="walnie przyF">
        <pattern>
            <marker><token skip="2" postag="adv:pos">walnie</token></marker>
            <token inflected="yes">przyczynić</token>
        </pattern>
        <disambig action="remove"><wd lemma="walnąć"/></disambig>
    </rule>

    <rule id="WALNIE_ADV_2" name="przyczynić walnie">
        <pattern>
            <token skip="4" inflected="yes">przyczynić</token>
            <marker><token postag="adv:pos">walnie</token></marker>
        </pattern>
        <disambig action="remove"><wd lemma="walnąć"/></disambig>
        <example type="untouched">On walnie pięścią.</example>
        <example type="ambiguous" inputform="walnie[walnie/adv:pos,walnąć/verb:fin:sg:ter:perf:refl.nonrefl]" outputform="walnie[walnie/adv:pos]">Przyczynił się do tego <marker>walnie</marker> Jan Dzban.</example>
    </rule>

    <rule id="WASZE" name="wasze to nie waszeć">
        <pattern>
            <token inflected="yes">wasze</token>
        </pattern>
        <disambig action="remove"><wd lemma="wasze"/></disambig>
    </rule>

    <rule id="WEGLI" name="węgli to nie węglić">
        <pattern>
            <token>węgli</token>
        </pattern>
        <disambig action="remove"><wd lemma="węglić"/></disambig>
    </rule>

    <rule id="wyplata" name="wypłata odsetek -> rzeczownik">
        <pattern>
            <token postag="subst:sg:nom:f">wypłata</token>
            <token regexp="yes" postag_regexp="yes" postag=".*gen.*">odsetek|pieniędzy|emerytury|renty|wynagrodzenia</token>
        </pattern>
        <disambig action="filterall"/>
    </rule>

    <rule id="SPADLY" name="spadła/spadły o/do -> czasownik">
        <pattern>
            <marker>
                <token regexp="yes">spadł[ay]</token>
            </marker>
            <token regexp="yes">d?o</token>
        </pattern>
        <disambig action="filter" postag="verb:praet:.*"/>
    </rule>

    <rule id="SPADLY_AZ" name="spadła/spadły aż o/do -> czasownik">
        <pattern>
            <marker>
                <token regexp="yes">spadł[ay]</token>
            </marker>
            <token>aż</token>
            <token regexp="yes">d?o</token>
        </pattern>
        <disambig action="filter" postag="verb:praet:.*"/>
    </rule>

    <rule id="TRWALA_AZ" name="trwała aż do -> czasownik">
        <pattern>
            <marker>
                <token regexp="yes">trwał[ay]</token>
            </marker>
            <token>aż</token>
            <token>do</token>
        </pattern>
        <disambig action="filter" postag="verb:praet:.*"/>
    </rule>

    <rule id="WZROSLA" name="wzrosła o/do -> czasownik">
        <pattern>
            <marker>
                <token regexp="yes">wzrosł[ay]</token>
            </marker>
            <token regexp="yes">d?o</token>
        </pattern>
        <disambig action="filter" postag="verb:praet:.*"/>
    </rule>

    <rule id="WYNIOSLA" name="wyniosła + liczba -> czasownik">
        <pattern>
            <marker>
                <token>wyniosła</token>
            </marker>
            <token regexp="yes">\d</token>
        </pattern>
        <disambig action="filter" postag="verb:praet:sg:f:ter:perf:refl.nonrefl"/>
    </rule>

    <rule id="WYNIOSLA_OK" name="wyniosła + ok. -> czasownik">
        <pattern>
            <marker>
                <token>wyniosła</token>
            </marker>
            <token>ok</token>
            <token>.</token>
        </pattern>
        <disambig action="filter" postag="verb:praet:sg:f:ter:perf:refl.nonrefl"/>
    </rule>

    <rule id="WYNIOSLA_PONAD" name="wyniosła + ponad + liczba -> czasownik">
        <pattern>
            <marker>
                <token>wyniosła</token>
            </marker>
            <token regexp="yes">ponad|łącznie|zaledwie</token>
            <token regexp="yes">\d</token>
        </pattern>
        <disambig action="filter" postag="verb:praet:sg:f:ter:perf:refl.nonrefl"/>
    </rule>


    <rule id="WYNIOSLA_NUM" name="wyniosła + liczba -> czasownik">
        <pattern>
            <marker>
                <token>wyniosła</token>
            </marker>
            <token postag_regexp="yes" postag="num.*"/>
        </pattern>
        <disambig action="filter" postag="verb:praet:sg:f:ter:perf:refl.nonrefl"/>
    </rule>


    <rule id="ZOLCI" name="żółci to nie żółcić">
        <pattern>
            <token>żółci</token>
        </pattern>
        <disambig action="remove"><wd lemma="żółcić"/></disambig>
    </rule>

    <rule id="WIELKI_SWOJ_ADJ" name="wielki, swój, piękny to nie rzeczownik">
        <pattern>
            <token inflected="yes" regexp="yes">wielki|swój|piękny</token>
        </pattern>
        <disambig action="filter" postag="adj.*"/>
    </rule>

    <rule id="dobry_adj" name="dobry to przymiotnik przed rzeczownikiem">
        <pattern>
            <unify>
                <feature id="gender"/><feature id='number'/><feature id="case"/>
                <token inflected="yes" postag="adj.*" postag_regexp="yes">dobry</token>
                <token postag="(?:subst|ger).*" postag_regexp="yes"/>
            </unify>
        </pattern>
        <disambig action="unify"/>
    </rule>

    <rule id="buty" name="buta to rzeczownik niepoliczalny">
        <pattern>
            <marker>
                <and>
                    <token inflected="yes" postag_regexp="yes">but</token>
                    <token inflected="yes" postag="subst:pl.*" postag_regexp="yes">buta
                        <exception inflected="yes" postag="subst:sg.*" postag_regexp="yes">buta</exception>
                    </token>
                </and>
            </marker>
        </pattern>
        <disambig action="remove"><wd lemma="buta"/></disambig>
    </rule>

    <rule id="WYZYNA_UPPERCASE" name="Wyżyna to nie czasownik">
        <pattern case_sensitive="yes">
            <marker>
                <token>Wyżyna</token>
            </marker>
                <token regexp="yes">\p{Lu}\p{Ll}+</token>
        </pattern>
        <disambig action="remove"><wd lemma="wyżynać"/></disambig>
        <example type="untouched">Ząbek mu się wyżyna.</example>
        <example type="ambiguous" inputform="Wyżyna[wyżyna/subst:sg:nom:f,wyżynać/verb:fin:sg:ter:imperf:refl.nonrefl]"
                 outputform="Wyżyna[wyżyna/subst:sg:nom:f]"><marker>Wyżyna</marker> Dekan opada ku wschodowi i zachodowi krawędziowymi górami.</example>
    </rule>

    <rule id="INNY_NIZ_CONJ" name="inny niż => conj">
    <pattern>
        <token inflected="yes">inny</token>
        <token min="0" max="1">,</token>
        <marker>
            <token>niż</token>
        </marker>
    </pattern>
    <disambig postag="conj"/>
    </rule>

    <rule id="INNY_SUBST_NIZ_CONJ" name="inny niż => conj">
        <pattern>
            <unify><feature id="gender"/><feature id="case"/><feature id="number"/>
                <token inflected="yes">inny</token>
                <token postag="subst.*" postag_regexp="yes"/>
            </unify>
            <token min="0" max="1">,</token>
            <marker>
                <token>niż</token>
            </marker>
        </pattern>
        <disambig postag="conj"/>
    </rule>

    <rule id="INACZEJ_NIZ_CONJ" name="inaczej niż => conj">
        <pattern>
            <token>inaczej</token>
            <token min="0" max="1">,</token>
            <marker>
                <token>niż</token>
            </marker>
        </pattern>
        <disambig postag="conj"/>
        <example type="untouched">Idzie niż z północy.</example>
        <example type="ambiguous" inputform="niż[niż/conj,niż/prep:nom,niż/subst:sg:acc:m3,niż/subst:sg:nom:m3,niża/subst:pl:gen:f]"
                 outputform="niż[niż/conj]">— Wszystko, co mówi wasza wielmożność, jest prawdą, lecz poszło całkiem inaczej, <marker>niż</marker> myślicie.</example>
    </rule>

    <rule id="COM_NIZ" name="niż po stopniu wyższym">
        <pattern>
            <token skip="3" postag=".*:com" postag_regexp="yes"></token>
            <marker><token>niż</token></marker>
        </pattern>
        <disambig postag="conj"/>
    </rule>

    <rule id="COM_NIZ_CONJ" name="stopień wyższy + niż => conj">
        <pattern>
            <token postag=".*:com" postag_regexp="yes"/>
            <token min="0" max="1">,</token>
            <marker>
                <token>niż</token>
            </marker>
        </pattern>
        <disambig postag="conj"/>
    </rule>
    <rule id="COM_NIZ_CONJ_SLOPE" name="stopień wyższy + niż => conj">
        <pattern>
            <token skip="-1" postag=".*:com" postag_regexp="yes"/>
            <token>,</token>
            <marker>
                <token>niż</token>
            </marker>
        </pattern>
        <disambig postag="conj"/>
    </rule>
    <rule id="WIECEJ_NIZ_CONJ_SLOPE" name="stopień wyższy + niż => conj">
        <pattern>
            <token skip="-1" regexp="yes">więcej|raczej</token>
            <marker>
                <token>niż</token>
            </marker>
        </pattern>
        <disambig postag="conj"/>
    </rule>


    <rule id="BARDZIEJ_NIZ_CONJ" name="stopień wyższy z bardziej + niż => conj">
        <pattern>
            <token>bardziej</token>
            <token skip="10" postag="(adj|ppas|pact).*" postag_regexp="yes"></token>
            <marker>
                <token>niż</token>
            </marker>
        </pattern>
        <disambig postag="conj"/>
        <example type="untouched">Czyż to piękny ptak.</example>
        <example type="ambiguous" inputform="niż[niż/conj,niż/prep:nom,niż/subst:sg:acc:m3,niż/subst:sg:nom:m3,niża/subst:pl:gen:f]"
                 outputform="niż[niż/conj]">W Polsce także jesteśmy dziś bardziej zadowoleni, notabene, ze swojego życia seksualnego <marker>niż</marker> w latach 80.</example>
    </rule>

    <rule id="PELNIA_ZYCIA" name="pełnią życia/księżyca to rzeczownik">
        <pattern>
            <marker>
                <token postag="subst:sg:inst:f">pełnią</token>
                <token regexp="yes" postag=".*gen.*" postag_regexp="yes">życia|księżyca|szczęścia|władzy|praw</token>
            </marker>
        </pattern>
        <disambig action="filterall"/>
    </rule>

    <rule id="PELNIA_FUNKCJE" name="pełnią funkcję -> czasownik">
        <pattern>
            <marker>
                <token postag="verb:fin:pl:ter:imperf:refl.nonrefl">pełnią</token>
                <token regexp="yes" postag=".*acc|nom.*" postag_regexp="yes">funkcję|dyżur|rolę|wartę|służbę|misję|obowiązki</token>
            </marker>
        </pattern>
        <disambig action="filterall"/>
    </rule>

    <rule id="POWSTALA" name="powstała jesienią > czasownik">
        <pattern>
            <marker>
            <token>powstała</token>
            </marker>
            <token regexp="yes">jesienią|wiosną</token>
        </pattern>
        <disambig postag="verb:praet:sg:f:ter:perf:nonrefl"/>
        <example type="ambiguous" inputform="powstała[powstać/verb:praet:sg:f:ter:perf:nonrefl,powstały/adj:sg:nom.voc:f:pos]"
                 outputform="powstała[powstać/verb:praet:sg:f:ter:perf:nonrefl]">Spółka "Przekaz" <marker>powstała</marker> jesienią 1990 r.</example>
    </rule>

    <rule id="POZOSTALA" name="pozostała osobą > czasownik">
        <pattern>
            <marker>
                <token>pozostała</token>
            </marker>
            <token postag='subst:sg:inst:f'/>
        </pattern>
        <disambig postag="verb:praet:sg:f:ter:perf:nonrefl"/>
        <example type="ambiguous" inputform="pozostała[pozostać/verb:praet:sg:f:ter:perf:nonrefl,pozostały/adj:sg:nom.voc:f:pos]"
                 outputform="pozostała[pozostać/verb:praet:sg:f:ter:perf:nonrefl]">Unia, podobnie jak jej poprzedniczka, <marker>pozostała</marker> partią wyborców o umiarkowanych poglądach.</example>
    </rule>

    <rule id="rok_w_rok" name="rok w rok -> biernik (wg NKJP)">
        <pattern>
            <marker>
                <token>rok</token>
            </marker>
            <token>w</token>
            <token>rok</token>
        </pattern>
        <disambig postag="subst:sg:acc:m3"/>
    </rule>

    <rule id="SPOSOB_W_JAKI" name="sposób, w jaki -> rzeczownik">
        <pattern>
            <marker>
                <token>sposób</token>
            </marker>
            <token>,</token>
            <token>w</token>
            <token>jaki</token>
        </pattern>
        <disambig action="filter" postag="subst.*"/>
    </rule>

    <rule id="SPOSOB_GER_GEN" name="sposób x-owania -> rzeczownik">
        <pattern>
            <marker>
                <token>sposób</token>
            </marker>
            <token postag="ger:sg:gen:n2.*" postag_regexp="yes"/>
        </pattern>
        <disambig action="filter" postag="subst.*"/>
    </rule>

    <rule id="SPOSOB_PPRON_GER_GEN" name="sposób jego x-owania -> rzeczownik">
        <pattern>
            <marker>
                <token postag="subst.*" postag_regexp="yes">sposób</token>
                <token postag="ppron3:.*:gen.*" postag_regexp="yes"/>
                <token postag="ger:sg:gen:n2.*" postag_regexp="yes"/>
            </marker>
        </pattern>
        <disambig action="filterall"/>
    </rule>

    <rule id="powstanie_gen" name="powstanie x-a > rzeczownik">
        <pattern>
            <marker>
                <token postag="subst.*" postag_regexp="yes">powstanie</token>
                <token postag=".*:gen.*" postag_regexp="yes"/>
            </marker>
        </pattern>
        <disambig action="filterall"/>
    </rule>

    <rule id="ZAPADLA" name="zapadła większością > czasownik">
        <pattern>
            <marker>
                <token>zapadła</token>
            </marker>
            <token>większością</token>
        </pattern>
        <disambig postag="verb:praet:sg:f:ter:perf:refl.nonrefl"/>
    </rule>

    <rule id="ADJ_LIGA" name="przymiotnik + liga => rzeczonik">
    <pattern>
        <unify>
            <feature id="case"/><feature id="number"/><feature id="gender"/>
            <token postag="adj.*" postag_regexp="yes"/>
            <token postag="subst.*" postag_regexp="yes">liga</token>
        </unify>
    </pattern>
    <disambig action="unify"/>
        <example type="ambiguous" inputform="liga[liga/subst:sg:nom:f,ligać/verb:fin:sg:ter:imperf:nonrefl,ligać/verb:fin:sg:ter:imperf:refl.nonrefl]"
                 outputform="liga[liga/subst:sg:nom:f]">Dziś rozpoczyna kolejny sezon francuska <marker>liga</marker> piłkarska.</example>
    </rule>

    <rule id="PRAWA_SUBST" name="prawa jako rzeczownik">
        <pattern>
            <token regexp="yes" inflected="yes">moc|litera|wykładowca|wykładowczyni|egzekwować|teoria|światło|grunt|tworzenie|system|harmonizacja|rozumienie|interpretacja|spółka|obraza|reforma|powaga|praktyka|źródło|nauka|nowelizacja|historyk|utrata|wykładnia|ochrona|student(?:ka)?|państwo|przepis|inflacja|rola|socjologia|doktryna|nowelizacja|zmiana|modyfikacja|realizacja|historia|kodyfikacja|norma|formuła|instytucja|parodia|domena|zasada|liberalizacja|odmowa|filozofia|omnipotencja|istota|funkcja|precyzja|egzekucja|dyktatura|ingerencja|nadinterpretacja|materia|dziedzina|kwestia|psychologia|struktura|historyk|majestat|implementacja</token>
            <marker>
                <token>prawa</token>
            </marker>
        </pattern>
        <disambig postag="subst:sg:gen:n2"/>
    </rule>


    <rule id="CO_TWIERDZA" name="jak/co twierdzą -> czasownik">
        <pattern>
            <token regexp="yes">co|jak</token>
            <marker><token>twierdzą</token></marker>
        </pattern>
        <disambig action="remove"><wd lemma="twierdza"/></disambig>
    </rule>

    <rule id="TWIERDZA_ZE" name="twierdzą, że -> czasownik">
        <pattern>
            <marker><token>twierdzą</token></marker>
            <token>,</token>
            <token regexp="yes">że|iż</token>
        </pattern>
        <disambig action="remove"><wd lemma="twierdza"/></disambig>
    </rule>

    <rule id="SWIECI" name="święci garnki -> nie czasownik">
        <pattern>
            <marker><token>święci</token></marker>
            <token>garnki</token>
            <token>lepią</token>
        </pattern>
        <disambig postag="subst:pl:nom:m1"/>
        <example type="ambiguous" inputform="święci[święcić/verb:fin:sg:ter:imperf:refl.nonrefl,święty/adj:pl:nom.voc:m1.p1:pos,święty/subst:pl:nom:m1,święty/subst:pl:voc:m1]"
                 outputform="święci[święty/subst:pl:nom:m1]">Nie <marker>święci</marker> garnki lepią.</example>

    </rule>

    <rule id="SWIECI_GORSZY_ADJ" name="świeci + rzeczownik => przymiotnik">
        <pattern>
            <unify>
                <feature id="case"/><feature id="number"/><feature id="gender"/>
                <token postag="adj.*" postag_regexp="yes" regexp="yes">święci|gorszy|praska</token>
                <token postag="subst.*" postag_regexp="yes"/>
            </unify>
        </pattern>
        <disambig action="unify"/>
        <example type="untouched">Nie wiem, co tam się święci.</example>
        <example type="ambiguous" inputform="święci[święcić/verb:fin:sg:ter:imperf:refl.nonrefl,święty/adj:pl:nom.voc:m1.p1:pos,święty/subst:pl:nom:m1,święty/subst:pl:voc:m1]"
                 outputform="święci[święty/adj:pl:nom.voc:m1.p1:pos]">Co ci <marker>święci</marker> ludzie mają tam do roboty?</example>
        <example type="ambiguous" inputform="Gorszy[gorszyć/verb:fin:sg:ter:imperf:refl.nonrefl,zły/adj:sg:acc:m3:com,zły/adj:sg:nom.voc:m1.m2.m3:com]"
        outputform="Gorszy[zły/adj:sg:acc:m3:com,zły/adj:sg:nom.voc:m1.m2.m3:com]"><marker>Gorszy</marker> rok miała niemiecka marka.</example>
    </rule>

    <rule id="GORSZY_OD" name="gorszy/gorszą + od/niż => przymiotnik">
        <pattern>
            <marker>
                <token regexp="yes">gorsz[yą]</token>
            </marker>
            <token min="0" max="1" postag="adv.*|qub" postag_regexp="yes"></token>
            <token regexp="yes">ode?|niż</token>
        </pattern>
        <disambig action="filter" postag="adj.*"/>
    </rule>

    <rule id="PRASKA_SUBST" name="rzeczownik + praska => przymiotnik">
        <pattern>
            <unify>
                <feature id="gender"/><feature id="case"/><feature id="number"/>
                <token postag="subst.*" postag_regexp="yes"/>
                <token postag="adj.*" postag_regexp="yes">praska</token>
            </unify>
        </pattern>
        <disambig action="unify"/>
        <example type="ambiguous" inputform="praska[praska/subst:sg:nom:f,praskać/verb:fin:sg:ter:imperf:refl.nonrefl,praski/adj:sg:nom.voc:f:pos]"
                 outputform="praska[praski/adj:sg:nom.voc:f:pos]">Najbardziej ekspansywnym rynkiem w regionie jest giełda <marker>praska</marker>.</example>
    </rule>

    <rule id="atmosfera_swieta" name="atmosfera święta -> rzeczownik">
        <pattern>
            <token inflected="yes">atmosfera</token>
            <marker>
                <token>święta</token>
            </marker>
        </pattern>
        <disambig postag="subst:sg:gen:n2"/>
        <example type="untouched">Ona była święta.</example>
        <example type="ambiguous" inputform="święta[święta/subst:pl:acc:p3,święta/subst:pl:nom:p3,święta/subst:pl:voc:p3,święta/subst:sg:nom:f,święta/subst:sg:voc:f,święto/subst:pl:acc:n2,święto/subst:pl:nom:n2,święto/subst:pl:voc:n2,święto/subst:sg:gen:n2,święty/adj:sg:nom.voc:f:pos]"
                 outputform="święta[święto/subst:sg:gen:n2]">Wpisuję się do grupy widzów, którzy oglądając tę inscenizację czuli atmosferę <marker>święta</marker>.</example>
    </rule>

    <rule id="RAI" name="TV RAI => rzeczownik">
        <pattern case_sensitive="yes">
            <token>RAI</token>
        </pattern>
        <disambig action="filter" postag="subst.*n2"/>
    </rule>

    <rule id="SKALA" name="skala jako rzeczownik">
        <pattern>
            <marker><token>skala</token></marker>
            <token>1</token>
            <token>:</token>
        </pattern>
        <disambig action="remove"><wd lemma="skalać"/></disambig>
    </rule>

    <rule id="SKALA_ADJ" name="skala z przymiotnikiem -> rzeczownik">
        <pattern>
            <marker>
                <unify>
                    <feature id="gender"/><feature id="case"/><feature id="number"/>
                    <token postag="subst:sg:nom:f">skala</token>
                    <token postag="(pact|ppas|adj).*" postag_regexp="yes"/>
                </unify>
            </marker>
        </pattern>
        <disambig action="unify"/>
    </rule>

    <rule id="SKALA_GEN" name="skala z dopełniaczem jako rzeczownik">
        <pattern>
            <marker>
                <token postag="subst:sg:nom:f">skala</token>
                <token postag="subst:sg:gen.*" postag_regexp="yes"/>
            </marker>
        </pattern>
        <disambig action="filterall"/>
    </rule>


    <rule id="SKORA_DZIKA" name="skóra dzika > rzeczownik">
        <pattern>
            <token inflected="yes">skóra</token>
            <marker><token>dzika</token></marker>
        </pattern>
        <disambig postag="subst:sg:gen:m2"/>
        <example type="ambiguous" inputform="dzika[dzik/subst:sg:acc:m2,dzik/subst:sg:gen:m2,dziki/adj:sg:nom.voc:f:pos]"
                 outputform="dzika[dzik/subst:sg:gen:m2]">Miał na plecach skórę <marker>dzika</marker>.</example>
    </rule>

    <rule id="BRONI_SUBST" name="broni jako genetiwus">
        <pattern>
            <token regexp="yes" inflected="yes">zawieszenie|nierozprzestrzenianie|braterstwo|posiadać|użyć|towarzysz|noszenie|dostawa|rodzaj|magazyn|eksport|skład</token>
            <marker><token>broni</token></marker>
        </pattern>
        <disambig postag="subst:sg:gen:f"/>
    </rule>

    <rule id="BURZY_SUBST" name="burzy jako genetiwus">
        <pattern>
            <token regexp="yes" inflected="yes">pomruk|odgłos|początek|grzmot|epilog|czas|nadejście|ryk|okres|skutek|metoda|trakt|środek|przejście|premiera</token>
            <marker><token>burzy</token></marker>
        </pattern>
        <disambig postag="subst:sg:gen:f"/>
    </rule>

    <rule id="Burzy_subst_2" name="burzy jako genetiwus">
        <pattern>
            <marker><token>burzy</token></marker>
            <token regexp="yes">mózgów|oklasków|Szekspira</token>
        </pattern>
        <disambig postag="subst:sg:gen:f"/>
    </rule>
    
    <rule id="CIAZY_SUBST" name="ciąży jako genetiwus">
        <pattern>
            <token regexp="yes" inflected="yes">oświadczenie|zakończenie|przery?wanie|trymestr|zaawansowany|niechciany|niepożądany|zapobiegać|nieślubny|miesiąc|patologia|tydzień|okres</token>
            <marker><token>ciąży</token></marker>
        </pattern>
        <disambig postag="subst:sg:gen:f"></disambig>
    </rule>

    <rule id="GADA_SUBST" name="gada jako genetiwus">
        <pattern>
            <token regexp="yes" inflected="yes">prehistoryczny|zabić|spojrzenie</token>
            <marker><token>gada</token></marker>
        </pattern>
        <disambig postag="subst:sg:gen:m2"></disambig>
        <example type="untouched">Dobrze gada!</example>
    </rule>

    <rule id="GOSC_SUBST" name="gość jako rzeczownik">
        <pattern>
            <marker><token>gość</token></marker>
            <token postag="(?:subst|ger|depr).*gen.*" postag_regexp="yes"/>
        </pattern>
        <disambig postag="subst:sg:nom:m1"/>
    </rule>

    <rule id="KULI_SUBST" name="kuli jako genetiwus">
        <pattern>
            <token regexp="yes" inflected="yes">świst|zakątek|kształt|promień|obszar|powierzchnia|rejon|efekt|obwód|środek|uderzenie|punkt|lot|wnętrze|ruch|miejsce|objętość</token>
            <marker><token>kuli</token></marker>
        </pattern>
        <disambig postag="subst:sg:gen:f"></disambig>
    </rule>

    <rule id="DOBRZE_GADA" name="gada jako czasownik">
        <pattern>
            <token postag="adv.*" postag_regexp="yes"></token>
            <marker><token>gada</token></marker>
        </pattern>
        <disambig postag="verb:fin:sg:ter:imperf:refl.nonrefl"/>
        <example type="ambiguous" inputform="gada[gad/subst:sg:acc:m1,gad/subst:sg:acc:m2,gad/subst:sg:gen:m1,gad/subst:sg:gen:m2,gadać/verb:fin:sg:ter:imperf:refl.nonrefl]"
                 outputform="gada[gadać/verb:fin:sg:ter:imperf:refl.nonrefl]">Dobrze <marker>gada</marker>!</example>
    </rule>

    <rule id="KLUCZY_SUBST" name="kluczy jako genetiwus pluralis">
        <pattern>
            <token regexp="yes" inflected="yes">pęk|komplet|brzęk|dorabianie|para|oddanie|kradzież|zestaw|wymiana</token>
            <marker><token>kluczy</token></marker>
        </pattern>
        <disambig postag="subst:pl:gen:m3"></disambig>
    </rule>

    <rule id="ZIELENI_SUBST" name="zieleni jako genetiwus">
        <pattern>
            <token regexp="yes" inflected="yes">architektura|pas|oaza|odcień|pielęgnacja|pasmo|skrawek|zarząd|teren|klin|enklawa|aranżacja|zakład|kępa|skupisko|architekt|wydział|pracownik|plama|kawałek</token>
            <marker><token>zieleni</token></marker>
        </pattern>
        <disambig postag="subst:sg:gen:f"></disambig>
    </rule>

    <rule id="OKRYWA_VERB" name="okrywa jako rzeczownik">
        <pattern>
            <marker><token>okrywa</token></marker>
            <token regexp="yes">go|ją</token>
        </pattern>
        <disambig action="remove"><wd lemma="okrywa"/></disambig>
    </rule>

    <rule id="OPIEKA_SUBST" name="opieka jako rzeczownik">
        <pattern>
            <marker><token regexp="yes">opiek[ąa]</token></marker>
            <token>nad</token>
            <token regexp="yes" inflected="yes">dziecko|potomstwo|zabytek|pacjent|bezdomny|wnuk|klient|starszy|matka|kobieta|człowiek|on|Polonia</token>
        </pattern>
        <disambig action="remove" postag="verb.*"/>
        <example type="ambiguous" inputform="opieka[opieka/subst:sg:nom:f,opiekać/verb:fin:sg:ter:imperf:refl.nonrefl]"
                 outputform="opieka[opieka/subst:sg:nom:f]">Obrona, <marker>opieka</marker> nad potomstwem</example>
    </rule>

    <rule id="PIEKLA_SUBST" name="piekła jako genetiwus">
        <pattern>
            <token regexp="yes" inflected="yes">obawa|dno|obraz|wizja|przedsionek|przedsmak|krąg|istnienie|obraza|otchłań|wrota|brama|środek</token>
            <marker><token>piekła</token></marker>
        </pattern>
        <disambig postag="subst:sg:gen:n2"/>
    </rule>

    <rule id="PIEKLO_SUBST" name="piekło jako nominatiwus/akuzatyw">
        <pattern>
            <token>niebo</token>
            <token>i</token>
            <marker><token>piekło</token></marker>
        </pattern>
        <disambig action="remove"><wd lemma="piec"/></disambig>
    </rule>

    <rule id="POWODZI_SUBST" name="powodzi jako genetiwus">
        <pattern>
            <token regexp="yes" inflected="yes">klęska|zalew|katastrofa|ofiara}wynik|niebezpieczeństwo|czas|ryzyko|trakt|przyczyna</token>
            <marker><token>powodzi</token></marker>
        </pattern>
        <disambig postag="subst:sg:gen:f"></disambig>
    </rule>

    <rulegroup id="PRZYJAZNI_SUBST" name="przyjaźni jako genetiwus">
        <rule>
        <pattern>
            <token regexp="yes" inflected="yes">order|wyraz|pomnik|towarzystwo|więź|pakt|deklaracja|dowód|atmosfera|symbol|manifestacja|osiedle|szlak|granica</token>
            <marker><token>przyjaźni</token></marker>
        </pattern>
        <disambig postag="subst:sg:gen:f"></disambig>
    </rule>
    </rulegroup>

    <rule id="ROWNA_ADJ" name="równa jako przymiotnik">
        <pattern>
            <marker><token>równa<exception scope="previous">się</exception></token></marker>
            <token postag=".*dat:.*" postag_regexp="yes"/>
        </pattern>
        <disambig postag="adj:sg:nom.voc:f:pos"/>
        <example type="untouched">Ta obelga się równa temu, czego doświadczyłem wczoraj.</example>
        <example type="ambiguous" inputform="równa[równać/verb:fin:sg:ter:imperf:refl.nonrefl,równy/adj:sg:nom.voc:f:pos]" outputform="równa[równy/adj:sg:nom.voc:f:pos]">Ta obelga jest bodaj <marker>równa</marker> temu, czego doświadczyłem wczoraj.</example>
    </rule>

    <rule id="SOLI_SUBST" name="soli jako genetiwus">
        <pattern>
            <token regexp="yes" inflected="yes">szczypta|brak|niedostatek|kopalnia|warzelnia|łyżeczka|słup|baryłka|roztwór|kryształek|beczka|łyżka|pokład|tona|kilo|odrobina|spożycie|kryształ|grudka|bryła</token>
            <marker><token>soli</token></marker>
        </pattern>
        <disambig postag="subst:sg:gen:f"></disambig>
        <example type="ambiguous" inputform="soli[sol/subst:pl:gen:m2,sola/subst:pl:gen:f,sola/subst:sg:dat:f,sola/subst:sg:gen:f,sola/subst:sg:loc:f,solić/verb:fin:sg:ter:imperf:refl.nonrefl,sól/subst:pl:gen:f,sól/subst:sg:dat:f,sól/subst:sg:gen:f,sól/subst:sg:loc:f,sól/subst:sg:voc:f]"
                 outputform="soli[sól/subst:sg:gen:f]">Mam szczyptę <marker>soli</marker>.</example>
    </rule>

    <rule id="SOLI_SUBST_2" name="soli wapnia, potasu, magnezu = subst">
        <pattern>
            <marker><token>soli</token></marker>
            <token regexp="yes">wapnia|potasu|magnezu|żelaza|metali|srebra|kwasu</token>
        </pattern>
        <disambig action="remove"><wd lemma="solić"/></disambig>
    </rule>

    <rule id="SMIECI_SUBST" name="śmieci jako genetiwus">
        <pattern>
            <token regexp="yes" inflected="yes">kupa|wysypisko|wywóz|segregacja|sterta|spalarnia|sortownia|wywózka|utylizacja|usypisko|hałda|worek|składowisko|kontener|tona|spalanie|stos</token>
            <marker><token>śmieci</token></marker>
        </pattern>
        <disambig action="filter" postag="subst:pl:gen.*"></disambig>
        <example type="ambiguous" inputform="śmieci[śmiecie/subst:pl:gen:n2,śmiecić/verb:fin:sg:ter:imperf:nonrefl,śmieć/subst:pl:acc:m3,śmieć/subst:pl:gen:m2,śmieć/subst:pl:gen:m3,śmieć/subst:pl:nom:m3,śmieć/subst:pl:voc:m3]"
                 outputform="śmieci[śmiecie/subst:pl:gen:n2,śmieć/subst:pl:gen:m2,śmieć/subst:pl:gen:m3]">Tu leży kupa <marker>śmieci</marker>.</example>
    </rule>

    <rule id="WIEZI_BRONI_SUBST" name="więzi i broni jako subst">
        <pattern>
            <unify>
                <feature id="number"/><feature id="case"/><feature id="gender"><type id="f"/></feature>
                <token regexp="yes">więzi|broni</token>
                <token postag="adj:.*" postag_regexp="yes"/>
            </unify>
        </pattern>
        <disambig action="unify"/>
        <example type="ambiguous" inputform="więzi[więzić/verb:fin:sg:ter:imperf:refl.nonrefl,więź/subst:pl:acc:f,więź/subst:pl:gen:f,więź/subst:pl:nom:f,więź/subst:pl:voc:f,więź/subst:sg:dat:f,więź/subst:sg:gen:f,więź/subst:sg:loc:f,więź/subst:sg:voc:f]"
                 outputform="więzi[więź/subst:sg:dat:f,więź/subst:sg:gen:f,więź/subst:sg:loc:f]">Mam poczucie <marker>więzi</marker> grupowej.</example>
    </rule>

    <rule id="WOLI_SUBST" name="woli jako genetiwus">
        <pattern>
            <token regexp="yes" inflected="yes">choroba|wolność|wybuch|siła|akt|słabość|potęga|oświadczenie|ograniczenie|mobilizacja|wyrażenie|czynnik|wyraz|potwierdzenie|autonomia|łamanie|osłabienie|oznaka|kwestia|deklaracja|manifestacja</token>
            <marker>
                <token>woli</token>
            </marker>
        </pattern>
        <disambig postag="subst:sg:gen:f"></disambig>
    </rule>

    <rule id="WOLI_SUBST_2" name="woli swej">
        <pattern>
            <marker>
                <unify>
                    <feature id="case"/><feature id="gender"><type id="f"/></feature><feature id="number"/>
                <token>woli</token>
                <token regexp="yes">swej|politycznej</token>
                </unify>
            </marker>
        </pattern>
        <disambig action="unify"/>
    </rule>

    <rule id="WRECZ_QUB" name="wręcz + czasownik/przymiotnik => qub">
        <pattern>
            <token postag="qub">wręcz</token>
            <token postag="(?:verb|adj|qub).*" postag_regexp="yes"/>
        </pattern>
        <disambig action="filterall"/>
        <example type="untouched">Wręcz mu nagrodę.</example>
        <example type="ambiguous" inputform="wręcz[wręcz/adv,wręcz/qub,wręczyć/verb:impt:sg:sec:perf:refl.nonrefl]" outputform="wręcz[wręcz/qub]">Działacze związkowi <marker>wręcz</marker> się tego domagają. </example>
    </rule>

    <rule id="WALKA_WRECZ_QUB" name="walka wręcz ->adv">
        <pattern>
            <marker><token>wręcz</token></marker>
            <token postag="adv.*" postag_regexp="yes"/>
        </pattern>
        <disambig postag="qub"/>
    </rule>

    <rule id="ZALEGLA" name="zaległa cisza > rzeczownik">
        <pattern>
            <marker><token skip="4">zaległa</token></marker>
            <token>cisza</token>
        </pattern>
        <disambig postag="verb:praet:sg:f:ter:perf:nonrefl"/>
    </rule>

    <rule id="ZAZDROSCI_SUBST" name="zazdrości jako genetiwus">
        <pattern>
            <token regexp="yes" inflected="yes">ukłucie|scena|nutka|drgnienie|uczucie|odrobina|nuta|odcień|przedmiot|męka|wybuch</token>
            <marker>
                <token>zazdrości</token>
            </marker>
        </pattern>
        <disambig postag="subst:sg:gen:f"></disambig>
    </rule>

    <rule id='ZNAJDZIE_VERB' name="znajdzie się -> verb">
        <pattern>
            <marker>
                <token postag="verb:fin:sg:ter:perf:refl.nonrefl">znajdzie</token>
                <token postag="qub">się</token>
            </marker>
        </pattern>
        <disambig action="filterall"/>
    </rule>

    <rule id="ZOLCI_SUBST" name="żółci jako genetiwus">
        <pattern>
            <token regexp="yes" inflected="yes">odcień|kropla|smak|wytwarzanie|wydzielanie</token>
            <marker>
                <token>żółci</token>
            </marker>
        </pattern>
        <disambig postag="subst:sg:gen:f"></disambig>
    </rule>

    <rule id="ZWYKLA_ADJ" name="zwykła jako przymiotnik">
        <pattern>
            <unify>
                <feature id="number"><type id="sg"/></feature>
                <feature id="gender"><type id="f"/></feature>
                <feature id="case"/>
                <token postag="subst:sg.*" postag_regexp="yes"/>
                <token>zwykła</token>
            </unify>
        </pattern>
        <disambig action="unify"/>
        <example type="ambiguous" inputform="zwykła[zwyknąć/verb:praet:sg:f:ter:perf:nonrefl,zwykły/adj:sg:nom.voc:f:pos]"
                 outputform="zwykła[zwykły/adj:sg:nom.voc:f:pos]">To jest akcja <marker>zwykła</marker> znanej korporacji.</example>
        <example type="untouched">Ona zwykła robić na drutach.</example>
    </rule>

    <rule id="ZWYKLA_ADJ_SUBST" name="zwykła jako przymiotnik">
        <pattern>
            <unify>
                <feature id="number"><type id="sg"/></feature>
                <feature id="gender"><type id="f"/></feature>
                <feature id="case"/>
                <token>zwykła</token>
                <token postag="subst:sg.*" postag_regexp="yes"/>
            </unify>
        </pattern>
        <disambig action="unify"/>
        <example type="ambiguous" inputform="zwykła[zwyknąć/verb:praet:sg:f:ter:perf:nonrefl,zwykły/adj:sg:nom.voc:f:pos]"
                 outputform="zwykła[zwykły/adj:sg:nom.voc:f:pos]">To jest  <marker>zwykła</marker> solidarność ludzka.</example>
        <example type="untouched">Ona zwykła robić na drutach.</example>
    </rule>


    <rule id="BOGACI_ADJ" name="bogaci + rzeczownik => przymiotnik">
        <pattern>
            <unify><feature id="number"><type id="pl"/></feature><feature id="gender"><type id="m1"/><type id="p1"/></feature>
                <feature id="case"><type id="nom"/><type id="voc"/></feature>
                <marker>
                    <token postag="adj:pl:nom.voc:m1.p1:pos">bogaci</token>
                    <token postag="subst.*" postag_regexp="yes"/>
                </marker>
            </unify>
        </pattern>
        <disambig action="unify"/>
        <example type="ambiguous" inputform="bogaci[bogacić/verb:fin:sg:ter:imperf:refl.nonrefl,bogaty/adj:pl:nom.voc:m1.p1:pos,bogaty/subst:pl:nom:m1,bogaty/subst:pl:voc:m1]"
                 outputform="bogaci[bogaty/adj:pl:nom.voc:m1.p1:pos]">Tylko <marker>bogaci</marker> mieszczanie kupują lody.</example>
        <example type="untouched">Cały kraj się bogaci.</example>
    </rule>

    <rule id="TONA_STALI" name="tona stali -> subst">
        <pattern>
            <token inflected="yes" regexp="yes">szczęk|tona</token>
            <marker><token>stali</token></marker>
        </pattern>
        <disambig postag="subst:sg:gen:f"/>
    </rule>

    <rule id="WIDMO" name="widmo światła -> nie widma">
        <pattern>
            <marker>
                <token postag=".*nom.*|.*acc.*" postag_regexp="yes">widmo</token>
                <token postag="subst:sg:gen:n2">światła</token>
            </marker>
        </pattern>
        <disambig action="filterall"/>
    </rule>

    <rule id="rzadzaca_klika" name="rządząca klika">
        <pattern>
            <marker>
                <token postag="adj:sg:nom.voc:f:pos">rządząca</token>
                <token postag="subst:sg:nom:f">klika</token>
            </marker>
        </pattern>
        <disambig action="filterall"/>
    </rule>

    <rule id="BYLA_SERIO" name="być serio">
        <pattern>
        <token inflected="yes">być</token>
        <marker><token>serio</token></marker>
        </pattern>
        <disambig postag="adv"/>
        <example type="ambiguous" inputform="serio[seria/subst:sg:voc:f,serio/adj:pl:acc:m1.p1:pos,serio/adj:pl:acc:m2.m3.f.n1.n2.p2.p3:pos,serio/adj:pl:dat:m1.m2.m3.f.n1.n2.p1.p2.p3:pos,serio/adj:pl:gen:m1.m2.m3.f.n1.n2.p1.p2.p3:pos,serio/adj:pl:inst:m1.m2.m3.f.n1.n2.p1.p2.p3:pos,serio/adj:pl:loc:m1.m2.m3.f.n1.n2.p1.p2.p3:pos,serio/adj:pl:nom.voc:m1.p1:pos,serio/adj:pl:nom.voc:m2.m3.f.n1.n2.p2.p3:pos,serio/adj:sg:acc:f:pos,serio/adj:sg:acc:m1.m2:pos,serio/adj:sg:acc:m3:pos,serio/adj:sg:acc:n1.n2:pos,serio/adj:sg:dat:f:pos,serio/adj:sg:dat:m1.m2.m3.n1.n2:pos,serio/adj:sg:gen:f:pos,serio/adj:sg:gen:m1.m2.m3.n1.n2:pos,serio/adj:sg:inst:f:pos,serio/adj:sg:inst:m1.m2.m3.n1.n2:pos,serio/adj:sg:loc:f:pos,serio/adj:sg:loc:m1.m2.m3.n1.n2:pos,serio/adj:sg:nom.voc:f:pos,serio/adj:sg:nom.voc:m1.m2.m3:pos,serio/adj:sg:nom.voc:n1.n2:pos,serio/adv]"
                 outputform="serio[serio/adv]">To było <marker>serio</marker>.</example>
    </rule>

    <rule id="BYLA_INST" name="była + przymiotnik/czasownik w narzędniku">
        <pattern>
            <token postag="verb:praet:sg:f:ter:imperf:nonrefl">była</token>
            <token postag_regexp="yes" postag="(?:adj|ppas|subst):sg:inst:f.*"/>
        </pattern>
        <disambig action="filterall"/>
    </rule>

    <rulegroup id="ZAIMKI_SENT_START" name="Zaimki nie są w miejscowniku, chyba że po odpowiednim przyimku">
        <rule>
            <pattern>
                <token><exception postag=".*loc.*" postag_regexp="yes"/></token>
                <marker><token postag="(?:ppron.*|siebie.*).*loc.*" postag_regexp="yes"/></marker>
            </pattern>
            <disambig action="remove" postag=".*loc.*"/>
            <example type="ambiguous" inputform="Sobie[się/siebie:dat,się/siebie:loc]"
                     outputform="Sobie[się/siebie:dat]"><marker>Sobie</marker> robisz tę jajecznicę?</example>
            <example type="untouched">O sobie to mówisz?</example>
        </rule>
    </rulegroup>

    <rule id="WINIEN_BYLA" name="powinien + była -> czasownik">
        <pattern>
            <token postag="verb:winien.*" postag_regexp="yes"/>
            <marker><token>była</token></marker>
        </pattern>
        <disambig postag="verb:praet:sg:f:ter:imperf:nonrefl"/>
        <example type="ambiguous" inputform="była[być/verb:praet:sg:f:ter:imperf:nonrefl,była/subst:sg:nom:f,była/subst:sg:voc:f,były/adj:sg:nom.voc:f:pos]"
                 outputform="była[być/verb:praet:sg:f:ter:imperf:nonrefl]">Powinna <marker>była</marker> to zrobić.</example>
        <example type="untouched">Moja była kupiła jaguara.</example>
    </rule>

    <rulegroup id="WINNY_JEST" name="winny + czasownik sg => przymiotnik">
        <rule>
        <pattern>
            <token skip="-1" postag="adj:sg.*" postag_regexp="yes">winny<exception scope="next" postag="verb:inf.*" postag_regexp="yes"/><exception scope="next" regexp="yes">&interp;</exception></token>
            <token postag="verb.*sg:.*" postag_regexp="yes"/>
        </pattern>
        <disambig action="filterall"/>
        <example type="untouched">Sądzę, że współczesne pokolenia winny	- w świecie chaosu i nihilizmu - podjąć próbę tworzenia porządku.</example>
        <example type="ambiguous" inputform="winny[winien/verb:winien:pl:m2.m3.f.n1.n2.p2.p3:ter:imperf:nonrefl,winny/adj:sg:acc:m3:pos,winny/adj:sg:nom.voc:m1.m2.m3:pos,winny/subst:sg:nom:m1,winny/subst:sg:voc:m1]"
                 outputform="winny[winny/adj:sg:acc:m3:pos,winny/adj:sg:nom.voc:m1.m2.m3:pos]">Wiadomo, że <marker>winny</marker> temu jest kucharz.</example>
        </rule>
        <rule>
            <pattern>
                <token skip="-1" postag="verb.*sg:.*" postag_regexp="yes"><exception scope="next" regexp="yes">&interp;</exception></token>
                <marker><token>winny</token></marker>
            </pattern>
            <disambig action="filter" postag="adj:sg.*"></disambig>
            <example type="untouched">Sądzę, że współczesne pokolenia winny	- w świecie chaosu i nihilizmu - podjąć próbę tworzenia porządku.</example>
            <example type="ambiguous" inputform="winny[winien/verb:winien:pl:m2.m3.f.n1.n2.p2.p3:ter:imperf:nonrefl,winny/adj:sg:acc:m3:pos,winny/adj:sg:nom.voc:m1.m2.m3:pos,winny/subst:sg:nom:m1,winny/subst:sg:voc:m1]"
                     outputform="winny[winny/adj:sg:acc:m3:pos,winny/adj:sg:nom.voc:m1.m2.m3:pos]">Kucharz był <marker>winny</marker>.</example>
        </rule>
    </rulegroup>

    <rulegroup id="VERBFIN_FUT" name="forma przeszła po „będzie”">
     <rule>
        <pattern>
            <unify>
                <feature id="number"/>
                <token postag="verb:bedzie.*" postag_regexp="yes"/>
                <token postag="verb:praet.*:imperf.*" postag_regexp="yes"/>
            </unify>
        </pattern>
        <disambig action="unify"/>
        <example type="ambiguous" inputform="jedli[jedla/subst:pl:gen:f,jedla/subst:sg:dat:f,jedla/subst:sg:gen:f,jedla/subst:sg:loc:f,jeść/verb:praet:pl:m1.p1:ter:imperf:refl.nonrefl]"
                 outputform="jedli[jeść/verb:praet:pl:m1.p1:ter:imperf:refl.nonrefl]">Będziemy <marker>jedli</marker>.</example>
    </rule>
        <rule> <!-- FIXME: in this pattern, min="0" max="2" does not work in <unify-ignore/> -->
            <pattern>
                <unify>
                    <feature id="number"/>
                    <token postag="verb:bedzie.*" postag_regexp="yes"/>
                    <unify-ignore>
                        <token postag="adv.*|qub" postag_regexp="yes"/>
                    </unify-ignore>
                    <token postag="verb:praet.*:imperf.*" postag_regexp="yes"/>
                </unify>
            </pattern>
            <disambig action="unify"/>
            <example type="ambiguous" inputform="jedli[jedla/subst:pl:gen:f,jedla/subst:sg:dat:f,jedla/subst:sg:gen:f,jedla/subst:sg:loc:f,jeść/verb:praet:pl:m1.p1:ter:imperf:refl.nonrefl]"
                     outputform="jedli[jeść/verb:praet:pl:m1.p1:ter:imperf:refl.nonrefl]">Będziemy nawet <marker>jedli</marker>.</example>
        </rule>
        <rule>
            <pattern>
                <unify>
                    <feature id="number"/>
                    <token postag="verb:bedzie.*" postag_regexp="yes"/>
                    <unify-ignore>
                        <token postag="adv.*|qub" postag_regexp="yes"/>
                        <token postag="adv.*|qub" postag_regexp="yes"/>
                    </unify-ignore>
                    <token postag="verb:praet.*:imperf.*" postag_regexp="yes"/>
                </unify>
            </pattern>
            <disambig action="unify"/>
            <example type="ambiguous" inputform="jedli[jedla/subst:pl:gen:f,jedla/subst:sg:dat:f,jedla/subst:sg:gen:f,jedla/subst:sg:loc:f,jeść/verb:praet:pl:m1.p1:ter:imperf:refl.nonrefl]"
                     outputform="jedli[jeść/verb:praet:pl:m1.p1:ter:imperf:refl.nonrefl]">Będziemy nawet dzisiaj <marker>jedli</marker>.</example>
        </rule>
        <rule>
            <pattern>
                <unify>
                    <feature id="number"/>
                    <marker>
                    <token postag="verb:bedzie.*" postag_regexp="yes"/>
                    <unify-ignore>
                        <token min="0" max="2" postag="prep.*|subst.*" postag_regexp="yes"/>
                    </unify-ignore>
                    <token postag="verb:praet.*:imperf.*" postag_regexp="yes"/>
                    </marker>
                </unify>
            </pattern>
            <disambig action="unify"/>
            <example type="ambiguous" inputform="jedli[jedla/subst:pl:gen:f,jedla/subst:sg:dat:f,jedla/subst:sg:gen:f,jedla/subst:sg:loc:f,jeść/verb:praet:pl:m1.p1:ter:imperf:refl.nonrefl]"
                     outputform="jedli[jeść/verb:praet:pl:m1.p1:ter:imperf:refl.nonrefl]">Będziemy po uczcie <marker>jedli</marker>.</example>
        </rule>
    </rulegroup>

    <rule id="W_SZTUCE_BIEGŁY" name="w sztuce biegły">
        <pattern>
            <token postag="prep:loc:nwok"/>
            <token postag="subst:sg:loc:f">sztuce</token>
            <token postag="adj:sg:nom.voc:m1.m2.m3:pos">biegły</token>
        </pattern>
        <disambig action="filterall"/>
    </rule>

    <rule id="pora_subst" name="pora na => rzeczownik">
        <pattern>
            <marker><token>pora</token></marker>
            <token regexp="yes">na|roku|dnia</token>
        </pattern>
        <disambig action="remove"><wd lemma="porać"/></disambig>
        <example type="ambiguous" inputform="Pora[por/subst:sg:acc:m2,por/subst:sg:gen:m2,por/subst:sg:gen:m3,pora/pred,pora/subst:sg:nom:f,porać/verb:fin:sg:ter:imperf:refl]"
                 outputform="Pora[por/subst:sg:acc:m2,por/subst:sg:gen:m2,por/subst:sg:gen:m3,pora/pred,pora/subst:sg:nom:f]"><marker>Pora</marker> na Colgate!</example>
    </rule>

    <rule id="pora_subst_inf" name="pora + bezokolicznik => rzeczownik">
        <pattern>
            <marker><token>pora</token></marker>
            <token postag="verb:inf.*" postag_regexp="yes"/>
        </pattern>
        <disambig action="remove"><wd lemma="porać"/></disambig>
        <example type="ambiguous" inputform="Pora[por/subst:sg:acc:m2,por/subst:sg:gen:m2,por/subst:sg:gen:m3,pora/pred,pora/subst:sg:nom:f,porać/verb:fin:sg:ter:imperf:refl]"
                 outputform="Pora[por/subst:sg:acc:m2,por/subst:sg:gen:m2,por/subst:sg:gen:m3,pora/pred,pora/subst:sg:nom:f]"><marker>Pora</marker> umierać!</example>
    </rule>

    <rule id="pora_sucha" name="pora sucha => rzeczownik">
        <pattern>
            <marker>
                    <token postag="subst:sg:nom:f">pora</token>
                    <token postag="adj:sg:nom.voc:f:pos" regexp="yes">sucha|deszczowa|dżdżysta</token>
            </marker>
        </pattern>
        <disambig action="filterall"/>
        <example type="ambiguous" inputform="Pora[por/subst:sg:acc:m2,por/subst:sg:gen:m2,por/subst:sg:gen:m3,pora/pred,pora/subst:sg:nom:f,porać/verb:fin:sg:ter:imperf:refl]"
                 outputform="Pora[pora/subst:sg:nom:f]"><marker>Pora</marker> sucha mnie nie wzrusza!</example>
    </rule>


    <rule id="PORA" name="pora jako genetiwus od por">
        <pattern>
            <token regexp="yes" inflected="yes">kawałek|część</token>
            <marker><token>pora</token></marker>
        </pattern>
        <disambig postag="subst:sg:gen:m3"/>
        <example type="untouched">Pora iść do szkoły!</example>
        <example type="ambiguous" inputform="pora[por/subst:sg:acc:m2,por/subst:sg:gen:m2,por/subst:sg:gen:m3,pora/pred,pora/subst:sg:nom:f]"
                 outputform="pora[por/subst:sg:gen:m3]"> Kawałek białej części <marker>pora</marker> oczyścić, przekroić wzdłuż i pokroić w makaroniki.</example>
    </rule>


    <rulegroup id="PARA" name="para jako rzeczownik">
        <rule>
            <pattern>
                <marker>
                <token postag="adj:sg:nom.voc:f:pos"/>
                <token postag="subst:sg:nom:f">para</token>
                </marker>
            </pattern>
            <disambig action="filterall"/>
            <example type="ambiguous" inputform="para[par/subst:sg:acc:m1,par/subst:sg:gen:m1,para/subst:sg:nom:f,parać/verb:fin:sg:ter:imperf:refl]"
                     outputform="para[para/subst:sg:nom:f]">Wiwat młoda <marker>para</marker>!</example>
        </rule>
        <rule>
            <pattern>
                <marker>
                    <token postag="subst:sg:nom:f">para</token>
                </marker>
                    <token postag="adj:sg:nom.voc:f:pos">wodna</token>
            </pattern>
            <disambig action="filterall"/>
        </rule>
    </rulegroup>

    <rulegroup id="PASA" name="pasa jako rzeczownik">
        <rule id="PASA_SUBST" name="pasa jako genetivus">
            <pattern>
                <marker>
                    <token postag="subst:sg:gen:m3">pasa</token>
                    <token postag=".*sg.*gen.*" postag_regexp="yes" regexp="yes">ruchu|startowego|nadbrzeżnego|nadmorskiego|barkowego|transmisyjnego|betonowego|biodrowego|ochronnego|neutralnego|zieleni|drogi|jezdni|granicznego</token>
                </marker>
            </pattern>
            <disambig action="filterall"/>
            <example type="untouched">Jasio pasa gąski.</example>
        </rule>
        <rule id="PASA_SUBST2" name="pasa jako genetivus">
            <pattern>
                <token regexp="yes" inflected="yes">zaciskać|zacisnąć|mistrzowski|zająć|popuścić|skórzany|zapiąć|wydzielić|szerokość|szeroki|sięgać|wydłużyć|zmiana</token>
                <marker><token>pasa</token></marker>
            </pattern>
            <disambig postag="subst:sg:gen:m3"/>
            <example type="untouched">Jasio pasa gąski.</example>
            <example type="ambiguous" inputform="pasa[pas/subst:sg:gen:m3,pasać/verb:fin:sg:ter:imperf:refl.nonrefl]"
                     outputform="pasa[pas/subst:sg:gen:m3]">Musimy zacisnąć <marker>pasa</marker>.</example>
        </rule>
        <rule>
            <pattern>
                <token>do</token>
                <token>samego</token>
                <marker><token>pasa</token></marker>
            </pattern>
            <disambig postag="subst:sg:gen:m3"></disambig>
            <example type="ambiguous" inputform="pasa[pas/subst:sg:gen:m3,pasać/verb:fin:sg:ter:imperf:refl.nonrefl]"
                     outputform="pasa[pas/subst:sg:gen:m3]">Miała dekolt do samego <marker>pasa</marker>.</example>
        </rule>
        <rule>
            <pattern>
                <unify>
                    <feature id="gender"><type id="m3"/></feature><feature id="case"><type id="gen"></type></feature>
                    <feature id="number"><type id="sg"></type></feature>
                    <token>pasa</token>
                    <token postag_regexp="yes" postag="(?:adj|ppas|pact):sg.*"/>
                </unify>
            </pattern>
            <disambig action="unify"/>
            <example type="ambiguous" inputform="pasa[pas/subst:sg:gen:m3,pasać/verb:fin:sg:ter:imperf:refl.nonrefl]"
                     outputform="pasa[pas/subst:sg:gen:m3]">Nie posiadają <marker>pasa</marker> drogowego.</example>
        </rule>
    </rulegroup>

    <rule name="sklep jako rzeczownik" id="sklep_subst_2">
        <pattern>
            <unify>
                <feature id="gender"><type id="m3"/></feature>
                <feature id="case"/><feature id="number"><type id="sg"/></feature>
                <token>sklep</token>
                <token postag="adj.*" postag_regexp="yes"><exception>diabli</exception></token>
            </unify>
        </pattern>
        <disambig action="unify"/>
    </rule>

    <rule name="sklep jako rzeczownik" id="sklep_subst_1">
        <pattern>
            <unify>
                <feature id="gender"><type id="m3"/></feature>
                <feature id="case"/><feature id="number"><type id="sg"/></feature>
                <token postag="adj.*" postag_regexp="yes"/>
                <token>sklep</token>
            </unify>
        </pattern>
        <disambig action="unify"/>
    </rule>

    <rule name="tłum jako rzeczownik" id="tlum_subst">
        <pattern>
            <marker><token>tłum</token></marker>
            <token postag_regexp="yes" postag="subst.*gen.*(?:f|m1)"/>
        </pattern>
        <disambig action="filter" postag="subst.*"/>
        <example type="untouched">Tłum powstania, dyktatorze!</example>
        <example type="ambiguous" inputform="tłum[tłum/subst:sg:acc:m3,tłum/subst:sg:nom:m3,tłumić/verb:impt:sg:sec:imperf:refl.nonrefl]"
                 outputform="tłum[tłum/subst:sg:acc:m3,tłum/subst:sg:nom:m3]">Był tam <marker>tłum</marker> gości.</example>
    </rule>

    <rulegroup id="NASZA_ADJ" name="nasza jako przymotnik">
    <rule>
        <pattern>
            <token postag="subst:sg:nom:f"/>
            <token postag="adj:sg:nom.voc:f:pos">nasza</token>
        </pattern>
        <disambig action="filterall"/>
    </rule>
    <rule>
        <pattern>
            <token postag="adj:sg:nom.voc:f:pos">nasza</token>
             <token postag="subst:sg:nom:f"/>
            </pattern>
       <disambig action="filterall"/>
    </rule>
        <rule>
            <pattern>
                <token postag="adj:sg:nom.voc:f:pos">nasza</token>
                <token postag="adj:sg:nom.voc:f:pos"/>
                <token postag="subst:sg:nom:f"/>
            </pattern>
            <disambig action="filterall"/>
        </rule>
    </rulegroup>

    <rule id="NASZE_ADJ" name="nasze jako przymiotnik">
        <pattern>
            <unify>
                <feature id="case"/><feature id="number"><type id="pl"/></feature><feature id="gender"/>
                <token postag="adj:pl.*" postag_regexp="yes">nasze</token>
                <token postag="subst:pl.*" postag_regexp="yes"/>
            </unify>
        </pattern>
        <disambig action="unify"/>
    </rule>

    <rule id="NAZWIE_SUBST" name="nazwie jako rzeczownik">
        <pattern>
            <unify>
                <feature id="case"/><feature id="number"><type id="sg"/></feature><feature id="gender"/>
                <token postag="adj:sg.*" postag_regexp="yes"/>
                <token>nazwie</token>
            </unify>
        </pattern>
        <disambig action="unify"/>
        <example type="untouched">Jurek nazwie ją „grzybkiem”.</example>
        <example type="ambiguous" inputform="nazwie[nazwa/subst:sg:dat:f,nazwa/subst:sg:loc:f,nazwać/verb:fin:sg:ter:perf:refl.nonrefl]"
                 outputform="nazwie[nazwa/subst:sg:loc:f]">Okręty o wspaniałej <marker>nazwie</marker> są ładne.</example>
    </rule>

    <rule id="MOJE" name="moje to nie „moja” ani „moje” plurale tantum">
        <pattern>
            <token>moje</token>
        </pattern>
        <disambig action="filter" postag="adj.*"/>
    </rule>

    <rule id="MOJA_STARA" name="stara to nie zawsze czasownik">
        <pattern>
            <token>moja</token>
            <marker><token regexp="yes">stara|była</token></marker>
        </pattern>
        <disambig postag="subst:sg:nom:f"/>
        <example type="ambiguous" inputform="stara[star/subst:sg:gen:m3,stara/subst:sg:nom:f,stara/subst:sg:voc:f,starać/verb:fin:sg:ter:imperf:refl,stary/adj:sg:nom.voc:f:pos]"
                 outputform="stara[stara/subst:sg:nom:f]">A moja <marker>stara</marker> już się wyprawiła w drogę.</example>
    </rule>

    <rule id="STARA_SIE" name="stara się -> czasownik">
        <pattern>
            <token postag="verb:fin:sg:ter:imperf:refl">stara</token>
            <token postag="qub">się</token>
            <token postag="verb:inf.*" postag_regexp="yes"/>
        </pattern>
        <disambig action="filterall"/>
        <example type="untouched">Moja stara się myje.</example>
        <example type="ambiguous" inputform="stara[star/subst:sg:gen:m3,stara/subst:sg:nom:f,stara/subst:sg:voc:f,starać/verb:fin:sg:ter:imperf:refl,stary/adj:sg:nom.voc:f:pos]"
                 outputform="stara[starać/verb:fin:sg:ter:imperf:refl]">Sytuację <marker>stara</marker> się wykorzystać konserwatywna opozycja.</example>
    </rule>

    <rule id="przeszla_acc" name="przeszła + acc -> czasownik">
        <pattern>
            <token postag="verb:praet:sg:f:ter:perf:nonrefl">przeszła</token>
            <token postag=".*acc.*" postag_regexp="yes"><exception>trochę</exception></token>
        </pattern>
        <disambig action="filterall"/>
        <example type="ambiguous" inputform="Przeszła[przejść/verb:praet:sg:f:ter:perf:nonrefl,przejść/verb:praet:sg:f:ter:perf:refl,przeszły/adj:sg:nom.voc:f:pos]"
                 outputform="Przeszła[przejść/verb:praet:sg:f:ter:perf:nonrefl]"><marker>Przeszła</marker> operację.</example>
        <example type="untouched">Przeszła zima zaskoczyła drogowców.</example>
    </rule>

    <rule id="ZWYKLY_ADJ" name="zwykły to przymiotnik przed rzeczownikiem">
        <pattern>
            <unify>
                <feature id="case"/><feature id="gender"/><feature id="number"/>
                <token>zwykły</token>
                <token postag="subst.*" postag_regexp="yes"/>
            </unify>
        </pattern>
        <disambig action="unify"/>
        <example type="ambiguous" inputform="zwykły[zwyknąć/verb:praet:pl:m2.m3.f.n1.n2.p2.p3:ter:perf:nonrefl,zwykły/adj:sg:acc:m3:pos,zwykły/adj:sg:nom.voc:m1.m2.m3:pos]"
                 outputform="zwykły[zwykły/adj:sg:acc:m3:pos,zwykły/adj:sg:nom.voc:m1.m2.m3:pos]">Toż to <marker>zwykły</marker> oportunizm.</example>
        <example type="untouched">Tak to zwykły czynić puchacze.</example>
    </rule>

    <rule id="DUMA_SUBST" name="duma to rzeczownik, jeśli z przymiotnikiem">
        <pattern>
            <unify>
                <feature id="case"><type id="nom"/></feature>
                <feature id="gender"><type id="f"/></feature>
                <feature id="number"><type id="sg"/></feature>
                <token postag="adj:sg:nom.voc:f.*" postag_regexp="yes"/>
                <token>duma</token>
            </unify>
        </pattern>
        <disambig action="unify"/>
        <example type="ambiguous" inputform="duma[duma/subst:sg:nom:f,dumać/verb:fin:sg:ter:imperf:nonrefl]"
                 outputform="duma[duma/subst:sg:nom:f]">Toż to moja <marker>duma</marker> ludzka.</example>
        <example type="untouched">Wiesława duma nad swoim losem.</example>
    </rule>

    <rule id="ZWYKLY_INF" name="zwykły jako czasownik">
        <pattern>
            <marker><token>zwykły</token></marker>
            <token postag="verb:inf.*" postag_regexp="yes"/>
        </pattern>
        <disambig postag="verb:praet:pl:m2.m3.f.n1.n2.p2.p3:ter:perf:nonrefl"/>
        <example type="ambiguous" inputform="zwykły[zwyknąć/verb:praet:pl:m2.m3.f.n1.n2.p2.p3:ter:perf:nonrefl,zwykły/adj:sg:acc:m3:pos,zwykły/adj:sg:nom.voc:m1.m2.m3:pos]"
                 outputform="zwykły[zwyknąć/verb:praet:pl:m2.m3.f.n1.n2.p2.p3:ter:perf:nonrefl]">Policjantki <marker>zwykły</marker> oznaczać swój teren.</example>
        <example type="untouched">To zwykły bandyta.</example>
    </rule>

    <rule id="DZIALY" name="te działy">
        <pattern>
            <unify>
                <feature id="case"/><feature id="number"/> <feature id="gender"/>
                <token postag="adj.*" postag_regexp="yes"/>
                <token regexp="yes">(?:roz)?działy</token>
            </unify>
        </pattern>
        <disambig action="unify"/>
        <example type="ambiguous" inputform="działy[dziać/verb:praet:pl:m2.m3.f.n1.n2.p2.p3:ter:imperf:refl,dziać/verb:praet:pl:m2.m3.f.n1.n2.p2.p3:ter:imperf:refl.nonrefl,dział/subst:pl:acc:m3,dział/subst:pl:nom:m3,dział/subst:pl:voc:m3]"
                 outputform="działy[dział/subst:pl:acc:m3,dział/subst:pl:nom:m3,dział/subst:pl:voc:m3]">Oba te <marker>działy</marker> poezji zrodziły się z bólu.</example>
    </rule>

    <rule id="JEDEN_Z_GEN" name="„jeden z” -> przymiotnik">
        <pattern>
            <marker>
                <token postag="adj.*" postag_regexp="yes" inflected="yes">jeden</token>
                <!-- FIXME: skip="1" -->
                <token postag="prep:gen.*" postag_regexp="yes" inflected="yes" regexp="yes">z|wśród|spośród</token>
            <token postag=".*pl:gen.*" postag_regexp="yes"/>
            </marker>
        </pattern>
        <disambig action="filterall"/>
        <example type="ambiguous" inputform="jedna[jeden/adj:sg:nom.voc:f:pos,jednać/verb:fin:sg:ter:imperf:refl.nonrefl]"
                 outputform="jedna[jeden/adj:sg:nom.voc:f:pos]">Oto <marker>jedna</marker> z najpiękniejszych dziewic na świecie.</example>
        <example type="ambiguous" inputform="jedna[jeden/adj:sg:nom.voc:f:pos,jednać/verb:fin:sg:ter:imperf:refl.nonrefl]"
                 outputform="jedna[jeden/adj:sg:nom.voc:f:pos]">Oto <marker>jedna</marker> ze sztuk, jakiej karzełka gdzieś w cyrku wyuczono.
        </example>
        <example type="untouched">Tyran jedna się z narodem.</example>
    </rule>

    <rule id="JEDNA_DRUGA" name="„jedna, druga” – przymiotnik">
        <pattern>
            <marker><token>jedna</token></marker>
            <token min="0" max="1">,</token>
            <token>druga</token>
        </pattern>
        <disambig postag="adj:sg:nom.voc:f:pos"/>
        <example type="ambiguous" inputform="jedna[jeden/adj:sg:nom.voc:f:pos,jednać/verb:fin:sg:ter:imperf:refl.nonrefl]"
                 outputform="jedna[jeden/adj:sg:nom.voc:f:pos]">Powtórzyła to <marker>jedna</marker>, druga...</example>
    </rule>

    <rule id="TYLKO_JEDEN" name="tylko jako kublik">
        <pattern>
            <marker><token postag="qub">tylko</token>
                <token inflected="yes" postag="adj.*" postag_regexp="yes">jeden</token>
            </marker>
        </pattern>
        <disambig action="filterall"/>
        <example type="ambiguous" inputform="Tylko[Tylka/subst:sg:voc:f,Tylka/subst:sg:voc:m1,tylko/conj,tylko/qub]"
                 outputform="Tylko[tylko/qub]"><marker>Tylko</marker> jedna Natalka nic się nie zdziwiła.</example>
        <example type="untouched">Jedź, tylko żebyś nikogo nie zabił!</example>
    </rule>

    <rule name="mianownik + jest + mianownik" id="nom_jest_nom">
        <pattern>
            <unify>
                <feature id="number"/>
                <marker>
                    <token postag="(?:adj|pact|subst|ger|ppas).*nom[:\.].*" postag_regexp="yes"/>
                    <token postag="verb:fin.*:ter:imperf:nonrefl" inflected="yes" postag_regexp="yes">być</token>
                    <token postag="(?:adj|pact|subst|ger|ppas).*nom[:\.].*" postag_regexp="yes"/>
                </marker>
            </unify>
        </pattern>
        <disambig action="unify"/>
        <example type="ambiguous" inputform="niewielkie[niewielki/adj:pl:acc:m2.m3.f.n1.n2.p2.p3:pos,niewielki/adj:pl:nom.voc:m2.m3.f.n1.n2.p2.p3:pos,niewielki/adj:sg:acc:n1.n2:pos,niewielki/adj:sg:nom.voc:n1.n2:pos]"
                 outputform="niewielkie[niewielki/adj:sg:nom.voc:n1.n2:pos]">Zasadne jest <marker>niewielkie</marker> podtopienie.</example>
    </rule>

    <rule name="mianownik + conj + jest + mianownik" id="nom_conj_jest_nom">
        <pattern>
            <unify>
                <feature id="number"/>
                <marker>
                    <token postag=".*nom[:\.].*" postag_regexp="yes"/>
                    <unify-ignore>
                        <token postag="conj"></token>
                    </unify-ignore>
                    <token postag="verb:fin.*:ter:imperf:nonrefl" inflected="yes" postag_regexp="yes">być</token>
                    <token postag=".*nom[:\.].*" postag_regexp="yes"/>
                </marker>
            </unify>
        </pattern>
        <disambig action="unify"/>
        <example type="ambiguous" inputform="niewielkie[niewielki/adj:pl:acc:m2.m3.f.n1.n2.p2.p3:pos,niewielki/adj:pl:nom.voc:m2.m3.f.n1.n2.p2.p3:pos,niewielki/adj:sg:acc:n1.n2:pos,niewielki/adj:sg:nom.voc:n1.n2:pos]"
                 outputform="niewielkie[niewielki/adj:sg:nom.voc:n1.n2:pos]">Zasadne zatem jest <marker>niewielkie</marker> podtopienie.</example>
    </rule>

    <rule name="mianownik + jest + conj + mianownik" id="nom_jest_conj_nom">
        <pattern>
            <unify>
                <feature id="number"/>
                <marker>
                    <token postag=".*nom[:\.].*" postag_regexp="yes"/>
                    <token postag="verb:fin.*:ter:imperf:nonrefl" inflected="yes" postag_regexp="yes">być</token>
                    <unify-ignore>
                        <token postag="conj"></token>
                    </unify-ignore>
                    <token postag=".*nom[:\.].*" postag_regexp="yes">
                            <exception postag="adv"/></token>
                </marker>
            </unify>
        </pattern>
        <disambig action="unify"/>
        <example type="ambiguous" inputform="niewielkie[niewielki/adj:pl:acc:m2.m3.f.n1.n2.p2.p3:pos,niewielki/adj:pl:nom.voc:m2.m3.f.n1.n2.p2.p3:pos,niewielki/adj:sg:acc:n1.n2:pos,niewielki/adj:sg:nom.voc:n1.n2:pos]"
                 outputform="niewielkie[niewielki/adj:sg:nom.voc:n1.n2:pos]">Zasadne jest zatem <marker>niewielkie</marker> podtopienie.</example>
    </rule>

    <rulegroup id="JEDNA_UNIFY" name="„jedna” jako przymiotnik przed przymotnikiem lub rzeczownikiem">
    <rule>
        <pattern>
            <marker>
            <unify>
                <feature id="case"/><feature id="number"><type id="sg"/></feature>
                <feature id="gender"><type id="f"/></feature>
                <token>jedna</token>
                <token max="2" postag="adj.*|subst.*" postag_regexp="yes"><exception>ma</exception></token>
            </unify>
            </marker>
        </pattern>
        <disambig action="unify"/>
        <example type="ambiguous" inputform="jedna[jeden/adj:sg:nom.voc:f:pos,jednać/verb:fin:sg:ter:imperf:refl.nonrefl]"
                 outputform="jedna[jeden/adj:sg:nom.voc:f:pos]">Widząc to <marker>jedna</marker> szpetna starucha...</example>
        <example type="untouched">Dyktator jedna się z narodem co czwartek.</example>
        <example type="ambiguous" inputform="jedna[jeden/adj:sg:nom.voc:f:pos,jednać/verb:fin:sg:ter:imperf:refl.nonrefl]" outputform="jedna[jeden/adj:sg:nom.voc:f:pos]">To jest przecież <marker>jedna</marker> osoba.</example>
        <example type="ambiguous" inputform="jedna[jeden/adj:sg:nom.voc:f:pos,jednać/verb:fin:sg:ter:imperf:refl.nonrefl]" outputform="jedna[jeden/adj:sg:nom.voc:f:pos]">To jest ta <marker>jedna</marker> jedyna.</example>
    </rule>
    <rule>
            <pattern>
                <marker>
                    <unify>
                        <feature id="case"/><feature id="number"><type id="sg"/></feature>
                        <feature id="gender"><type id="f"/></feature>
                        <token postag="adj.*|subst.*" postag_regexp="yes"><exception>tylko</exception></token>
                        <token skip="-1">jedna<exception postag="SENT_END|&lt;ELLIPSIS&gt;|interp:comma|comp:comma" postag_regexp="yes" scope="next"/><exception scope="next" regexp="yes">&interp;</exception></token>
                    </unify>
                </marker>
                <token postag="verb:.*(?:sg|pl|imp[st]).*|pred" postag_regexp="yes"/>
            </pattern>
            <disambig action="unify"/>
            <example type="ambiguous" inputform="jedna[jeden/adj:sg:nom.voc:f:pos,jednać/verb:fin:sg:ter:imperf:refl.nonrefl]"
                     outputform="jedna[jeden/adj:sg:nom.voc:f:pos]">Kooperacja <marker>jedna</marker> tylko niweczy sprzeczność  między egoizmem a miłością bliźniego.</example>
            <example type="ambiguous" inputform="jedna[jeden/adj:sg:nom.voc:f:pos,jednać/verb:fin:sg:ter:imperf:refl.nonrefl]"
                 outputform="jedna[jeden/adj:sg:nom.voc:f:pos]">Ada <marker>jedna</marker> dziś jest spokojna.</example>
            <example type="untouched">Dyktator jedna się z narodem co czwartek.</example>
            <example type="untouched">Tylko jedna Natalka nic się nie zdziwiła.</example>
    </rule>
        <rule>
            <pattern>
                <token skip="-1" postag="verb:.*(?:sg|pl|imp[st]).*|pred" postag_regexp="yes"><exception postag="(?:subst|adj).*" postag_regexp="yes"/><exception postag="SENT_END|&lt;ELLIPSIS&gt;|interp:comma|comp:comma" postag_regexp="yes" scope="next"/><exception scope="next" regexp="yes">&interp;</exception></token>
                <marker>
                   <token>jedna</token>
                </marker>
            </pattern>
            <disambig postag="adj:sg:nom.voc:f:pos"/>
            <example type="ambiguous" inputform="jedna[jeden/adj:sg:nom.voc:f:pos,jednać/verb:fin:sg:ter:imperf:refl.nonrefl]"
                     outputform="jedna[jeden/adj:sg:nom.voc:f:pos]">Otoczyła mię całą od stóp do głów wiosenka <marker>jedna</marker>, dawno, dawno, przed laty w Głogach spędzona.</example>
            <example type="untouched">Dyktator jedna się z narodem co czwartek.</example>
        </rule>
    </rulegroup>

    <rule id="JEDNA_VERB" name="jedna + czasownik -> przymiotnik">
        <pattern>
            <marker><token skip="-1" postag="adj:sg:nom.voc:f:pos">jedna<exception postag="SENT_END|interp:comma|comp:comma" postag_regexp="yes" scope="next"/><exception scope="next" regexp="yes">&interp;</exception></token></marker>
            <token postag="verb.*" postag_regexp="yes"/>
        </pattern>
        <disambig action="filterall"/>
        <example type="ambiguous" inputform="jedna[jeden/adj:sg:nom.voc:f:pos,jednać/verb:fin:sg:ter:imperf:refl.nonrefl]"
                 outputform="jedna[jeden/adj:sg:nom.voc:f:pos]">Chyba <marker>jedna</marker> musiała być spokojna.</example>
    </rule>

    <rule id="gen_dlugosci" name="adj:gen + długości ->gen">
        <pattern>
            <token postag="adj:sg:gen:f.*" postag_regexp="yes"/>
            <token postag="subst:sg:gen:f">długości</token>
        </pattern>
        <disambig action="filterall"/>
        <example type="untouched">Nici o nieskończonej długości</example>
        <example type="ambiguous" inputform="nieskończonej[nieskończony/adj:sg:dat:f:pos,nieskończony/adj:sg:gen:f:pos,nieskończony/adj:sg:loc:f:pos,skończyć/ppas:sg:gen.dat.loc:f:perf:neg]" outputform="nieskończonej[nieskończony/adj:sg:gen:f:pos]">Te nici były <marker>nieskończonej</marker> długości.</example>
    </rule>

    <rule id="dusze1" name="duszę + verb transitive = > dusza">
        <pattern>
            <marker>
                <token postag="subst:sg:acc:f">duszę</token>
                <token postag="verb.*" postag_regexp="yes"><exception inflected="yes" regexp="yes">&verb_non_transitive;</exception></token>
            </marker>
        </pattern>
        <disambig action="filterall"/>
        <example type="ambiguous" inputform="duszę[dusić/verb:fin:sg:pri:imperf:nonrefl,dusić/verb:fin:sg:pri:imperf:refl.nonrefl,dusza/subst:sg:acc:f]"
                 outputform="duszę[dusza/subst:sg:acc:f]">To jakby się <marker>duszę</marker> zaprzedawało dzikiej bestii.</example>
    </rule>
    <rule id="dusze2" name="verb transitive + duszę = > dusza">
        <pattern>
            <marker>
                <token postag="verb.*" postag_regexp="yes"><exception inflected="yes" regexp="yes">&verb_non_transitive;</exception></token>
                <token postag="subst:sg:acc:f">duszę</token>
            </marker>
        </pattern>
        <disambig action="filterall"/>
        <example type="ambiguous" inputform="duszę[dusić/verb:fin:sg:pri:imperf:nonrefl,dusić/verb:fin:sg:pri:imperf:refl.nonrefl,dusza/subst:sg:acc:f]"
                 outputform="duszę[dusza/subst:sg:acc:f]">To jakby się zaprzedawało <marker>duszę</marker> dzikiej bestii.</example>
    </rule>

    <rule id="MIEC_NADZIEJE" name="mieć + nadzieję -> rzeczownik">
        <pattern>
            <token skip="10" inflected="yes">mieć<exception postag="SENT_END|interp:comma|comp:comma" postag_regexp="yes" scope="next"/><exception scope="next" regexp="yes">&interp;</exception></token>
            <marker><token>nadzieję</token></marker>
        </pattern>
        <disambig postag="subst:sg:acc:f"/>
        <example type="untouched">Nadzieję kurczaka granatami.</example>
        <example type="ambiguous" inputform="nadzieję[nadziać/verb:fin:sg:pri:perf:refl.nonrefl,nadzieja/subst:sg:acc:f]"
                 outputform="nadzieję[nadzieja/subst:sg:acc:f]">Miałem <marker>nadzieję</marker>, że nadziejesz kurczaka granatami.</example>
    </rule>

    <rule id="SWOJE_NADZIEJE" name="nadzieje, dzieje i kraje jako rzeczownik">
        <pattern>
            <marker>
            <unify>
                <feature id="case"/><feature id="number"><type id="pl"/></feature>
                <feature id="gender"/>
                <token postag="(?:adj|pact|ppas).*" postag_regexp="yes"/>
                <token postag="subst.*" postag_regexp="yes" regexp="yes">(?:na)?dzieje|kraje</token>
            </unify>
            </marker>
        </pattern>
        <disambig action="unify"></disambig>
        <example type="untouched">Jurek nadzieje kurczaka granatami.</example>
        <example type="ambiguous" inputform="nadzieje[nadziać/verb:fin:sg:ter:perf:refl.nonrefl,nadzieja/subst:pl:acc:f,nadzieja/subst:pl:nom:f,nadzieja/subst:pl:voc:f]"
                 outputform="nadzieje[nadzieja/subst:pl:acc:f,nadzieja/subst:pl:nom:f,nadzieja/subst:pl:voc:f]">W tobie lud egipski złożył swoje <marker>nadzieje</marker>.</example>
    </rule>

    <rule id="DZIEJE_NARODU" name="dzieje + genetiwus -> rzeczownik">
        <pattern>
            <marker><token>dzieje</token></marker>
            <token postag=".*gen.*" postag_regexp="yes"/>
        </pattern>
        <disambig action="remove" postag="verb.*"/>
        <example type="ambiguous" inputform="Dzieje[dziać/verb:fin:sg:ter:imperf:refl,dziać/verb:fin:sg:ter:imperf:refl.nonrefl,dzieje/subst:pl:acc:p3,dzieje/subst:pl:nom:p3,dzieje/subst:pl:voc:p3]"
                 outputform="Dzieje[dzieje/subst:pl:acc:p3,dzieje/subst:pl:nom:p3,dzieje/subst:pl:voc:p3]"><marker>Dzieje</marker> Rosji</example>
        <example type="untouched">Co się dzieje?</example>
    </rule>

    <rule id="NADZIEJA_ZE" name="nadzieją, że -> rzeczownik">
        <pattern>
            <marker>
                <token>nadzieją</token>
            </marker>
            <token>,</token>
            <token regexp="yes">iż|że</token>
        </pattern>
        <disambig postag="subst:sg:inst:f"/>
        <example type="untouched">Prosiaka nadzieją orzechami.</example>
        <example type="ambiguous" inputform="nadzieją[nadziać/verb:fin:pl:ter:perf:refl.nonrefl,nadzieja/subst:sg:inst:f]"
                 outputform="nadzieją[nadzieja/subst:sg:inst:f]">Prostacze serce jego zakołatało po raz ostatni <marker>nadzieją</marker>, że może czeka go krzyż.</example>
    </rule>

    <rule id="BRUTTO_NETTO" name="brutto i netto w funkcji przymiotnika">
        <pattern>
        <unify>
        <feature id="case"/><feature id="number"/>
        <feature id="gender"/>
            <token inflected="yes" postag_regexp="yes" regexp="yes" postag="subst.*">składka|zysk|pojemność|wynagrodzenie|świadczenie|rentowność|dochód|pensja|kwota|odszkodowanie|płaca|obrót|pobory|marża|cena|strata|renta|przychód|dywidenda|wartość|zwrot|podwyżka|wynik|emerytura|rezerwa|nakład|stawka|suma|sprzedaż|wysokość|koszt|podatek|nadwyżka</token>
            <token regexp="yes" postag_regexp="yes" postag="adj.*">brutto|netto</token>
        </unify>
        </pattern>
        <disambig action="unify"/>
        <example type="ambiguous" inputform="netto[netto/adj:pl:acc:m1.p1:pos,netto/adj:pl:acc:m2.m3.f.n1.n2.p2.p3:pos,netto/adj:pl:dat:m1.m2.m3.f.n1.n2.p1.p2.p3:pos,netto/adj:pl:gen:m1.m2.m3.f.n1.n2.p1.p2.p3:pos,netto/adj:pl:inst:m1.m2.m3.f.n1.n2.p1.p2.p3:pos,netto/adj:pl:loc:m1.m2.m3.f.n1.n2.p1.p2.p3:pos,netto/adj:pl:nom.voc:m1.p1:pos,netto/adj:pl:nom.voc:m2.m3.f.n1.n2.p2.p3:pos,netto/adj:sg:acc:f:pos,netto/adj:sg:acc:m1.m2:pos,netto/adj:sg:acc:m3:pos,netto/adj:sg:acc:n1.n2:pos,netto/adj:sg:dat:f:pos,netto/adj:sg:dat:m1.m2.m3.n1.n2:pos,netto/adj:sg:gen:f:pos,netto/adj:sg:gen:m1.m2.m3.n1.n2:pos,netto/adj:sg:inst:f:pos,netto/adj:sg:inst:m1.m2.m3.n1.n2:pos,netto/adj:sg:loc:f:pos,netto/adj:sg:loc:m1.m2.m3.n1.n2:pos,netto/adj:sg:nom.voc:f:pos,netto/adj:sg:nom.voc:m1.m2.m3:pos,netto/adj:sg:nom.voc:n1.n2:pos,netto/adv:pos,netto/subst:sg:acc:n2,netto/subst:sg:nom:n2,netto/subst:sg:voc:n2]"
                 outputform="netto[netto/adj:sg:gen:m1.m2.m3.n1.n2:pos,netto/adj:sg:loc:m1.m2.m3.n1.n2:pos,netto/adj:sg:nom.voc:m1.m2.m3:pos]">Dla większego zysku <marker>netto</marker> zjadł teściową.</example>
    </rule>

    <rule id="GRA_ADJ" name="gra + przymiotnik = subst">
        <pattern>
            <unify>
                <feature id="case"><type id="nom"/></feature><feature id="number"><type id="sg"/></feature>
                    <feature id="gender"><type id="f"/></feature>
                <token>gra</token>
                <token postag="(?:adj|pact|ppas).*" postag_regexp="yes"/>
            </unify>
        </pattern>
        <disambig action="unify"/>
        <example type="untouched">Jarek gra w szachy z Alikiem.</example>
        <example type="ambiguous" inputform="gra[gra/subst:sg:nom:f,grać/verb:fin:sg:ter:imperf:refl.nonrefl]" outputform="gra[gra/subst:sg:nom:f]">Alpha Centauri - <marker>gra</marker> komputerowa</example>
    </rule>

    <rule id="KRAJE_UBOGIE" name="nadzieje, dzieje i kraje jako rzeczownik">
        <pattern>
            <unify>
                <feature id="case"/><feature id="number"/><feature id="gender"/>
                <token regexp="yes">(?:na)?dzieje|kraje</token>
                <token postag="(?:adj|pact|ppas).*" postag_regexp="yes"/>
            </unify>
        </pattern>
        <disambig action="unify"></disambig>
        <example type="untouched">Jurek nadzieje kurczaka granatami.</example>
        <example type="ambiguous" inputform="kraje[kraj/subst:pl:acc:m3,kraj/subst:pl:nom:m3,kraj/subst:pl:voc:m3,krajać/verb:fin:sg:ter:imperf:refl.nonrefl]"
                 outputform="kraje[kraj/subst:pl:acc:m3,kraj/subst:pl:nom:m3,kraj/subst:pl:voc:m3]">Nawet <marker>kraje</marker> ubogie potrzebują wsparcia.</example>
    </rule>


    <rule id="KRAJE_NATO" name="kraje NATO => rzeczownik">
        <pattern>
            <marker><token postag="verb:fin:sg:ter:imperf:refl.nonrefl">kraje</token></marker>
            <token>NATO</token>
        </pattern>
        <disambig action="remove"><wd lemma="krajać"/></disambig>
        <example type="ambiguous" inputform="kraje[kraj/subst:pl:acc:m3,kraj/subst:pl:nom:m3,kraj/subst:pl:voc:m3,krajać/verb:fin:sg:ter:imperf:refl.nonrefl]"
                 outputform="kraje[kraj/subst:pl:acc:m3,kraj/subst:pl:nom:m3,kraj/subst:pl:voc:m3]">To były <marker>kraje</marker> NATO.</example>
    </rule>

    <rule id="PANSTWO_MLODZI" name="państwo młodzi">
        <pattern>
            <token postag="subst.*" postag_regexp="yes" inflected="yes">państwo</token>
            <token postag="adj.*" postag_regexp="yes" inflected="yes">młody</token>
        </pattern>
        <disambig action="filterall"/>
    </rule>

    <rule id="MOJ_BLIZNI" name="bliźni - zwykle nie czasownik">
        <pattern>
            <unify>
                <feature id="case"/><feature id="number"/><feature id="gender"/>
                <token postag_regexp="yes" postag="adj.*"/>
                <token postag="subst.*" postag_regexp="yes">bliźni</token>
            </unify>
        </pattern>
        <disambig action="unify"/>
        <example type="ambiguous" inputform="bliźni[bliźni/adj:pl:nom.voc:m1.p1:pos,bliźni/adj:sg:acc:m3:pos,bliźni/adj:sg:nom.voc:m1.m2.m3:pos,bliźni/subst:pl:nom:m1,bliźni/subst:pl:voc:m1,bliźni/subst:sg:nom:m1,bliźni/subst:sg:voc:m1,bliźnić/verb:fin:sg:ter:imperf:refl,bliźny/adj:pl:nom.voc:m1.p1:pos,bliźny/subst:pl:nom:m1,bliźny/subst:pl:voc:m1]"
                 outputform="bliźni[bliźni/subst:sg:nom:m1,bliźni/subst:sg:voc:m1]">To jest mój <marker>bliźni</marker>.</example>
    </rule>

    <rule id="WLASNE_OSIEDLA" name="osiedla jako rzeczownik">
        <pattern>
            <marker>
                <unify>
                    <feature id="case"/><feature id="number"/>
                    <feature id="gender"><type id="n2"/></feature>
                    <token postag="(?:adj|pact|ppas).*" postag_regexp="yes"/>
                    <token postag="subst.*" postag_regexp="yes">osiedla</token>
                </unify>
            </marker>
        </pattern>
        <disambig action="unify"></disambig>
        <example type="untouched">On tu osiedla imigrantów.</example>
        <example type="ambiguous" inputform="osiedla[osiedlać/verb:fin:sg:ter:imperf:refl.nonrefl,osiedle/subst:pl:acc:n2,osiedle/subst:pl:nom:n2,osiedle/subst:pl:voc:n2,osiedle/subst:sg:gen:n2]"
                 outputform="osiedla[osiedle/subst:pl:acc:n2,osiedle/subst:pl:nom:n2,osiedle/subst:pl:voc:n2]">Stare <marker>osiedla</marker> europejskiej ludności tworzą dziś już tylko historyczne dzielnice dla turystów.</example>
    </rule>

    <rule id="TAJEMNICZA_MINA" name="tajemniczą miną => rzeczownik">
        <pattern>
            <token postag="adj:sg:inst:f.*" postag_regexp="yes"></token>
            <marker><token>miną</token></marker>
        </pattern>
        <disambig postag="subst:sg:inst:f"/>
        <example type="ambiguous" inputform="miną[mina/subst:sg:inst:f,minąć/verb:fin:pl:ter:perf:refl.nonrefl]"
                 outputform="miną[mina/subst:sg:inst:f]">Patrzył na nich ze smutną <marker>miną</marker>.</example>
    </rule>

    <rule id="PIETRA_NIE_MIEC" name="pietra jako dopełniacz">
        <pattern>
            <marker>
            <token skip="5">pietra</token>
            </marker>
            <token inflected="yes">mieć</token>
        </pattern>
        <disambig postag="subst:sg:gen:m1"/>
    </rule>

    <rule id="PIETRA_NIE_MIEC_2" name="pietra jako dopełniacz">
        <pattern>
            <token inflected="yes" skip="4">mieć</token>
            <marker>
                <token>pietra</token>
            </marker>
        </pattern>
        <disambig postag="subst:sg:gen:m1"/>
    </rule>

    <rule id="mialem" name="miałem + acc">
        <pattern>
            <marker><token>miałem</token></marker>
            <token postag=".*acc.*" postag_regexp="yes"></token>
        </pattern>
        <disambig postag="verb:praet:sg:m1.m2.m3:pri:imperf:refl.nonrefl"/>
        <example type="ambiguous" inputform="miałem[miał/subst:sg:inst:m3,mieć/verb:praet:sg:m1.m2.m3:pri:imperf:refl.nonrefl]"
                 outputform="miałem[mieć/verb:praet:sg:m1.m2.m3:pri:imperf:refl.nonrefl]">Oczywiście, <marker>miałem</marker> rację.</example>
        <example type="untouched">Nie bawię się miałem węglowym.</example>
    </rule>

    <rule id="ktora_ma" name="który ma => verb">
        <pattern>
            <token regexp="yes">która|jaka</token>
            <marker><token>ma</token></marker>
        </pattern>
        <disambig postag="verb:fin:sg:ter:imperf:refl.nonrefl"/>
        <example type="ambiguous" inputform="ma[mieć/verb:fin:sg:ter:imperf:refl.nonrefl,mój/adj:sg:nom.voc:f:pos]" outputform="ma[mieć/verb:fin:sg:ter:imperf:refl.nonrefl]">... całej wieczności, która mnie poprzedziła, i tej która <marker>ma</marker> po mnie nastąpić.</example>
    </rule>

    <rule id="jacy_ktorzy_byli" name="jacy byli => verb">
        <pattern>
            <token regexp="yes">jacy|którzy</token>
            <marker><token>byli</token></marker>
        </pattern>
        <disambig action="remove"><wd lemma="były"/></disambig>
        <example type="ambiguous" inputform="byli[być/verb:praet:pl:m1.p1:ter:imperf:nonrefl,były/adj:pl:nom.voc:m1.p1:pos,były/subst:pl:nom:m1,były/subst:pl:voc:m1]"
                 outputform="byli[być/verb:praet:pl:m1.p1:ter:imperf:nonrefl]">Ciągle wchodzili nowi, wszyscy, jacy <marker>byli</marker> od samego początku naszego klasztoru.</example>
    </rule>

    <rule id="GO" name="go to nie rzeczownik">
        <pattern>
            <token>go<exception scope="previous">w</exception><exception scope="previous" postag="SENT_START"></exception></token>
        </pattern>
        <disambig action="remove"><wd lemma="go"/></disambig>
        <example type="ambiguous" inputform="go[go/subst:pl:acc:n2,go/subst:pl:dat:n2,go/subst:pl:gen:n2,go/subst:pl:inst:n2,go/subst:pl:loc:n2,go/subst:pl:nom:n2,go/subst:pl:voc:n2,go/subst:sg:acc:n2,go/subst:sg:dat:n2,go/subst:sg:gen:n2,go/subst:sg:inst:n2,go/subst:sg:loc:n2,go/subst:sg:nom:n2,go/subst:sg:voc:n2,on/ppron3:sg:acc:m1.m2.m3:ter:nakc:npraep,on/ppron3:sg:gen:m1.m2.m3:ter:nakc:npraep,on/ppron3:sg:gen:n1.n2:ter:nakc:npraep]"
                 outputform="go[on/ppron3:sg:acc:m1.m2.m3:ter:nakc:npraep,on/ppron3:sg:gen:m1.m2.m3:ter:nakc:npraep,on/ppron3:sg:gen:n1.n2:ter:nakc:npraep]">Widziałem <marker>go</marker> w lesie.</example>
    </rule>

    <rule id="GRA_W_GO" name="go jako rzeczownik">
        <pattern>
            <token>w</token>
            <marker><token>go</token></marker>
        </pattern>
        <disambig action="remove"><wd lemma="on"/></disambig>
        <example type="ambiguous" inputform="go[go/subst:pl:acc:n2,go/subst:pl:loc:n2,go/subst:sg:acc:n2,go/subst:sg:loc:n2,on/ppron3:sg:acc:m1.m2.m3:ter:nakc:npraep]"
                 outputform="go[go/subst:pl:acc:n2,go/subst:pl:loc:n2,go/subst:sg:acc:n2,go/subst:sg:loc:n2]">Gram w <marker>go</marker>.</example>
    </rule>

    <rule id="ZBYT_ADV" name="zbyt jako przysłówek">
        <pattern>
            <unify negate="yes">
                <feature id="case"></feature><feature id="gender"></feature>
                <feature id="number"/>
                <marker>
                    <token>zbyt</token>
                </marker>
                <token postag="(adj|ppas|pact).*" postag_regexp="yes"/>
            </unify>
        </pattern>
        <disambig postag="adv"/>
        <example type="untouched">Drogi złoty utrudnia zbyt towarowy.</example>
        <example type="ambiguous" inputform="zbyt[zbyt/adv,zbyt/subst:sg:acc:m3,zbyt/subst:sg:nom:m3]"
                 outputform="zbyt[zbyt/adv]">To <marker>zbyt</marker> interesujące.</example>
    </rule>

    <rule id="TO_NIE_CONJ" name="to jako ten">
        <pattern>
            <unify>
                <feature id="gender"></feature><feature id="case"/><feature id="number"/>
                <token postag="adj:sg.*" postag_regexp="yes">to<exception scope="previous" regexp="yes">&interp;</exception><exception scope="previous" postag="SENT_START"/></token>
                <token postag="subst:sg.*" postag_regexp="yes"><exception>co</exception></token>
            </unify>
        </pattern>
        <disambig action="filterall"/>
        <example type="ambiguous" inputform="to[ten/adj:sg:acc:n1.n2:pos,ten/adj:sg:nom.voc:n1.n2:pos,to/conj,to/qub,to/subst:sg:acc:n2,to/subst:sg:nom:n2]"
                 outputform="to[ten/adj:sg:acc:n1.n2:pos,ten/adj:sg:nom.voc:n1.n2:pos]">Wróć <marker>to</marker> wesele myśli.</example>
        <example type="untouched">Wróć, to wesele ci się spodoba.</example>
    </rule>

    <rule id="TO_PREP_JAKI_KTORY" name="to jako subst">
        <pattern>
            <marker>
                <token>to</token>
            </marker>
                <token min="0" max="1">,</token>
            <unify>
                <feature id="case"></feature>
                <token postag="prep.*" postag_regexp="yes"><exception>jak</exception></token>
                <token inflected="yes" regexp="yes">który|jaki</token>
            </unify>
        </pattern>
        <disambig action="filter" postag="subst.*"/>
        <example type="ambiguous" inputform="to[ten/adj:sg:acc:n1.n2:pos,ten/adj:sg:nom.voc:n1.n2:pos,to/conj,to/qub,to/subst:sg:acc:n2,to/subst:sg:nom:n2]"
                 outputform="to[to/subst:sg:acc:n2,to/subst:sg:nom:n2]">Interesuje nas <marker>to</marker>, w jaki sposób się to dzieje.</example>
        <example type="ambiguous" inputform="to[ten/adj:sg:acc:n1.n2:pos,ten/adj:sg:nom.voc:n1.n2:pos,to/conj,to/qub,to/subst:sg:acc:n2,to/subst:sg:nom:n2]"
                 outputform="to[to/subst:sg:acc:n2,to/subst:sg:nom:n2]">Interesuje nas <marker>to</marker> w jaki sposób się to dzieje.</example>
        <example type="untouched">To, jak jakie pędraki to robią, jest nieinteresujące.</example>
    </rule>

    <rule id="DOSC_ZE" name="dość że">
        <pattern>
            <marker><token regexp="yes">dość|dosyć|jako</token></marker>
            <token>że</token>
        </pattern>
        <disambig postag="conj"/> <!-- wg Innego słownika -->
    </rule>

    <rule id="JAK_NIE_CONJ" name="jak w funkcji innej niż spójnik">
        <pattern>
            <marker><token>jak<exception scope="previous">,</exception><exception scope="previous" postag="SENT_START"/></token></marker>
            <token skip="-1"><exception>gdyby</exception><exception scope="next" postag="verb:.*(sg|pl).*|verb:imps.*|pcon:imperf.*|pant:perf.*" postag_regexp="yes"/></token>
            <token postag="SENT_END"/>
        </pattern>
        <disambig action="remove"><wd pos="conj"/></disambig>
    </rule>

    <rule id="tyle_co" name="co jako comp">
           <pattern>
                <marker>
                    <token postag="adv|num.*" postag_regexp="yes">tyle</token>
                    <token min="0" max="1" postag="interp:comma">,</token>
                    <token postag="comp">co</token>
                </marker>
            </pattern>
            <disambig action="filterall"/>
            <example type="ambiguous" inputform="co[co/comp,co/qub,co/subst:sg:acc:n2,co/subst:sg:gen:n2,co/subst:sg:nom:n2]"
                     outputform="co[co/comp]">Dla dzikiej świni wino znaczy tyle, <marker>co</marker> pomyje.</example>
         <example type="ambiguous" inputform="co[co/comp,co/qub,co/subst:sg:acc:n2,co/subst:sg:gen:n2,co/subst:sg:nom:n2]"
                  outputform="co[co/comp]">Dla dzikiej świni wino znaczy tyle <marker>co</marker> pomyje.</example>
     </rule>

    <rule id="rownie_adv" name="równie jako adv">
        <pattern>
            <marker>
            <token regexp="yes">tak|równie</token>
            </marker>
            <token skip="-1"><exception regexp="yes" scope="next">&interp;|bądź|czy|ani|lub|albo|oraz|i</exception></token>
            <token><exception postag="interp:comma" scope="previous"></exception>jak</token>
        </pattern>
        <disambig postag="adv:pos"></disambig>
        <example type="ambiguous" inputform="równie[rówień/subst:pl:acc:f,rówień/subst:pl:nom:f,rówień/subst:pl:voc:f,równia/subst:pl:acc:f,równia/subst:pl:nom:f,równia/subst:pl:voc:f,równie/adv:pos]"
                 outputform="równie[równie/adv:pos]">On jest <marker>równie</marker> biegły jak inni.</example>
        <example type="untouched">Widziałem już różne równie pochyłe.</example>
    </rule>

    <rule id="ROWNIE_ADV_2" name="równie jako adv:pos">
        <pattern>
            <marker><token>równie</token></marker>
            <token postag="adj.*:pos" postag_regexp="yes"><exception>pochyłe</exception></token>
        </pattern>
        <disambig postag="adv:pos"/>
        <example type="ambiguous" outputform="równie[równie/adv:pos]"
                 inputform="równie[rówień/subst:pl:acc:f,rówień/subst:pl:nom:f,rówień/subst:pl:voc:f,równia/subst:pl:acc:f,równia/subst:pl:nom:f,równia/subst:pl:voc:f,równie/adv:pos]">Dulcynea z Toboso jest <marker>równie</marker> dobrą księżniczką.</example>
    </rule>

    <rule id="SILNIE" name="silnie jako adv:pos">
    <pattern>
        <marker><token>silnie</token></marker>
        <token postag="adj.*:pos" postag_regexp="yes"/>
    </pattern>
    <disambig postag="adv:pos"/>
        <example type="untouched">Funkcje takie jak silnie najczęstsze są w jego rachunkach.</example>
        <example type="ambiguous" inputform="silnie[silnia/subst:pl:acc:f,silnia/subst:pl:nom:f,silnia/subst:pl:voc:f,silnie/adv:pos]"
                 outputform="silnie[silnie/adv:pos]">Generał miał twarz <marker>silnie</marker> ogorzałą.</example>
    </rule>

    <rulegroup id="SMIALO_ADV" name="śmiało jako przysłówek">
        <rule>
        <pattern>
            <token postag="verb:.*(sg|pl).*|verb:imps.*|pcon:imperf.*|pant:perf.*" postag_regexp="yes" skip="-1"><exception postag="subst:.*|adj.*|ppron.*|verb:inf.*|verb:bedzie.*|adv:com|prep.*|qub|adv.*|conj|comp|&lt;/TO_(ZNACZY|JEST)&gt;" postag_regexp="yes" scope="current"></exception><exception scope="current">może</exception><exception postag="SENT_END|&lt;ELLIPSIS&gt;|interp:comma|comp:comma" postag_regexp="yes" scope="next"/></token>
            <marker>
                <token>śmiało</token>
            </marker>
        </pattern>
        <disambig action="filter" postag="adv:pos"/>
        <example type="ambiguous" inputform="śmiało[śmiać/verb:praet:sg:n1.n2:ter:imperf:refl,śmiało/adv:pos,śmieć/verb:praet:sg:n1.n2:ter:imperf:nonrefl]"
                 outputform="śmiało[śmiało/adv:pos]">Zatrzymał się <marker>śmiało</marker>.</example>
    </rule>
    <rule>
        <pattern>
            <marker><token>śmiało</token></marker>
            <token postag="verb.*" postag_regexp="yes"/>
        </pattern>
        <disambig postag="adv:pos"/>
    </rule>
        <rule>
            <pattern>
                <marker><token>śmiało</token></marker>
                <token skip="-1">się<exception postag="SENT_END|&lt;ELLIPSIS&gt;|comp:comma|interp:comma" postag_regexp="yes" scope="next"/></token>
                <token postag="verb.*:refl(?:\.nonrefl)?" postag_regexp="yes"/>
            </pattern>
            <disambig postag="adv:pos"/>
        </rule>
    </rulegroup>

    <rule id="stanie_sie_adj" name="stanie się jasne -> verb">
        <pattern>
            <marker>
                <token postag="verb:fin:sg:ter:perf:refl">stanie</token>
                <token postag="qub">się</token>
                <token postag="adj:sg:nom.*" postag_regexp="yes"/>
            </marker>
        </pattern>
        <disambig action="filterall"/>
    </rule>

    <rule id="stale_adv" name="stale + ppas/verb > adv">
        <pattern>
            <marker>
                <token postag="adv:pos">stale</token>
                <token postag="verb.*|ppas.*" postag_regexp="yes"/>
            </marker>
        </pattern>
        <disambig action="filterall"/>
    </rule>

    <rule id="tak_samo" name="tak samo => adv:pos">
        <pattern>
            <token postag="adv:pos">tak</token>
            <token postag="adv:pos">samo</token>
        </pattern>
        <disambig action="filterall"/>
    </rule>

    <rule id="bracia_nie_bracia" name="bracia szlachta">
        <pattern>
            <marker>
                <token>bracia</token>
            </marker>
            <token><exception>szlachta</exception></token>
        </pattern>
        <disambig action="remove"><wd lemma="bracia"/></disambig>
    </rule>

    <rule id="broni_sie" name="broni się -> czasownik">
        <pattern>
            <token postag="verb:fin:sg:ter:imperf:refl.nonrefl">broni</token>
            <token postag="qub">się</token>
        </pattern>
        <disambig action="filterall"/>
    </rule>

    <rule id="sie_stanie" name="się stanie -> czasownik">
        <pattern>
            <token postag="qub">się</token>
            <token postag="verb:fin:sg:ter:perf:refl">stanie</token>
        </pattern>
        <disambig action="filterall"/>
    </rule>

    <rulegroup id="BRATA_SUBST" name="„brata” itp. jako rzeczownik">
        <rule>
            <pattern>
                <token inflected="yes" postag="verb:.*(sg|pl).*|verb:imps.*|pcon:imperf.*|pant:perf.*" postag_regexp="yes" skip="-1">mieć<exception scope="current">miano</exception><exception postag="SENT_END|&lt;ELLIPSIS&gt;|comp:comma|interp:comma" postag_regexp="yes" scope="next"/><exception scope="next" postag="conj">jak</exception></token>
                <marker>
                    <token regexp="yes">bąka|brata|broni|burzy|czci|czerwieni|ciąży|gra|kluczy|lata|myśl[ią]|niewoli|piekł[oa]|potrzeba|powodzi|przysięga|soli|stanie|towarzyszy|troska|zieleni|zwierza|przyjaźni|gości|rzeką|złości|(?:roz|po|prze|u)?dział|wieści|zazdrości|zbroją|złości|złość</token>
                </marker>
            </pattern>
            <disambig action="filter" postag="subst.*"/>
        </rule>
        <rule>
        <pattern>
            <token postag="verb:.*(sg|pl).*|verb:imps.*|pcon:imperf.*|pant:perf.*" postag_regexp="yes" skip="-1"><exception postag="subst:.*|adj.*|ppron.*|verb:inf.*|verb:bedzie.*|adv:com|prep.*|qub|adv.*|conj|comp|&lt;/TO_(ZNACZY|JEST)&gt;" postag_regexp="yes" scope="current"></exception><exception scope="current">może</exception><exception postag="SENT_END|&lt;ELLIPSIS&gt;|interp:comma|comp:comma" postag_regexp="yes" scope="next"/><exception scope="next" postag="conj">jak</exception></token>
            <marker>
                <token regexp="yes">bąka|brata|broni|burzy|ciąży|czci|czerwieni|gra|kluczy|lata|myśl[ią]|niewoli|piekł[oa]|potrzeba|powodzi|przysięga|soli|stanie|troska|towarzyszy|zieleni|zwierza|przyjaźni|gości|rzeką|złości|(?:roz|po|prze|u)?dział|wieści|zazdrości|zbroją|złości|złość</token>
            </marker>
        </pattern>
        <disambig action="filter" postag="subst.*"/>
            <example type="ambiguous" inputform="myśli[myśl/subst:pl:acc:f,myśl/subst:pl:gen:f,myśl/subst:pl:nom:f,myśl/subst:pl:voc:f,myśl/subst:sg:dat:f,myśl/subst:sg:gen:f,myśl/subst:sg:loc:f,myśl/subst:sg:voc:f,myśleć/verb:fin:sg:ter:imperf:nonrefl,myślić/verb:fin:sg:ter:imperf:nonrefl]"
                     outputform="myśli[myśl/subst:pl:acc:f,myśl/subst:pl:gen:f,myśl/subst:pl:nom:f,myśl/subst:pl:voc:f,myśl/subst:sg:dat:f,myśl/subst:sg:gen:f,myśl/subst:sg:loc:f,myśl/subst:sg:voc:f]">Norwid to jest poeta <marker>myśli</marker>.</example>
            <example type="untouched">Czy słyszałeś jak mój syn gra na skrzypcach?</example>
        </rule>
        <rule>
            <pattern>
                <marker>
                    <token skip="-1" regexp="yes">bąka|brata|burzy|czci|czerwieni|gra|kluczy|lata|broni|ciąży|myśl[ią]|niewoli|piekł[oa]|potrzeba|powodzi|przysięga|soli|stanie|troska|towarzyszy|zieleni|zwierza|przyjaźni|gości|rzeką|(?:roz|po|prze|u)?dział|wieści|zazdrości|zbroją|złości|złość<exception postag="SENT_END|&lt;ELLIPSIS&gt;|interp:comma|comp:comma" postag_regexp="yes" scope="next"/><exception scope="next" postag="conj">jak</exception></token>
                </marker>
                <token postag="verb:.*(sg|pl).*|verb:imps.*|pcon:imperf.*|pant:perf.*" postag_regexp="yes"><exception postag="subst:.*|adj.*|ppron.*|verb:inf.*|verb:bedzie.*|adv:com|prep.*|qub|adv.*|conj|comp|&lt;/TO_(ZNACZY|JEST)&gt;" postag_regexp="yes" scope="current"/><exception scope="current">może</exception></token>
            </pattern>
            <disambig action="filter" postag="subst.*"/>
            <example type="ambiguous" inputform="bąka[bąk/subst:sg:acc:m2,bąk/subst:sg:gen:m2,bąkać/verb:fin:sg:ter:imperf:nonrefl]"
                     outputform="bąka[bąk/subst:sg:acc:m2,bąk/subst:sg:gen:m2]">Drukarz <marker>bąka</marker> uciął.</example>
        </rule>
    </rulegroup>

    <rule id="STALA_SIE_KULA" name="stała się kulą">
        <pattern>
            <marker>
                <token postag="verb:praet:sg:f:ter:perf:refl">stała</token>
                <token postag="qub">się</token>
                <token postag="subst:sg:inst:f">kulą</token>
            </marker>
        </pattern>
        <disambig action="filterall"/>
    </rule>

    <rule id="ZNAJDE_ACC" name="znajdę + biernik => czasownik">
        <pattern>
            <marker><token>znajdę</token></marker>
            <token postag=".*acc.*" postag_regexp="yes"/>
        </pattern>
        <disambig postag="verb:fin:sg:pri:perf:nonrefl"/>
    </rule>

    <rulegroup id="ADJ_PRAET_ADJ" name="wyrosła jako przymiotnik">
        <rule>
            <pattern>
               <token inflected="yes" postag="verb:.*(sg|pl).*|verb:imps.*" postag_regexp="yes" skip="-1">mieć<exception scope="current">miano</exception><exception postag="SENT_END|&lt;ELLIPSIS&gt;|comp:comma|interp:comma" postag_regexp="yes" scope="next"/></token>
                <marker>
                <unify>
                    <feature id="case"/><feature id="number"/><feature id="gender"/>
                    <token postag="(?:subst|ger|depr).*" postag_regexp="yes"/>
                    <and>
                    <token postag="(?:adj|pact|ppas).*" postag_regexp="yes"><exception postag="(?:adj|subst|pact|ppas|verb:praet).*" postag_regexp="yes" negate_pos="yes"/></token>
                        <token postag="verb:praet.*" postag_regexp="yes"/>
                    </and>
                </unify>
                </marker>
            </pattern>
            <disambig action="unify"/>
            <example type="untouched">Porzeczka wyrosła w murze.</example>
            <example type="ambiguous" inputform="wyrosła[wyrosnąć/verb:praet:sg:f:ter:perf:nonrefl,wyrosły/adj:sg:nom.voc:f:pos]"
                     outputform="wyrosła[wyrosły/adj:sg:nom.voc:f:pos]">Dużo uroku miała porzeczka <marker>wyrosła</marker> w murze.</example>
        </rule>
        <rule>
            <pattern>
                <token inflected="yes" postag="verb:.*(sg|pl).*|verb:imps.*" postag_regexp="yes" skip="-1">mieć<exception scope="current">miano</exception><exception postag="SENT_END|&lt;ELLIPSIS&gt;|comp:comma|interp:comma" postag_regexp="yes" scope="next"/></token>
                <token postag="subst.*" postag_regexp="yes"/>
                <marker>
                    <unify>
                        <feature id="case"/><feature id="number"/><feature id="gender"/>
                        <token postag="(?:subst|ger|depr).*" postag_regexp="yes"/>
                        <and>
                            <token postag="(?:adj|pact|ppas).*" postag_regexp="yes"><exception postag="(?:adj|subst|pact|ppas|verb:praet).*" postag_regexp="yes" negate_pos="yes"/></token>
                            <token postag="verb:praet.*" postag_regexp="yes"/>
                        </and>
                    </unify>
                </marker>
            </pattern>
            <disambig action="unify"/>
            <example type="untouched">Porzeczka wyrosła w murze.</example>
            <example type="ambiguous" inputform="wyrosła[wyrosnąć/verb:praet:sg:f:ter:perf:nonrefl,wyrosły/adj:sg:nom.voc:f:pos]"
                     outputform="wyrosła[wyrosły/adj:sg:nom.voc:f:pos]">Miała sporo uroku porzeczka <marker>wyrosła</marker> w murze.</example>
        </rule>
        <rule>
        <pattern>
        <token postag="verb:.*(sg|pl).*|verb:imps.*" postag_regexp="yes" skip="-1"><exception postag="subst:.*|adj.*|ppron.*|verb:inf.*|verb:bedzie.*|adv:com|prep.*|qub|adv.*|conj|comp|&lt;/TO_(ZNACZY|JEST)&gt;" postag_regexp="yes" scope="current"/><exception scope="current">może</exception><exception postag="SENT_END|&lt;ELLIPSIS&gt;|interp:comma|comp:comma" postag_regexp="yes" scope="next"/></token>
            <marker>
                <unify>
                    <feature id="case"/><feature id="number"/><feature id="gender"/>
                    <token postag="(?:subst|ger|depr).*" postag_regexp="yes"/>
                    <and>
                        <token postag="(?:adj|pact|ppas).*" postag_regexp="yes"><exception postag="(adj|pact|ppas|subst|verb:praet).*" postag_regexp="yes" negate_pos="yes"/></token>
                        <token postag="verb:praet.*" postag_regexp="yes"/>
                    </and>
                </unify>
            </marker>
        </pattern>
            <disambig action="unify"/>
            <example type="untouched">Porzeczka wyrosła w murze.</example>
            <example type="untouched">Demoliberalizm jest identyczny jak bolszewicki.</example>
            <example type="ambiguous" inputform="wyrosła[wyrosnąć/verb:praet:sg:f:ter:perf:nonrefl,wyrosły/adj:sg:nom.voc:f:pos]"
                     outputform="wyrosła[wyrosły/adj:sg:nom.voc:f:pos]">Dużo uroku przydawała porzeczka <marker>wyrosła</marker> w murze.</example>
        </rule>
        <rule>
            <pattern>
                <token postag="verb:.*(sg|pl).*|verb:imps.*" postag_regexp="yes" skip="-1"><exception postag="subst:.*|adj.*|ppron.*|verb:inf.*|verb:bedzie.*|adv:com|prep.*|qub|adv.*|conj|comp|&lt;/TO_(ZNACZY|JEST)&gt;" postag_regexp="yes" scope="current"/><exception scope="current">może</exception><exception postag="SENT_END|&lt;ELLIPSIS&gt;|interp:comma|comp:comma" postag_regexp="yes" scope="next"/></token>
                <marker>
                    <unify>
                        <feature id="case"/><feature id="number"/><feature id="gender"/>
                        <token postag="(?:subst|ger|depr).*" postag_regexp="yes"/>
                        <unify-ignore>
                            <token>tak</token>
                        </unify-ignore>
                        <and>
                            <token postag="(?:adj|pact|ppas).*" postag_regexp="yes"><exception postag="(adj|pact|ppas|subst|verb:praet).*" postag_regexp="yes" negate_pos="yes"/></token>
                            <token postag="verb:praet.*" postag_regexp="yes"/>
                        </and>
                    </unify>
                </marker>
            </pattern>
            <disambig action="unify"/>
            <example type="untouched">Porzeczka wyrosła w murze.</example>
            <example type="untouched">Demoliberalizm jest identyczny jak bolszewicki.</example>
            <example type="ambiguous" inputform="ogorzała[ogorzały/adj:sg:nom.voc:f:pos,ogorzeć/verb:praet:sg:f:ter:perf:nonrefl]"
                     outputform="ogorzała[ogorzały/adj:sg:nom.voc:f:pos]">Z młodością kibici jej i warkoczy tworzyła twarz tak <marker>ogorzała</marker>, że od włosów ciemniejsza...</example>
        </rule>
        <rule>
            <pattern>
                <token postag="verb:.*(sg|pl).*|verb:imps.*" postag_regexp="yes" skip="-1"><exception postag="subst:.*|adj.*|ppron.*|verb:inf.*|verb:bedzie.*|adv:com|prep.*|qub|adv.*|conj|comp|&lt;/TO_(ZNACZY|JEST)&gt;" postag_regexp="yes" scope="current"/><exception scope="current">może</exception><exception postag="SENT_END|&lt;ELLIPSIS&gt;|interp:comma|comp:comma" postag_regexp="yes" scope="next"/></token>
                <token postag="subst.*" postag_regexp="yes"/>
                <marker>
                    <unify>
                        <feature id="case"/><feature id="number"/><feature id="gender"/>
                        <token postag="(?:subst|ger|depr).*" postag_regexp="yes"/>
                        <and>
                            <token postag="(?:adj|pact|ppas).*" postag_regexp="yes"><exception postag="(adj|pact|ppas|subst|verb:praet).*" postag_regexp="yes" negate_pos="yes"/></token>
                            <token postag="verb:praet.*" postag_regexp="yes"/>
                        </and>
                    </unify>
                </marker>
            </pattern>
            <disambig action="unify"/>
            <example type="untouched">Porzeczka wyrosła w murze.</example>
            <example type="untouched">Demoliberalizm jest identyczny jak bolszewicki.</example>
            <example type="ambiguous" inputform="wyrosła[wyrosnąć/verb:praet:sg:f:ter:perf:nonrefl,wyrosły/adj:sg:nom.voc:f:pos]"
                     outputform="wyrosła[wyrosły/adj:sg:nom.voc:f:pos]">Przydawała woni porzeczka <marker>wyrosła</marker> w murze.</example>
        </rule>
        <rule>
            <pattern>
                <token postag="verb:.*(sg|pl).*|verb:imps.*" postag_regexp="yes" skip="-1"><exception postag="subst:.*|adj.*|ppron.*|verb:inf.*|verb:bedzie.*|adv:com|prep.*|qub|adv.*|conj|comp|&lt;/TO_(ZNACZY|JEST)&gt;" postag_regexp="yes" scope="current"></exception><exception scope="current">może</exception><exception postag="SENT_END|&lt;ELLIPSIS&gt;|interp:comma|comp:comma" postag_regexp="yes" scope="next"/></token>
                <marker>
                    <unify>
                        <feature id="case"/><feature id="number"/><feature id="gender"/>
                        <token postag="adj.*" inflected="yes" postag_regexp="yes">wszystek</token>
                        <and>
                            <token postag="(?:adj|pact|ppas).*" postag_regexp="yes"><exception postag="(adj|subst|pact|ppas|verb).*" postag_regexp="yes" negate_pos="yes"/></token>
                            <token postag="verb:praet.*" postag_regexp="yes"/>
                        </and>
                        <token postag="(?:subst|ger|depr).*" postag_regexp="yes"/>
                    </unify>
                </marker>
            </pattern>
            <disambig action="unify"/>
            <example type="untouched">Porzeczka wyrosła w murze.</example>
            <example type="untouched">Demoliberalizm jest identyczny jak bolszewicki.</example>
            <example type="ambiguous" inputform="zmarli[zemrzeć/verb:praet:pl:m1.p1:ter:perf:nonrefl,zmarły/adj:pl:nom.voc:m1.p1:pos,zmarły/subst:pl:nom:m1,zmarły/subst:pl:voc:m1]"
                     outputform="zmarli[zmarły/adj:pl:nom.voc:m1.p1:pos]">Dużo uroku przydawali wszyscy <marker>zmarli</marker> bankruci.</example>
        </rule>
        <rule>
            <pattern case_sensitive="yes">
            <marker>
                <unify>
                    <feature id="case"/><feature id="number"/><feature id="gender"/>
                    <token postag="(?:subst|ger|depr).*" postag_regexp="yes"/>
                    <and>
                        <token skip="-1" postag="(?:adj|pact|ppas).*" postag_regexp="yes"><exception postag="(?:adj|pact|subst|ppas|verb:praet).*" postag_regexp="yes" negate_pos="yes"/><exception postag="SENT_END|&lt;ELLIPSIS&gt;|interp:comma|comp:comma|pcon:imperf.*|pant:perf.*" postag_regexp="yes" scope="next"/></token>
                        <token postag="verb:praet.*" postag_regexp="yes"/>
                    </and>
                </unify>
            </marker>
            <token postag="verb:.*(sg|pl).*|verb:imps.*" postag_regexp="yes"/>
            </pattern>
            <disambig action="unify"/>
            <example type="untouched">Porzeczka wyrosła w murze.</example>
            <example type="ambiguous" inputform="wyrosła[wyrosnąć/verb:praet:sg:f:ter:perf:nonrefl,wyrosły/adj:sg:nom.voc:f:pos]"
                     outputform="wyrosła[wyrosły/adj:sg:nom.voc:f:pos]">Porzeczka <marker>wyrosła</marker> w murze przydawała wiele uroku.</example>

        </rule>
    </rulegroup>

    <rule id="MISTRZ_PYTA" name="nazwy własne błędnie rozpoznane jako czasowniki">
        <pattern case_sensitive="yes">
            <token regexp="yes" inflected="yes">mistrz|książę|pan|brat|święty|doktor</token>
            <marker>
                <token postag="verb.*" postag_regexp="yes" regexp="yes">\p{Lu}\p{Ll}+</token>
            </marker>
        </pattern>
        <disambig action="remove" postag="verb.*"></disambig>
        <example type="ambiguous" inputform="Czernisz[czernić/verb:fin:sg:sec:imperf:refl.nonrefl]"
                 outputform="Czernisz[Czernisz]">Dr <marker>Czernisz</marker> pochodził ze sfery ludzi biednych.</example>
    </rule>

    <rule id="SPRAWIAC_WRAZENIE" name="sprawiać wrażenie + czas/rzecz -> rzecz">
        <pattern>
            <token inflected="yes" regexp="yes">sprawia?ć</token>
            <token>wrażenie</token>
            <marker>
            <and>
                <token postag=".*gen.*" postag_regexp="yes"/>
                <token postag_regexp="yes" postag="verb.*"/>
            </and>
            </marker>
        </pattern>
        <disambig action="filter" postag=".*gen.*"/>
        <example type="ambiguous" inputform="śmieci[śmiecie/subst:pl:gen:n2,śmiecić/verb:fin:sg:ter:imperf:nonrefl,śmieć/subst:pl:acc:m3,śmieć/subst:pl:gen:m2,śmieć/subst:pl:gen:m3,śmieć/subst:pl:nom:m3,śmieć/subst:pl:voc:m3]"
                 outputform="śmieci[śmiecie/subst:pl:gen:n2,śmieć/subst:pl:gen:m2,śmieć/subst:pl:gen:m3]">Cała ta banda sprawiała wrażenie <marker>śmieci</marker> podwórza.</example>
    </rule>

    <rule id="PELNI_GEN" name="pełni + genetiwus = rzeczownik">
        <pattern>
            <marker>
                <token skip="1">pełni<exception scope="previous">nie</exception></token>
            </marker>
            <token postag_regexp="yes" postag=".*gen.*"><exception postag=".*acc.*" postag_regexp="yes"/></token>
        </pattern>
        <disambig action="remove"><wd lemma="pełnić"/></disambig>
    </rule>

    <rule id="OSIEDLI" name="osiedli mieszkaniowych -> rzeczownik">
        <pattern>
            <unify>
                <feature id="case"/><feature id="number"/><feature id="gender"></feature>
                <token>osiedli</token>
                <token regexp="yes">mieszkaniowych|robotnicznych|ludzkich|żydowskich|arabskich|podmiejskich|zamkniętych|miejskich</token>
            </unify>
        </pattern>
        <disambig action="unify"/>
        <example type="untouched">Osiedli na laurach.</example>
        <example type="ambiguous" inputform="osiedli[osiedle/subst:pl:gen:n2,osiedlić/verb:fin:sg:ter:perf:nonrefl,osiedlić/verb:fin:sg:ter:perf:refl.nonrefl,osieść/verb:praet:pl:m1.p1:ter:perf:refl.nonrefl,osiąść/verb:praet:pl:m1.p1:ter:perf:refl.nonrefl]"
                 outputform="osiedli[osiedle/subst:pl:gen:n2]">Zachował się duży zespół <marker>osiedli</marker> mieszkaniowych.</example>
    </rule>

    <rule id="OSIEDLA" name="osiedla mieszkaniowe -> rzeczownik">
        <pattern>
            <unify>
                <feature id="case"/><feature id="number"/><feature id="gender"></feature>
                <token>osiedla</token>
                <token regexp="yes">mieszkaniowe|robotniczne|ludzkie|żydowskie|arabskie|podmiejskie|zamknięte|miejskie</token>
            </unify>
        </pattern>
        <disambig action="unify"/>
        <example type="untouched">Osiedli na laurach.</example>
        <example type="ambiguous" inputform="osiedla[osiedlać/verb:fin:sg:ter:imperf:refl.nonrefl,osiedle/subst:pl:acc:n2,osiedle/subst:pl:nom:n2,osiedle/subst:pl:voc:n2,osiedle/subst:sg:gen:n2]"
                 outputform="osiedla[osiedle/subst:pl:acc:n2,osiedle/subst:pl:nom:n2,osiedle/subst:pl:voc:n2]">Widzę <marker>osiedla</marker> mieszkaniowe.</example>
    </rule>

    <rule id="PODROZ_SUBST" name="podróż do... to rzeczownik">
        <pattern>
            <marker><token>podróż</token></marker>
            <token>do</token>
        </pattern>
        <disambig action="remove"><wd lemma="podrożyć"/></disambig>
    </rule>

    <rule id="MUZEUM_GOI" name="Muzeum Goi">
        <pattern>
            <token regexp="yes" inflected="yes">muzeum|obraz</token>
            <marker>
                <token>Goi</token>
            </marker>
        </pattern>
        <disambig action="remove"><wd lemma="goić"/></disambig>
    </rule>

    <rule id="mgnienie_oka" name="mgnienie oka">
        <pattern>
            <token inflected="yes">mgnienie</token>
            <marker><token>oka</token></marker>
        </pattern>
        <disambig postag="subst:sg:gen:n1"/>
    </rule>

    <rule id="na_stole" name="na stole">
        <pattern>
            <token postag="prep:loc">na</token>
            <token postag="subst:sg:loc:m3">stole</token>
        </pattern>
        <disambig action="filterall"/>
    </rule>

    <rule id="pewny_byc_gen" name="pewny + być + gen">
        <pattern>
            <token inflected="yes" postag="adj.*nom.*" postag_regexp="yes">pewny</token>
            <token inflected="yes">być</token>
            <token postag="(subst|adj).*gen.*" postag_regexp="yes"/>
        </pattern>
        <disambig action="filterall"/>
    </rule>

    <rule id="RADZI_BY_INF" name="radzi jako pred">
        <pattern>
            <marker>
            <token postag="adj:pl:nom:m1.p1:pos">radzi</token>
            <token skip="4" postag="qub">by</token>
            </marker>
            <token postag="verb:inf.*" postag_regexp="yes"></token>
        </pattern>
        <disambig action="filterall"></disambig>
    </rule>


    <rule id="PREPARE_NOM_ACC_F" name="przygotowanie szukanie orzeczenia dla r. żeńskiego">
        <pattern>
            <marker>
                <unify>
                    <feature id="case"/><feature id="number"/><feature id="gender"/>
                    <token postag="(pact|ppas|adj).*acc.*:f.*" postag_regexp="yes"><exception postag="conj"/><exception>jaką</exception></token>
                    <token postag="(subst|adj).*acc.*:f.*" postag_regexp="yes"><exception postag="verb.*" postag_regexp="yes"/></token>
                </unify>
            </marker>
        </pattern>
        <disambig action="unify"/>
        <example type="ambiguous" inputform="straż[straż/subst:sg:acc:f,straż/subst:sg:nom:f]" outputform="straż[straż/subst:sg:acc:f]">Trzeba było zrobić tak zwaną <marker>straż</marker> broni.</example>
    </rule>

    <rule name="plus jako spójnik" id="plus_conj_subst">
        <pattern>
            <unify>
                <feature id="case"><type id="acc"/><type id="inst"/><type id="gen"/><type id="dat"/><type id="loc"/><type id="nom"/></feature>
                <token postag="(?:subst|ger).*" postag_regexp="yes">
                    <exception negate_pos="yes" postag_regexp="yes" postag="(?:adj|depr|subst|ger).*"/>
                    <exception scope="previous" postag_regexp="yes" postag="(?:ger|subst).*"/>
                </token>
                <unify-ignore>
                    <marker><token>plus</token></marker>
                </unify-ignore>
                <token postag="(?:subst|ger).*" postag_regexp="yes">
                    <exception negate_pos="yes" postag_regexp="yes" postag="(?:adj|depr|subst|ger).*|SENT_END"/>
                    <exception regexp="yes">nic|co</exception>
                </token>
            </unify>
        </pattern>
        <disambig postag="conj"/>
        <example type="untouched">Na plus można zapisać autorowi, że nie unika trudnych pytań.</example>
        <example type="ambiguous" inputform="plus[plus/subst:sg:acc:m3,plus/subst:sg:nom:m2,plus/subst:sg:nom:m3]"
                 outputform="plus[plus/conj]">Jeśli krewetki <marker>plus</marker> grzanka są dla Was niewystarczające — przygotowane w ten sam sposób dodajemy do już usmażonych tzw. warzyw na patelnię.</example>
    </rule>

    <rule name="plus jako spójnik" id="plus_conj_adj_subst">
        <pattern>
            <unify>
                <feature id="case"><type id="acc"/><type id="inst"/><type id="gen"/><type id="dat"/><type id="loc"/><type id="nom"/></feature>
                <token postag="(?:subst|ger).*" postag_regexp="yes">
                    <exception negate_pos="yes" postag_regexp="yes" postag="(?:adj|depr|subst|ger).*"/>
                    <exception scope="previous" postag_regexp="yes" postag="(?:ger|subst).*"/>
                </token>
                <unify-ignore>
                    <marker><token>plus</token></marker>
                </unify-ignore>
                <token postag="(?:adj|pact|ppas).*" postag_regexp="yes"/>
                <token postag="(?:subst|ger).*" postag_regexp="yes">
                    <exception negate_pos="yes" postag_regexp="yes" postag="(?:adj|depr|subst|ger).*|SENT_END"/>
                    <exception regexp="yes">nic|co</exception>
                </token>
            </unify>
        </pattern>
        <disambig postag="conj"/>
        <example type="untouched">Na plus można zapisać autorowi, że nie unika trudnych pytań.</example>
        <example type="ambiguous" inputform="plus[plus/subst:sg:acc:m3,plus/subst:sg:nom:m2,plus/subst:sg:nom:m3]"
                 outputform="plus[plus/conj]">Jeśli krewetki <marker>plus</marker> przypieczona grzanka są dla Was niewystarczające — przygotowane w ten sam sposób dodajemy do już usmażonych tzw. warzyw na patelnię.</example>
    </rule>


    <rulegroup name="dopełnienia w dopełniaczu" id="potencjalne_dopelnienie_dopelniaczowe">
        <rule> <!-- SKŁADNIA NEGACJI: nie + musieć/móc +verb:inf + subst/nom|gen -->
        <pattern>
            <token>nie</token>
            <token regexp="yes" inflected="yes">móc|musieć|chcieć|woleć|umieć|potrafić</token>
            <token min="0" max="1" postag="qub|adv(?::pos)?" postag_regexp="yes"/>
            <token postag="verb:inf.*" postag_regexp="yes"><exception>jednaj</exception><exception inflected="yes" regexp="yes">&verb_non_transitive;</exception></token>
            <token min="0" max="1" postag="qub|adv(?::pos)?" postag_regexp="yes"/>
            <marker>
                <and>
                    <token postag="(?:ppron[1-3]|subst|adj):.*:(nom|gen).*" postag_regexp="yes"></token>
                    <token postag="(?:ppron[1-3]|subst|adj):.*:acc.*" postag_regexp="yes"><exception negate_pos="yes" postag_regexp="yes" postag="(?:subst|ger|depr|ppron|adj).*|SENT_END"/></token>
                </and>
            </marker>
        </pattern>
        <disambig action="filter" postag="(subst|ppron[1-3]|adj):.*:gen.*"></disambig>
        <example type="ambiguous" inputform="przekornego[przekorny/adj:sg:acc:m1.m2:pos,przekorny/adj:sg:gen:m1.m2.m3.n1.n2:pos]"
                 outputform="przekornego[przekorny/adj:sg:gen:m1.m2.m3.n1.n2:pos]">Tam nie musiał brać <marker>przekornego</marker> chłopaka.</example>
        </rule>
        <rule> <!-- SKŁADNIA NEGACJI: nie + być + w stanie +verb:inf + subst/nom|gen -->
            <pattern>
                <token>nie</token>
                <token inflected="yes">być</token>
                <token>w</token>
                <token>stanie</token>
                <token min="0" max="1" postag="qub|adv(?::pos)?" postag_regexp="yes"/>
                <token postag="verb:inf.*" postag_regexp="yes"><exception>jednaj</exception><exception inflected="yes" regexp="yes">&verb_non_transitive;</exception></token>
                <token min="0" max="1" postag="qub|adv(?::pos)?" postag_regexp="yes"/>
                <marker>
                    <and>
                        <token postag="(?:ppron[1-3]|subst|adj):.*:(nom|gen).*" postag_regexp="yes"></token>
                        <token postag="(?:ppron[1-3]|subst|adj):.*:acc.*" postag_regexp="yes"><exception negate_pos="yes" postag_regexp="yes" postag="(?:subst|ger|depr|ppron|adj).*|SENT_END"/></token>
                    </and>
                </marker>
            </pattern>
            <disambig action="filter" postag="(subst|ppron[1-3]|adj):.*:gen.*"></disambig>
            <example type="ambiguous" inputform="przekornego[przekorny/adj:sg:acc:m1.m2:pos,przekorny/adj:sg:gen:m1.m2.m3.n1.n2:pos]"
                     outputform="przekornego[przekorny/adj:sg:gen:m1.m2.m3.n1.n2:pos]">On nie był w stanie wziąć <marker>przekornego</marker> chłopaka.</example>
        </rule>
        <rule> <!-- SKŁADNIA NEGACJI: nie + należało +verb:inf + subst/nom|gen -->
            <pattern>
                <token>nie</token>
                <token regexp="yes">należy|należałoby|należało</token>
                <token min="0" max="1" postag="qub|adv(?::pos)?" postag_regexp="yes"/>
                <token postag="verb:inf.*" postag_regexp="yes"><exception>jednaj</exception><exception inflected="yes" regexp="yes">&verb_non_transitive;</exception></token>
                <token min="0" max="1" postag="qub|adv(?::pos)?" postag_regexp="yes"/>
                <marker>
                    <and>
                        <token postag="(?:ppron[1-3]|subst|adj):.*:(nom|gen).*" postag_regexp="yes"></token>
                        <token postag="(?:ppron[1-3]|subst|adj):.*:acc.*" postag_regexp="yes"><exception negate_pos="yes" postag_regexp="yes" postag="(?:subst|ger|depr|ppron|adj).*|SENT_END"/></token>
                    </and>
                </marker>
            </pattern>
            <disambig action="filter" postag="(subst|ppron[1-3]|adj):.*:gen.*"></disambig>
            <example type="ambiguous" inputform="przekornego[przekorny/adj:sg:acc:m1.m2:pos,przekorny/adj:sg:gen:m1.m2.m3.n1.n2:pos]"
                     outputform="przekornego[przekorny/adj:sg:gen:m1.m2.m3.n1.n2:pos]">Nie należy brać <marker>przekornego</marker> chłopaka.</example>
        </rule>

        <rule> <!-- SKŁADNIA NEGACJI: nie + było/ma + subst/nom|gen -->
            <pattern>
                <token>nie</token>
                <token regexp="yes">było|ma</token>
                <token min="0" max="1" postag="qub|adv:pos" postag_regexp="yes"/>
                <marker>
                    <and>
                        <token postag="(?:ppron[1-3]|subst|adj):.*:(nom|gen).*" postag_regexp="yes"></token>
                        <token postag="(?:ppron[1-3]|subst|adj):.*:acc.*" postag_regexp="yes"><exception negate_pos="yes" postag_regexp="yes" postag="(?:subst|ger|depr|ppron|adj).*|SENT_END"/></token>
                    </and>
                </marker>
            </pattern>
            <disambig action="filter" postag="(subst|ppron[1-3]|adj):.*:gen.*"></disambig>
            <example type="ambiguous" inputform="przekornego[przekorny/adj:sg:acc:m1.m2:pos,przekorny/adj:sg:gen:m1.m2.m3.n1.n2:pos]"
                     outputform="przekornego[przekorny/adj:sg:gen:m1.m2.m3.n1.n2:pos]">Tam nie było <marker>przekornego</marker> chłopaka.</example>
            <example type="ambiguous" inputform="imprezy[impreza/subst:pl:acc:f,impreza/subst:pl:nom:f,impreza/subst:pl:voc:f,impreza/subst:sg:gen:f]"
                     outputform="imprezy[impreza/subst:sg:gen:f]">Nie ma praktycznie <marker>imprezy</marker>, z której Polacy wracaliby bez medalu.</example>

        </rule>
        <rule> <!-- SKŁADNIA NEGACJI: subst/nom|gen + nie + było/ma (szyk przestawny) -->
            <pattern>
                <marker>
                    <and>
                        <token postag="(?:ppron[1-3]|subst|adj):.*:(nom|gen).*" postag_regexp="yes"></token>
                        <token postag="(?:ppron[1-3]|subst|adj):.*:acc.*" postag_regexp="yes"><exception negate_pos="yes" postag_regexp="yes" postag="(?:subst|ger|depr|ppron|adj).*|SENT_END"/></token>
                    </and>
                </marker>
                <token>nie</token>
                <token regexp="yes">było|ma</token>
            </pattern>
            <disambig action="filter" postag="(subst|ppron[1-3]|adj):.*:gen.*"></disambig>
            <example type="ambiguous" inputform="chłopaka[chłopak/subst:sg:acc:m1,chłopak/subst:sg:gen:m1]"
                     outputform="chłopaka[chłopak/subst:sg:gen:m1]">A przekornego <marker>chłopaka</marker> nie było.</example>
        </rule>
        <rule id="GEN_NIE_MA_BYLO" name='Dopełniacz przed nie ma / nie było'>
            <pattern>
                <marker>
                    <token postag=".*gen.*" postag_regexp="yes"/>
                    <token postag="qub">nie</token>
                    <token postag_regexp="yes" postag="verb.*" regexp="yes">ma(?:ją)?|było</token>
                </marker>
            </pattern>
            <disambig action="filterall"/>
            <example type="ambiguous" inputform="Broni[Bronia/subst:pl:gen:f,Bronia/subst:sg:dat:f,Bronia/subst:sg:gen:f,Bronia/subst:sg:loc:f,broń/subst:pl:gen:f,broń/subst:sg:dat:f,broń/subst:sg:gen:f,broń/subst:sg:loc:f,broń/subst:sg:voc:f]"
                     outputform="Broni[Bronia/subst:pl:gen:f,Bronia/subst:sg:gen:f,broń/subst:pl:gen:f,broń/subst:sg:gen:f]"><marker>Broni</marker> nie było.</example>
        </rule>
        <rule> <!-- SKŁADNIA NEGACJI: nie + imps + subst acc|gen -->
            <pattern>
                <token>nie</token>
                <token postag="verb:imps.*|pant.*|pcon.*" postag_regexp="yes"><exception>jednaj</exception><exception inflected="yes" regexp="yes">&verb_non_transitive;</exception></token>
                <marker>
                    <and>
                        <token postag="(?:ppron[1-3]|subst|adj):.*:gen.*" postag_regexp="yes"></token>
                        <token postag="(?:ppron[1-3]|subst|adj):.*:gen.*" negate_pos="yes" postag_regexp="yes"><exception negate_pos="yes" postag_regexp="yes" postag="(?:subst|ger|depr|ppron|adj).*|SENT_END"/></token>
                    </and>
                </marker>
            </pattern>
            <disambig action="filter" postag="(subst|ppron[1-3]|adj):.*:gen.*"></disambig>
            <example type="ambiguous" inputform="przekornego[przekorny/adj:sg:acc:m1.m2:pos,przekorny/adj:sg:gen:m1.m2.m3.n1.n2:pos]"
                     outputform="przekornego[przekorny/adj:sg:gen:m1.m2.m3.n1.n2:pos]">Nie wybrano <marker>przekornego</marker> chłopaka.</example>
        </rule>
        <rule> <!-- czasowniki wymagające dopełniacza -->
            <pattern>
                <token postag="verb:i(?:mps|nf).*|pant.*|pcon.*" postag_regexp="yes" regexp="yes" inflected="yes">&verb_obj_gen;<exception inflected="yes" regexp="yes">&verb_non_transitive;</exception></token>
                <marker>
                    <and>
                        <token postag="(?:ppron[1-3]|subst|adj):.*:gen.*" postag_regexp="yes"></token>
                        <token postag="(?:ppron[1-3]|subst|adj):.*:gen.*" negate_pos="yes" postag_regexp="yes"><exception negate_pos="yes" postag_regexp="yes" postag="(?:subst|ger|depr|ppron|adj).*|SENT_END"/></token>
                    </and>
                </marker>
            </pattern>
            <disambig action="filter" postag="(subst|ppron[1-3]|adj):.*:gen.*"></disambig>
            <example type="ambiguous" inputform="przekornego[przekorny/adj:sg:acc:m1.m2:pos,przekorny/adj:sg:gen:m1.m2.m3.n1.n2:pos]"
                     outputform="przekornego[przekorny/adj:sg:gen:m1.m2.m3.n1.n2:pos]">Poszukiwano <marker>przekornego</marker> chłopaka.</example>
        </rule>
        <rule>  <!-- składnia negacji ze zwykłym czasownikiem pri /sec -->
            <pattern>
                <token regexp="yes">nie|niewiele</token>
                <token postag="verb:.*(pri|sec).*" postag_regexp="yes"><exception>jednaj</exception><exception inflected="yes" regexp="yes">&verb_non_transitive;</exception><exception regexp="yes">bądź|lub</exception>
            </token>
            <marker>
                <and>
                    <token postag="(?:ppron[1-3]|subst|adj):.*:acc.*" postag_regexp="yes"><exception negate_pos="yes" postag_regexp="yes" postag="(?:subst|ger|depr|ppron|adj).*|SENT_END"/></token>
                    <token postag="(?:ppron[1-3]|subst|adj):.*:gen.*" postag_regexp="yes"><exception postag_regexp="yes" postag="ppron[1-3].*nom.*:akc.*"/></token>
                </and>
            </marker>
        </pattern>
        <disambig action="filter" postag="(subst|ppron[1-3]|adj):.*:gen.*"></disambig>
            <example type="ambiguous" inputform="kobiety[kobieta/subst:pl:acc:f,kobieta/subst:pl:nom:f,kobieta/subst:pl:voc:f,kobieta/subst:sg:gen:f]" outputform="kobiety[kobieta/subst:sg:gen:f]">Słowo honoru daję, że nie znam <marker>kobiety</marker>, która by na mnie tak piekielne robiła wrażenie…</example>
            <example type="ambiguous" inputform="dań[danie/subst:pl:gen:n2,dań/subst:sg:acc:f,dań/subst:sg:nom:f]"
                     outputform="dań[danie/subst:pl:gen:n2]">Ostatnio niewiele gotuję <marker>dań</marker>, które warto tu prezentować.</example>
        </rule>
        <rule> <!-- verb:praet:pl + subst:sg, lecz inny rodzaj-->
            <pattern>
                <unify negate="yes"><feature id="gender"/>
                    <token postag="verb:(praet|pot):pl.*:ter.*" postag_regexp="yes" inflected="yes" regexp="yes">&verb_obj_gen;</token>
                    <marker>
                        <and>
                            <token postag="(?:ppron[1-3]|subst|adj|pact):.*(nom|acc).*" postag_regexp="yes"><exception negate_pos="yes" postag_regexp="yes" postag="(?:subst|ger|depr|ppron|adj|pact).*|SENT_END"/></token>
                            <token postag="(?:ppron[1-3]|subst|adj|pact):sg:gen.*" postag_regexp="yes"></token>
                        </and>
                    </marker>
                </unify>
            </pattern>
            <disambig action="filter" postag="(?:ppron[1-3]|subst|adj):.*:gen.*"></disambig>
            <example type="ambiguous" inputform="kazania[kazanie/subst:pl:acc:n2,kazanie/subst:pl:nom:n2,kazanie/subst:pl:voc:n2,kazanie/subst:sg:gen:n2,kazać/ger:sg:gen:n2:imperf.perf:aff:nonrefl]"
                     outputform="kazania[kazanie/subst:sg:gen:n2]">Oni wysłuchali <marker>kazania</marker>.</example>
        </rule><rule> <!-- verb:praet:pl + subst:sg, lecz inny rodzaj-->
        <pattern>
            <unify negate="yes"><feature id="gender"/>
                <token postag="verb:(praet|pot):pl.*:ter.*" postag_regexp="yes" inflected="yes" regexp="yes">&verb_obj_gen;</token>
                <marker>
                    <token postag="(?:adj|pact|ppas):sg:gen.*" postag_regexp="yes"/>
                    <and>
                        <token postag="(?:ppron[1-3]|subst|adj|pact):sg:gen.*" postag_regexp="yes"/>
                        <token postag="(?:ppron[1-3]|subst|adj|pact):.*(nom|acc).*" postag_regexp="yes"><exception negate_pos="yes" postag_regexp="yes" postag="(?:subst|ger|depr|ppron|adj|pact).*|SENT_END"/></token>
                    </and>
                </marker>
            </unify>
        </pattern>
        <disambig action="filterall" />
        <example type="ambiguous" inputform="kazania[kazanie/subst:pl:acc:n2,kazanie/subst:pl:nom:n2,kazanie/subst:pl:voc:n2,kazanie/subst:sg:gen:n2,kazać/ger:sg:gen:n2:imperf.perf:aff:nonrefl]"
                 outputform="kazania[kazanie/subst:sg:gen:n2]">Oni wysłuchali wzruszającego <marker>kazania</marker>.</example>
    </rule>
    </rulegroup>

    <rule id="INF_INF_SUBST" name="urządzić/puścić + (inf/subst) > subst">
        <pattern>
            <token regexp="yes">urządzić|puścić|dojrzeć|wyrestaurować|stworzyć|wykopać</token>
            <marker>
            <and>
                <token postag_regexp="yes" postag="verb:inf.*"/>
                <token postag_regexp="yes" postag="subst.*"/>
            </and>
            </marker>
        </pattern>
        <disambig action="filter" postag="subst.*"/>
        <example type="ambiguous" inputform="wieść[wieścić/verb:impt:sg:sec:imperf:refl.nonrefl,wieść/subst:sg:acc:f,wieść/subst:sg:nom:f,wieść/verb:inf:imperf:refl.nonrefl]"
        outputform="wieść[wieść/subst:sg:acc:f,wieść/subst:sg:nom:f]">— A gdyby puścić <marker>wieść</marker>, że to Watyniusz kazał podpalić miasto?</example>
    </rule>

    <rule id="to_conj_2" name="że jak... to">
        <pattern>
            <token>że</token>
            <token skip="-1">jak</token>
            <token>,</token>
            <marker>
                <token postag="conj">to</token>
            </marker>
        </pattern>
        <disambig postag="conj"/>
        <example type="ambiguous" inputform="to[ten/adj:sg:acc:n1.n2:pos,ten/adj:sg:nom.voc:n1.n2:pos,to/conj,to/qub,to/subst:sg:acc:n2,to/subst:sg:nom:n2]" outputform="to[to/conj]">Kiedy byłem mały, babcia straszyła mnie, że jak będę kłamać, <marker>to</marker> mi się buzia wykrzywi.</example>
    </rule>

    <rule id="to_conj_3" name="chociaż/choć, ... to">
        <pattern>
            <token skip="-1" regexp="yes">choć|chociaż|gdy.*|kiedy.*|skoro.*|co|ponieważ</token>
            <token>,</token>
            <marker>
                <token postag="conj">to</token>
            </marker>
        </pattern>
        <disambig postag="conj"/>
        <example type="ambiguous" inputform="to[ten/adj:sg:acc:n1.n2:pos,ten/adj:sg:nom.voc:n1.n2:pos,to/conj,to/qub,to/subst:sg:acc:n2,to/subst:sg:nom:n2]" outputform="to[to/conj]">Chociaż nie będę kłamać, <marker>to</marker> mi się buzia wykrzywi.</example>
    </rule>

    <rule id="raz" name="raz to acc przed czasownikiem">
        <pattern>
            <marker>
            <token skip="-1">raz
                <exception postag='verb.*sg.*|ppron\d+:pl:.*|conj|comp.*|interp.*|subst:pl:nom.*' postag_regexp='yes' scope='next'/>
            </token>
            </marker>
            <token postag='verb:fin:pl:ter.*' postag_regexp='yes'/>
        </pattern>
        <disambig postag="subst:sg:acc:m3"/>
    </rule>

    <rule id="raz_za_razem" name="raz to acc przed za razem">
        <pattern>
            <marker>
                <token skip="-1">raz
                    <exception postag='verb.*sg.*|ppron\d+:pl:.*|conj|comp.*|interp.*|subst:pl:nom.*' postag_regexp='yes' scope='next'/>
                </token>
            </marker>
            <token>za</token>
            <token>razem</token>
        </pattern>
        <disambig postag="subst:sg:acc:m3"/>
    </rule>


    <rulegroup name="podmiot mnogi z zaimkiem osobowym w dopełniaczu" id="verbpl_ppron_gen_subst">
        <rule> <!-- fin -->
            <pattern>
                <marker>
                <token postag="verb:fin:pl:ter.*" postag_regexp="yes" />
                <token postag="ppron3:.*gen.*npraep" postag_regexp="yes"/>
                <token postag="subst:pl:nom.*" postag_regexp="yes"/>
                </marker>
            </pattern>
            <disambig action="filterall"></disambig>
        </rule>
        <rule> <!-- praet -->
            <pattern>
                <marker>
                    <unify><feature id="gender"/><feature id="number"/>
                    <token postag="verb:praet:.*:ter.*" postag_regexp="yes" />
                        <unify-ignore>
                            <token postag="ppron3:.*gen.*npraep" postag_regexp="yes"/>
                        </unify-ignore>
                    <token postag="subst:.*:nom.*" postag_regexp="yes"/>
                    </unify>
                </marker>
            </pattern>
            <disambig action="filterall"></disambig>
        </rule>
    </rulegroup>

    <rulegroup name="podmiot po bezokoliczniku z czasownikiem modalnym"
               id="modalny_inf_substpl">
        <rule>
            <pattern>
                <token regexp="yes" inflected="yes" postag="verb.*pl.*" postag_regexp="yes">móc|musieć|woleć|chcieć
                    <exception postag="ppron3:pl:nom.*|subst:pl:nom.*" postag_regexp="yes" scope="previous"/>
                </token>
                <token postag="verb:.*inf.*" postag_regexp="yes">
                        <exception regexp="yes" inflected="yes">&verb_obj_gen;</exception>
                </token>
                <token postag="subst:pl:nom.*" postag_regexp="yes"/>
            </pattern>
            <disambig action="filterall"/>
        </rule>
        <rule>
            <pattern>
                <token regexp="yes" inflected="yes" postag="verb.*pl.*" postag_regexp="yes">móc|musieć|woleć|chcieć
                    <exception postag="ppron3:pl:nom.*|subst:pl:nom.*" postag_regexp="yes" scope="previous"/>
                </token>
                <token postag="adv.*|qub|ppron.*(dat|loc|inst).*" postag_regexp="yes"/>
                <token postag="verb:.*inf.*" postag_regexp="yes">
                    <exception regexp="yes" inflected="yes">&verb_obj_gen;</exception>
                </token>
                <token postag="subst:pl:nom.*" postag_regexp="yes"/>
            </pattern>
            <disambig action="filterall"/>
        </rule>
    </rulegroup>

    <rulegroup name="dopełnienia w bierniku" id="potencjalne_dopelnienie">
        <rule> <!-- 1 verb: pl + subst: sg -->
            <pattern>
                <token postag="verb:.*:pl.*" postag_regexp="yes"><exception inflected="yes" regexp="yes">&verb_obj_gen;|&verb_non_transitive;</exception></token>
                <marker>
                    <and>
                        <token postag="(?:ppron[1-3]|subst):sg:acc.*" postag_regexp="yes"><exception negate_pos="yes" postag_regexp="yes" postag="(?:subst|ger|depr|ppron).*|SENT_END"/>
                            <exception postag="(?:ppron[1-3]|subst):pl:nom.*" postag_regexp="yes"/>
                        </token>
                        <token postag="(?:ppron[1-3]|subst):sg:(nom|gen).*" postag_regexp="yes"></token>
                    </and>
                </marker>
            </pattern>
            <disambig action="filter" postag="(subst|ppron[1-3]):sg:acc.*"></disambig>
            <example type="ambiguous" inputform="ślub[ślub/subst:sg:acc:m3,ślub/subst:sg:nom:m3]"
                     outputform="ślub[ślub/subst:sg:acc:m3]">Anna z Janem wzięli <marker>ślub</marker>.</example>
            <example type="untouched">Byt określa świadomość.</example>
            <example type="ambiguous" inputform="go[on/ppron3:sg:acc:m1.m2.m3:ter:nakc:npraep,on/ppron3:sg:gen:m1.m2.m3:ter:nakc:npraep,on/ppron3:sg:gen:n1.n2:ter:nakc:npraep]"
                     outputform="go[on/ppron3:sg:acc:m1.m2.m3:ter:nakc:npraep]">Bierzcie <marker>go</marker>!</example>
            <example type="untouched">To właśnie mówili posłowie.</example>
        </rule>
        <rule> <!-- 2 subst: sg + verb: pl -->
            <pattern>
                <marker>
                    <and>
                        <token postag="(?:ppron[1-3]|subst):sg:acc.*" postag_regexp="yes"><exception negate_pos="yes" postag_regexp="yes" postag="(?:subst|ger|depr|ppron|verb:impt|num:pl).*|pred|interj|qub|comp|conj|adj.*"/></token>
                        <token postag="(?:ppron[1-3]|subst):sg:(nom|gen).*" postag_regexp="yes"></token>
                    </and>
                </marker>
                <token postag="verb:.*:pl.*" postag_regexp="yes"><exception inflected="yes" regexp="yes">&verb_obj_gen;|&verb_non_transitive;</exception></token>
            </pattern>
            <disambig action="filter" postag="(subst|ppron[1-3]|adj):sg:acc.*"></disambig>
            <example type="ambiguous" inputform="ślub[ślub/subst:sg:acc:m3,ślub/subst:sg:nom:m3]"
                     outputform="ślub[ślub/subst:sg:acc:m3]">Anna z Janem <marker>ślub</marker> wzięli.</example>
            <example type="untouched">Byt określa świadomość.</example>
            <example type="ambiguous" inputform="go[on/ppron3:sg:acc:m1.m2.m3:ter:nakc:npraep,on/ppron3:sg:gen:m1.m2.m3:ter:nakc:npraep,on/ppron3:sg:gen:n1.n2:ter:nakc:npraep]"
                     outputform="go[on/ppron3:sg:acc:m1.m2.m3:ter:nakc:npraep]">Teraz <marker>go</marker> wybierzecie!</example>
            <example type="ambiguous" inputform="to[ten/adj:sg:acc:n1.n2:pos,ten/adj:sg:nom.voc:n1.n2:pos,to/conj,to/qub,to/subst:sg:acc:n2,to/subst:sg:nom:n2]"
                     outputform="to[ten/adj:sg:acc:n1.n2:pos,to/subst:sg:acc:n2]">Winiarze też <marker>to</marker> rozumieją.</example>
        </rule>
        <rule> <!-- 3 subst: sg:acc + subst:gen + verb: pl -->
            <pattern>
                <marker>
                    <and>
                        <token postag="subst:sg:acc.*" postag_regexp="yes"><exception negate_pos="yes" postag_regexp="yes" postag="(?:subst|ger|depr).*|qub|comp|conj|adj.*"/></token>
                        <token postag="(subst|ger):sg:(nom|gen).*" postag_regexp="yes"/>
                    </and>
                </marker>
                <token postag="subst.*gen.*" postag_regexp="yes">
                        <!-- exception postag="subst:pl:nom.*" postag_regexp="yes"/ -->
                </token>
                <token postag="verb:.*:pl.*" postag_regexp="yes"><exception inflected="yes" regexp="yes">&verb_obj_gen;|&verb_non_transitive;</exception></token>
            </pattern>
            <disambig action="filter" postag="(subst|ppron[1-3]|adj):sg:acc.*"></disambig>
            <example type="ambiguous" inputform="ślub[ślub/subst:sg:acc:m3,ślub/subst:sg:nom:m3]"
                     outputform="ślub[ślub/subst:sg:acc:m3]">Anna z Janem <marker>ślub</marker> czystości wzięli.</example>
            <example type="untouched">Byt określa świadomość.</example>
        </rule>
        <rule> <!-- 4 subst: sg:acc + coś/nic + adj:gen + verb: pl -->
            <pattern>
                <marker>
                    <token regexp="yes">coś|nic</token>
                </marker>
                <token min="0" max="1" regexp="yes">też|wi[ęe]c|zatem|mniej|bardziej|jednak</token>
                <token postag="adj:sg:gen:m1.m2.m3.n1.n2:.*" postag_regexp="yes"/>
                <token postag="verb:.*:pl.*" postag_regexp="yes"><exception inflected="yes" regexp="yes">&verb_obj_gen;|&verb_non_transitive;</exception></token>
            </pattern>
            <disambig action="filter" postag="subst:sg:acc.*"></disambig>
            <example type="ambiguous" inputform="coś[coś/subst:sg:acc:n2,coś/subst:sg:nom:n2]"
                     outputform="coś[coś/subst:sg:acc:n2]">Oni <marker>coś</marker> innego mieli na myśli.</example>
            <example type="untouched">Byt określa świadomość.</example>
        </rule>
        <rule> <!-- 5 subst: sg:acc + (prep + subst) + verb: pl -->
            <pattern>
                <marker>
                    <and>
                        <token postag="subst:sg:acc.*" postag_regexp="yes"><exception negate_pos="yes" postag_regexp="yes" postag="(?:subst|ger|depr).*|qub|pred|comp|conj|adj.*"/></token>
                        <token postag="(subst|ger):sg:(nom|gen).*" postag_regexp="yes"/>
                    </and>
                </marker>
                <unify><feature id="case"/>
                    <token postag="prep.*" postag_regexp="yes"/>
                    <token postag="(ger|subst|ppron).*" postag_regexp="yes"/>
                </unify>
                <token postag="verb:.*:pl.*" postag_regexp="yes"><exception inflected="yes" regexp="yes">&verb_obj_gen;|&verb_non_transitive;</exception></token>
            </pattern>
            <disambig action="filter" postag="(subst|ppron[1-3]|adj):sg:acc.*"></disambig>
            <example type="ambiguous" inputform="ślub[ślub/subst:sg:acc:m3,ślub/subst:sg:nom:m3]"
                     outputform="ślub[ślub/subst:sg:acc:m3]">Anna z Janem <marker>ślub</marker> do serca wzięli.</example>
            <example type="untouched">Byt określa świadomość.</example>
        </rule>
        <rule> <!-- 6 subst: sg + adv + verb: pl -->
            <pattern>
                <marker>
                    <and>
                        <token postag="(?:ppron[1-3]|subst):sg:acc.*" postag_regexp="yes"><exception negate_pos="yes" postag_regexp="yes" postag="(?:subst|ger|depr|ppron).*|qub|comp|conj|adj.*"/></token>
                        <token postag="(?:ppron[1-3]|subst):sg:(nom|gen).*" postag_regexp="yes"></token>
                    </and>
                </marker>
                <token postag="adv.*|ppron.*(dat|loc|inst).*|qub" postag_regexp="yes"/>
                <token postag="verb:.*:pl.*" postag_regexp="yes"><exception inflected="yes" regexp="yes">&verb_obj_gen;|&verb_non_transitive;</exception></token>
            </pattern>
            <disambig action="filter" postag="(subst|ppron[1-3]):sg:acc.*"></disambig>
            <example type="ambiguous" inputform="ślub[ślub/subst:sg:acc:m3,ślub/subst:sg:nom:m3]"
                     outputform="ślub[ślub/subst:sg:acc:m3]">Anna z Janem <marker>ślub</marker> pewnie wzięli.</example>
            <example type="untouched">Byt określa świadomość.</example>
            <example type="ambiguous" inputform="go[on/ppron3:sg:acc:m1.m2.m3:ter:nakc:npraep,on/ppron3:sg:gen:m1.m2.m3:ter:nakc:npraep,on/ppron3:sg:gen:n1.n2:ter:nakc:npraep]"
                     outputform="go[on/ppron3:sg:acc:m1.m2.m3:ter:nakc:npraep]">Teraz <marker>go</marker> śmiało wybierzecie!</example>
            <example type="ambiguous" inputform="to[ten/adj:sg:acc:n1.n2:pos,ten/adj:sg:nom.voc:n1.n2:pos,to/conj,to/qub,to/subst:sg:acc:n2,to/subst:sg:nom:n2]"
                     outputform="to[to/subst:sg:acc:n2]">Winiarze też <marker>to</marker> dobrze rozumieją.</example>
        </rule>
        <rule> <!-- 7 subst: sg + czasownik modalny :pl + verb: inf -->
            <pattern>
                <marker>
                    <and>
                        <token postag="(?:ppron[1-3]|subst):sg:acc.*" postag_regexp="yes"><exception negate_pos="yes" postag_regexp="yes" postag="(?:subst|ger|depr|ppron).*|qub|comp|conj|adj.*"/></token>
                        <token postag="(?:ppron[1-3]|subst):sg:(nom|gen).*" postag_regexp="yes"></token>
                    </and>
                </marker>
                <token regexp="yes" inflected="yes" postag="verb.*pl.*" postag_regexp="yes">móc|musieć|woleć|chcieć</token>
                <token postag="verb:.*inf.*" postag_regexp="yes"><exception inflected="yes" regexp="yes">&verb_obj_gen;|&verb_non_transitive;</exception></token>
            </pattern>
            <disambig action="filter" postag="(subst|ppron[1-3]):sg:acc.*"></disambig>
            <example type="ambiguous" inputform="ślub[ślub/subst:sg:acc:m3,ślub/subst:sg:nom:m3]"
                     outputform="ślub[ślub/subst:sg:acc:m3]">Anna z Janem <marker>ślub</marker> woleli wziąć.</example>
            <example type="untouched">Byt określa świadomość.</example>
            <example type="ambiguous" inputform="go[on/ppron3:sg:acc:m1.m2.m3:ter:nakc:npraep,on/ppron3:sg:gen:m1.m2.m3:ter:nakc:npraep,on/ppron3:sg:gen:n1.n2:ter:nakc:npraep]"
                     outputform="go[on/ppron3:sg:acc:m1.m2.m3:ter:nakc:npraep]">Teraz <marker>go</marker> musicie wybrać!</example>
            <example type="ambiguous" inputform="to[ten/adj:sg:acc:n1.n2:pos,ten/adj:sg:nom.voc:n1.n2:pos,to/conj,to/qub,to/subst:sg:acc:n2,to/subst:sg:nom:n2]"
                     outputform="to[to/subst:sg:acc:n2]">Winiarze też <marker>to</marker> muszą zrozumieć.</example>
        </rule>
        <rule> <!-- 8 subst: sg + czasownik modalny :pl + verb: inf -->
            <pattern>
                <marker>
                    <unify><feature id="gender"/><feature id="number"/>
                        <feature id="case"><type id="acc"/></feature>
                    <and>
                        <token postag="subst:sg:acc.*" postag_regexp="yes"><exception negate_pos="yes" postag_regexp="yes" postag="(?:subst|ger|depr|ppron).*|qub|comp|conj|adj.*"/></token>
                        <token postag="subst:sg:(nom|gen).*" postag_regexp="yes"></token>
                    </and>
                        <token postag="(adj|pact|ppas).*" postag_regexp="yes"></token>
                    </unify>
                </marker>
                <token regexp="yes" inflected="yes" postag="verb.*pl.*" postag_regexp="yes">móc|musieć|woleć|chcieć</token>
                <token postag="verb:.*inf.*" postag_regexp="yes"><exception inflected="yes" regexp="yes">&verb_obj_gen;|&verb_non_transitive;</exception></token>
            </pattern>
            <disambig action="filter" postag="(subst|adj):sg:acc.*"></disambig>
            <example type="ambiguous" inputform="ślub[ślub/subst:sg:acc:m3,ślub/subst:sg:nom:m3]"
                     outputform="ślub[ślub/subst:sg:acc:m3]">Anna z Janem <marker>ślub</marker> cywilny woleli wziąć.</example>
            <example type="untouched">Byt określa świadomość.</example>
        </rule>
        <rule> <!-- 9 subst: sg + adj / subst: gen + czasownik modalny :pl + verb: inf -->
            <pattern>
                <marker>
                    <and>
                        <token postag="subst:sg:acc.*" postag_regexp="yes"><exception negate_pos="yes" postag_regexp="yes" postag="(?:subst|ger|depr).*|qub|comp|conj|adj.*"/></token>
                        <token postag="(?:ppron[1-3]|subst):sg:(nom|gen).*" postag_regexp="yes"></token>
                    </and>
                </marker>
                <unify>
                    <feature id="case"><type id='gen'/></feature>
                    <feature id="number"/><feature id="gender"/>
                    <token postag="(ppas|pact|adj).*" postag_regexp="yes"/>
                    <token postag="(subst|ger).*" postag_regexp="yes"/>
                </unify>
                <token regexp="yes" inflected="yes" postag="verb.*pl.*" postag_regexp="yes">móc|musieć|woleć|chcieć</token>
                <token postag="verb:.*inf.*" postag_regexp="yes"><exception inflected="yes" regexp="yes">&verb_obj_gen;|&verb_non_transitive;</exception></token>
            </pattern>
            <disambig action="filter" postag="(subst|ppron[1-3]):sg:acc.*"></disambig>
            <example type="ambiguous" inputform="Większość[większość/subst:sg:acc:f,większość/subst:sg:nom:f]"
                     outputform="Większość[większość/subst:sg:acc:f]"><marker>Większość</marker> zawieranych transakcji muszą poprzedzać przetargi.</example>
            <example type="untouched">Byt określa świadomość.</example>
        </rule>
        <rule> <!-- 10 subst: sg + czasownik modalny :pl + kublik/przysłówek + verb: inf -->
            <pattern>
                <marker>
                    <and>
                        <token postag="(?:ppron[1-3]|subst):sg:acc.*" postag_regexp="yes"><exception negate_pos="yes" postag_regexp="yes" postag="(?:subst|ger|depr|ppron).*|qub|comp|conj|adj.*"/></token>
                        <token postag="(?:ppron[1-3]|subst):sg:(nom|gen).*" postag_regexp="yes"></token>
                    </and>
                </marker>
                <token regexp="yes" inflected="yes" postag="verb.*pl.*" postag_regexp="yes">móc|musieć|woleć|chcieć</token>
                <token postag="adv.*|qub|ppron.*(dat|loc|inst).*" postag_regexp="yes"/>
                <token postag="verb:.*inf.*" postag_regexp="yes"><exception inflected="yes" regexp="yes">&verb_obj_gen;|&verb_non_transitive;</exception></token>
            </pattern>
            <disambig action="filter" postag="(subst|ppron[1-3]):sg:acc.*"></disambig>
            <example type="ambiguous" inputform="ślub[ślub/subst:sg:acc:m3,ślub/subst:sg:nom:m3]"
                     outputform="ślub[ślub/subst:sg:acc:m3]">Anna z Janem <marker>ślub</marker> woleli już wziąć.</example>
            <example type="untouched">Byt określa świadomość.</example>
            <example type="ambiguous" inputform="go[on/ppron3:sg:acc:m1.m2.m3:ter:nakc:npraep,on/ppron3:sg:gen:m1.m2.m3:ter:nakc:npraep,on/ppron3:sg:gen:n1.n2:ter:nakc:npraep]"
                     outputform="go[on/ppron3:sg:acc:m1.m2.m3:ter:nakc:npraep]">Teraz <marker>go</marker> musicie wreszcie wybrać!</example>
            <example type="ambiguous" inputform="to[ten/adj:sg:acc:n1.n2:pos,ten/adj:sg:nom.voc:n1.n2:pos,to/conj,to/qub,to/subst:sg:acc:n2,to/subst:sg:nom:n2]"
                     outputform="to[to/subst:sg:acc:n2]">Winiarze też <marker>to</marker> muszą nareszcie zrozumieć.</example>
        </rule>
        <rule> <!-- 11 subst: sg + adj: sg + verb: pl -->
            <pattern>
                <marker>
                    <unify><feature id="number"><type id="sg"/></feature>
                        <feature id="gender"/>
                    <and>
                        <token postag="(subst|ger):sg:acc.*" postag_regexp="yes"><exception negate_pos="yes" postag_regexp="yes" postag="(?:subst|ger|depr|ppron).*|qub|comp|conj|adj.*|verb:impt.*|pred"/></token>
                        <token postag="(subst|ger):sg:(nom|gen).*" postag_regexp="yes"></token>
                    </and>
                        <token postag="adj:sg:acc.*" postag_regexp="yes">
                            <exception postag="subst:pl:nom.*" postag_regexp="yes"/>
                                </token>
                    </unify>
                </marker>
                <token postag="verb:.*:pl.*" postag_regexp="yes"><exception inflected="yes" regexp="yes">&verb_obj_gen;|&verb_non_transitive;</exception></token>
            </pattern>
            <disambig action="unify"></disambig>
            <example type="ambiguous" inputform="ślub[ślub/subst:sg:acc:m3,ślub/subst:sg:nom:m3]"
                     outputform="ślub[ślub/subst:sg:acc:m3]">Anna z Janem <marker>ślub</marker> cywilny wzięli.</example>
            <example type="untouched">Byt określa świadomość.</example>
            <example type="ambiguous" inputform="sposób[sposobić/verb:impt:sg:sec:imperf:refl.nonrefl,sposób/pred,sposób/subst:sg:acc:m3,sposób/subst:sg:nom:m3]"
                     outputform="sposób[sposób/subst:sg:acc:m3]">Bo <marker>sposób</marker> ten znają wszyscy zaawansowani użytkownicy.</example>
        </rule>
        <rule> <!-- 12 subst: sg + ppron: pl: + verb: pl -->
            <pattern>
                <marker>
                    <and>
                        <token postag="(?:ppron[1-3]|subst):sg:acc.*" postag_regexp="yes"><exception negate_pos="yes" postag_regexp="yes" postag="(?:subst|ger|depr|ppron).*|qub|comp"/></token>
                        <token postag="(?:ppron[1-3]|subst):sg:(nom|gen).*" postag_regexp="yes"></token>
                    </and>
                </marker>
                <token postag="ppron\d+:pl:nom.*" postag_regexp="yes"/>
                <token postag="verb:.*:pl.*" postag_regexp="yes"><exception inflected="yes" regexp="yes">&verb_obj_gen;|&verb_non_transitive;</exception></token>
            </pattern>
            <disambig action="filter" postag="(subst|ppron[1-3]):sg:acc.*"></disambig>
            <example type="ambiguous" inputform="ślub[ślub/subst:sg:acc:m3,ślub/subst:sg:nom:m3]"
                     outputform="ślub[ślub/subst:sg:acc:m3]">Wczoraj <marker>ślub</marker> oni wzięli.</example>
            <example type="untouched">Byt określa świadomość.</example>
            <example type="ambiguous" inputform="go[on/ppron3:sg:acc:m1.m2.m3:ter:nakc:npraep,on/ppron3:sg:gen:m1.m2.m3:ter:nakc:npraep,on/ppron3:sg:gen:n1.n2:ter:nakc:npraep]"
                     outputform="go[on/ppron3:sg:acc:m1.m2.m3:ter:nakc:npraep]">Teraz <marker>go</marker> wy wybierzecie!</example>
        </rule>
        <rule> <!-- 13 z przeskokiem: subst: sg + verb: pl -->
        <pattern>
            <marker>
                <and>
                    <token skip="-1" postag="(?:ppron[1-3]|subst):sg:acc.*" postag_regexp="yes">
                        <exception negate_pos="yes" postag_regexp="yes" postag="(?:subst|ger|depr|ppron|verb:impt|num:pl).*|pred|interj|qub|comp|conj|adj.*"/>
                        <exception postag_regexp="yes" scope="next" postag="verb.*sg.*|pred|(?:interp|comp):comma|conj"/>
                    </token>
                    <token postag="(?:ppron[1-3]|subst):sg:(nom|gen).*" postag_regexp="yes"></token>
                </and>
            </marker>
            <token postag="verb:.*:pl.*" postag_regexp="yes"><exception inflected="yes" regexp="yes">&verb_obj_gen;|&verb_non_transitive;</exception></token>
        </pattern>
        <disambig action="filter" postag="(subst|ppron[1-3]|adj):sg:acc.*"></disambig>
        </rule>
        <rule> <!-- 14 verb: sg + subst: pl -->
            <pattern>
                <token postag="verb:.*:sg.*" postag_regexp="yes"><exception>jednaj</exception><exception inflected="yes" regexp="yes">&verb_obj_gen;|&verb_non_transitive;|&verb_obj_dat;</exception>
                    <exception scope="previous">nie</exception>
                </token>
                <marker>
                    <and>
                        <token postag="(?:ppron[1-3]|subst|adj):pl:acc.*" postag_regexp="yes"><exception negate_pos="yes" postag_regexp="yes" postag="(?:subst|ger|depr|ppron|adj|ppas).*|SENT_END"/>
                            <exception postag="subst:sg:nom.*" postag_regexp="yes"/>
                            <exception postag="subst.*gen.*" postag_regexp="yes" scope="previous"/>
                        </token>
                        <token postag="(?:ppron[1-3]|subst|adj):pl:nom.*" postag_regexp="yes"><exception postag="adj:sg.*" postag_regexp="yes"/><exception postag_regexp="yes" postag="ppron[1-3].*nom.*:akc.*"/></token>
                    </and>
                </marker>
            </pattern>
            <disambig action="filter" postag="(?:ppron[1-3]|subst|adj|ppas|ger):pl:acc.*"></disambig>
            <example type="ambiguous" inputform="śluby[ślub/subst:pl:acc:m3,ślub/subst:pl:nom:m3,ślub/subst:pl:voc:m3]"
                     outputform="śluby[ślub/subst:pl:acc:m3]">Anna składa <marker>śluby</marker>.</example>
            <example type="untouched">Byt określa świadomość.</example>
            <example type="untouched">Słowo honoru daję, że nie znam kobiety, która by na mnie tak piekielne robiła wrażenie…</example>
        </rule>
        <rule> <!-- 15 verb:praet:sg + subst:sg, lecz inny rodzaj-->
            <pattern>
                <unify negate="yes"><feature id="gender"/>
                    <token postag="verb:(praet|pot):sg.*:ter.*" postag_regexp="yes"><exception inflected="yes" regexp="yes">&verb_obj_gen;|&verb_non_transitive;</exception></token>
                    <marker>
                        <and>
                            <token postag="(?:ppron[1-3]|subst|adj):sg:nom.*" postag_regexp="yes"></token>
                            <!-- token><match no="0" setpos="yes" postag_regexp="yes" postag="verb.*:sg:([^:]*):.*" postag_replace="subst:sg(?!:nom.*[\.:]$1.*).*\$"/></token -->
                            <token postag="(?:ppron[1-3]|subst|adj):sg:acc.*" postag_regexp="yes"><exception negate_pos="yes" postag_regexp="yes" postag="(?:subst|ger|depr|ppron|adj).*|SENT_END"/></token>

                        </and>
                    </marker>
                </unify>
            </pattern>
            <disambig action="filter" postag="(?:ppron[1-3]|subst|adj):.*:acc.*"></disambig>
            <example type="ambiguous" inputform="ślub[ślub/subst:sg:acc:m3,ślub/subst:sg:nom:m3]"
                     outputform="ślub[ślub/subst:sg:acc:m3]">Anna składała <marker>ślub</marker>.</example>
            <example type="ambiguous" inputform="swe[swój/adj:pl:acc:m2.m3.f.n1.n2.p2.p3:pos,swój/adj:pl:nom.voc:m2.m3.f.n1.n2.p2.p3:pos,swój/adj:sg:acc:n1.n2:pos,swój/adj:sg:nom.voc:n1.n2:pos]"
                     outputform="swe[swój/adj:pl:acc:m2.m3.f.n1.n2.p2.p3:pos,swój/adj:sg:acc:n1.n2:pos]">Wiatr łamał <marker>swe</marker> zwierciadło.</example>
            <example type="untouched">Byt określa świadomość.</example>
            <example type="ambiguous" inputform="świadomość[świadomość/subst:sg:acc:f,świadomość/subst:sg:nom:f]"
                     outputform="świadomość[świadomość/subst:sg:acc:f]">Byt określałby <marker>świadomość</marker>.</example>
            <example type="untouched">Mówiła Franciszka.</example>
        </rule>
        <rule> <!-- 16 verb:praet:pl + subst:pl, lecz inny rodzaj -->
            <pattern>
                <unify negate="yes"><feature id="gender"/>
                    <token postag="verb:(praet|pot):pl.*:ter.*" postag_regexp="yes"><exception inflected="yes" regexp="yes">&verb_obj_gen;|&verb_non_transitive;</exception></token>
                    <marker>
                        <and>
                            <token postag="(?:ppron[1-3]|subst|adj):pl:acc.*" postag_regexp="yes"><exception negate_pos="yes" postag_regexp="yes" postag="(?:subst|ger|depr|ppron|adj).*|SENT_END"/></token>
                            <token postag="(?:ppron[1-3]|subst|adj):pl:nom.*" postag_regexp="yes"/>
                        </and>
                    </marker>
                </unify>
            </pattern>
            <disambig action="filter" postag="(?:ppron[1-3]|subst|adj):.*:acc.*"></disambig>
            <example type="ambiguous" inputform="śluby[ślub/subst:pl:acc:m3,ślub/subst:pl:nom:m3,ślub/subst:pl:voc:m3]"
                     outputform="śluby[ślub/subst:pl:acc:m3]">Anna z Janem składali <marker>śluby</marker>.</example>
            <example type="untouched">Byt określa świadomość.</example>
        </rule>
        <rule> <!-- 17 verb:praet:sg + subst:sg:acc/gen [potencjalne dopełnienie], lecz nie w mianowniku -->
            <pattern>
                    <token postag="verb:(praet|pot):sg.*:ter.*" postag_regexp="yes"><exception inflected="yes" regexp="yes">&verb_obj_gen;|&verb_non_transitive;</exception></token>
                    <marker>
                        <and>
                            <token postag="(?:ppron[1-3]|subst|adj):sg:acc.*" postag_regexp="yes"><exception negate_pos="yes" postag_regexp="yes" postag="(?:subst|ger|depr|ppron|adj).*|SENT_END"/></token>
                            <token postag="(?:ppron[1-3]|subst|adj):sg:gen.*" postag_regexp="yes"><exception postag="(?:ppron[1-3]|subst|adj):(sg|pl):nom.*" postag_regexp="yes"/></token>
                        </and>
                    </marker>
            </pattern>
            <disambig action="filter" postag="(?:ppron[1-3]|subst|adj):.*:acc.*"></disambig>
            <example type="ambiguous" inputform="Rosynanta[rosynant/subst:sg:acc:m2,rosynant/subst:sg:gen:m2]"
                     outputform="Rosynanta[rosynant/subst:sg:acc:m2]">Spiął <marker>Rosynanta</marker>.</example>
        </rule>
        <rule> <!-- 18 verb:imps + subst/nom|gen -->
            <pattern>
                <token postag="verb:(imps|inf).*|pant:.*|pcon.*" postag_regexp="yes"><exception>jednaj</exception><exception inflected="yes" regexp="yes">&verb_obj_gen;|&verb_non_transitive;|&verb_obj_dat;</exception><exception regexp="yes">bądź|lub</exception>
                    <exception scope="previous">nie</exception>
                </token>
                <marker>
                    <and>
                        <token postag="(?:ppron[1-3]|subst|adj):.*:acc.*" postag_regexp="yes"><exception negate_pos="yes" postag_regexp="yes" postag="(?:subst|ger|depr|ppron|adj).*|SENT_END"/></token>
                        <token postag="(?:ppron[1-3]|subst|adj):.*:(nom|gen).*" postag_regexp="yes"></token>
                    </and>
                </marker>
            </pattern>
            <disambig action="filter" postag="(subst|ppron[1-3]|adj):.*:acc.*"></disambig>
            <example type="ambiguous" inputform="ślub[ślub/subst:sg:acc:m3,ślub/subst:sg:nom:m3]"
                     outputform="ślub[ślub/subst:sg:acc:m3]">Tam brano <marker>ślub</marker>.</example>
            <example type="ambiguous" inputform="śluby[ślub/subst:pl:acc:m3,ślub/subst:pl:nom:m3,ślub/subst:pl:voc:m3]"
                     outputform="śluby[ślub/subst:pl:acc:m3]">Tam brano <marker>śluby</marker>.</example>
            <example type="ambiguous" inputform="śluby[ślub/subst:pl:acc:m3,ślub/subst:pl:nom:m3,ślub/subst:pl:voc:m3]"
                     outputform="śluby[ślub/subst:pl:acc:m3]">Oni muszą składać <marker>śluby</marker>.</example>
            <example type="untouched">Byt określa świadomość.</example>
            <example type="ambiguous" inputform="go[on/ppron3:sg:acc:m1.m2.m3:ter:nakc:npraep,on/ppron3:sg:gen:m1.m2.m3:ter:nakc:npraep,on/ppron3:sg:gen:n1.n2:ter:nakc:npraep]"
                     outputform="go[on/ppron3:sg:acc:m1.m2.m3:ter:nakc:npraep]">Brano <marker>go</marker> na spytki.</example>
        </rule>
        <rule> <!-- 19 verb:imps + subst/nom|gen -->
            <pattern>
                <marker>
                    <and>
                        <token postag="(?:ppron[1-3]|subst|adj):.*:acc.*" postag_regexp="yes"><exception negate_pos="yes" postag_regexp="yes" postag="(?:subst|ger|depr|ppron|adj).*|SENT_END"/></token>
                        <token postag="(?:ppron[1-3]|subst|adj):.*:(nom|gen).*" postag_regexp="yes"></token>
                    </and>
                </marker>
                <token postag="verb:(imps|inf).*|pant:.*|pcon.*" postag_regexp="yes"><exception>jednaj</exception><exception inflected="yes" regexp="yes">&verb_obj_gen;|&verb_non_transitive;</exception><exception regexp="yes">bądź|lub</exception></token>
                <token regexp="yes">[,;\.—\-]</token>
            </pattern>
            <disambig action="filter" postag="(subst|ppron[1-3]|adj):.*:acc.*"></disambig>
            <example type="ambiguous" inputform="ślub[ślub/subst:sg:acc:m3,ślub/subst:sg:nom:m3]"
                     outputform="ślub[ślub/subst:sg:acc:m3]">Tam <marker>ślub</marker> brano.</example>
            <example type="ambiguous" inputform="śluby[ślub/subst:pl:acc:m3,ślub/subst:pl:nom:m3,ślub/subst:pl:voc:m3]"
                     outputform="śluby[ślub/subst:pl:acc:m3]">Tam <marker>śluby</marker> brano.</example>
            <example type="ambiguous" inputform="śluby[ślub/subst:pl:acc:m3,ślub/subst:pl:nom:m3,ślub/subst:pl:voc:m3]"
                     outputform="śluby[ślub/subst:pl:acc:m3]">Oni muszą <marker>śluby</marker> składać.</example>
            <example type="untouched">Byt określa świadomość.</example>
            <example type="ambiguous" inputform="go[on/ppron3:sg:acc:m1.m2.m3:ter:nakc:npraep,on/ppron3:sg:gen:m1.m2.m3:ter:nakc:npraep,on/ppron3:sg:gen:n1.n2:ter:nakc:npraep]"
                     outputform="go[on/ppron3:sg:acc:m1.m2.m3:ter:nakc:npraep]">Tam <marker>go</marker> brano.</example>
        </rule>
        <rule> <!-- 20 verb pri/sec + subst/nom|gen -->
            <pattern>
                <token postag="verb:.*(pri|sec).*" postag_regexp="yes"><exception>jednaj</exception><exception inflected="yes" regexp="yes">&verb_obj_gen;|&verb_non_transitive;</exception><exception regexp="yes">bądź|lub</exception>
                    <exception scope="previous" regexp="yes">nie|niewiele</exception>
                </token>
                <marker>
                    <and>
                        <token postag="(?:ppron[1-3]|subst|adj):.*:acc.*" postag_regexp="yes"><exception negate_pos="yes" postag_regexp="yes" postag="(?:subst|ger|depr|ppron|adj).*|SENT_END"/></token>
                        <token postag="(?:ppron[1-3]|subst|adj):.*:(nom|gen).*" postag_regexp="yes"><exception postag_regexp="yes" postag="ppron[1-3].*nom.*:akc.*"/></token>
                    </and>
                </marker>
            </pattern>
            <disambig action="filter" postag="(subst|ppron[1-3]|adj):.*:acc.*"></disambig>
            <example type="ambiguous" inputform="ślub[ślub/subst:sg:acc:m3,ślub/subst:sg:nom:m3]"
                     outputform="ślub[ślub/subst:sg:acc:m3]">Tam bierzemy <marker>ślub</marker>.</example>
            <example type="ambiguous" inputform="śluby[ślub/subst:pl:acc:m3,ślub/subst:pl:nom:m3,ślub/subst:pl:voc:m3]"
                     outputform="śluby[ślub/subst:pl:acc:m3]">Tam bierzecie <marker>śluby</marker>.</example>
            <example type="untouched">Byt określa świadomość.</example>
            <example type="ambiguous" inputform="go[on/ppron3:sg:acc:m1.m2.m3:ter:nakc:npraep,on/ppron3:sg:gen:m1.m2.m3:ter:nakc:npraep,on/ppron3:sg:gen:n1.n2:ter:nakc:npraep]"
                     outputform="go[on/ppron3:sg:acc:m1.m2.m3:ter:nakc:npraep]">Bierz <marker>go</marker> na spytki.</example>
            <example type="untouched">Słowo honoru daję, że nie znam kobiety, która by na mnie tak piekielne robiła wrażenie…</example>
        </rule>
        <rule>       <!-- 21 -->
            <pattern>
                <token postag="(verb|pact).*" postag_regexp="yes"><exception inflected="yes" postag=".*:ter.*" postag_regexp="yes">być</exception></token>
                <marker>
                    <token>to</token>
                </marker>
            </pattern>
            <disambig postag="subst:sg:acc:n2"/>
        </rule>
        <rule> <!-- 22 pact + subst -->
            <pattern>
                <token skip="10" postag="pact:.*" postag_regexp="yes">
                    <exception inflected="yes" regexp="yes">&verb_obj_gen;|&verb_non_transitive;</exception>
                    <exception postag="verb.*(sg|pl).*|pred|(interp|comp):comma|conj|pcon.*|prep.*" postag_regexp="yes" scope="next"/>
                </token>
                <marker>
                    <and>
                        <token postag="(?:ppron[1-3]|subst|ger|adj):.*:acc.*" postag_regexp="yes"><exception negate_pos="yes" postag_regexp="yes" postag="(?:subst|ger|depr|ppron|adj).*|SENT_END"/></token>
                        <token postag="(?:ppron[1-3]|subst|ger|adj):.*:(nom|gen).*" postag_regexp="yes"><exception postag_regexp="yes" postag="ppron[1-3].*nom.*:akc.*"/></token>
                    </and>
                </marker>
            </pattern>
            <disambig action="filter" postag="(subst|ppron[1-3]|adj):.*:acc.*"></disambig>
            <example type="untouched">Pozwala mu na to art. 268 k. p. k. mówiący o prawach procesowych osoby.</example>
        </rule>
        <rule> <!-- 23 subst + pcon-->
            <pattern>
                <marker>
                    <and>
                        <token skip="10" postag="(?:ppron[1-3]|subst|ger|adj):.*:acc.*" postag_regexp="yes">
                            <exception negate_pos="yes" postag_regexp="yes" postag="(?:subst|ger|depr|ppron|adj).*|SENT_END"/>
                            <exception postag="verb.*(sg|pl).*|pred|(interp|comp):comma|conj|pact.*" postag_regexp="yes" scope="next"/>
                            <exception scope="previous" postag_regexp="yes" postag="verb.*sg.*ter.*"/>
                        </token>
                        <token postag="(?:ppron[1-3]|subst|ger|adj):.*:(nom|gen).*" postag_regexp="yes"><exception postag_regexp="yes" postag="ppron[1-3].*nom.*:akc.*"/></token>
                    </and>
                </marker>
                <token postag="pcon:.*" postag_regexp="yes"><exception inflected="yes" regexp="yes">&verb_obj_gen;|&verb_non_transitive;</exception></token>
            </pattern>
            <disambig action="filter" postag="(subst|ppron[1-3]|adj):.*:acc.*"></disambig>
        </rule>
        <rule> <!-- 24 pcon + subst -->
            <pattern>
                <token skip="10" postag="pcon:.*" postag_regexp="yes">
                    <exception inflected="yes" regexp="yes">&verb_obj_gen;|&verb_non_transitive;</exception>
                    <exception postag="verb.*(sg|pl).*|pred|(interp|comp):comma|conj|pcon.*|pact.*|subst.*" postag_regexp="yes" scope="next"/>
                </token>
                <marker>
                        <token postag="(?:ppron[1-3]|subst|ger|adj):.*:acc.*" postag_regexp="yes">
                            <exception negate_pos="yes" postag_regexp="yes" postag="(?:subst|ger|depr|ppron|adj).*|SENT_END"/>
                            <exception scope="previous" postag_regexp="yes" postag="subst.*gen.*"/>
                        </token>
                </marker>
            </pattern>
            <disambig action="filter" postag="(subst|ppron[1-3]|adj):.*:acc.*"></disambig>
            <example type="untouched">Dochodząc do oceanu atlantyckiego wyżyna tworzy wysokie, skaliste wybrzeże klifowe.</example>
            <example type="untouched">I wziąwszy go szedł z nim ku krzyżującym się ulicom, kierując się głosem fontanny, która zdawała się płakać wśród nocnej ciszy nad ciałami pomęczonych.</example>
        </rule>
        <rule> <!-- 25 pact + prep + ppron + subst -->
            <pattern>
                <token postag="pact:.*" postag_regexp="yes">
                    <exception inflected="yes" regexp="yes">&verb_obj_gen;|&verb_non_transitive;</exception>
                </token>
                <unify>
                    <feature id="case"/>
                    <token postag="prep.*" postag_regexp="yes"/>
                    <token skip="4" postag="ppron.*" postag_regexp="yes">
                        <exception postag="verb.*(sg|pl).*|pred|(interp|comp):comma|conj|pcon.*" postag_regexp="yes" scope="next"/>
                    </token>
                </unify>
                <marker>
                    <and>
                        <token postag="(?:ppron[1-3]|subst|ger|adj):.*:acc.*" postag_regexp="yes"><exception negate_pos="yes" postag_regexp="yes" postag="(?:subst|ger|depr|ppron|adj).*|SENT_END"/></token>
                        <token postag="(?:ppron[1-3]|subst|ger|adj):.*:(nom|gen).*" postag_regexp="yes"><exception postag_regexp="yes" postag="ppron[1-3].*nom.*:akc.*"/></token>
                    </and>
                </marker>
            </pattern>
            <disambig action="filter" postag="(subst|ppron[1-3]|adj):.*:acc.*"></disambig>
            <example type="untouched">Pozwala mu na to art. 268 k. p. k. mówiący o prawach procesowych osoby.</example>
            <example type="ambiguous" inputform="działalność[działalność/subst:sg:acc:f,działalność/subst:sg:nom:f]" outputform="działalność[działalność/subst:sg:acc:f]">Przedsiębiorcy podejmujący w nim <marker>działalność</marker> mogą korzystać z ulg celnych.</example>
        </rule>
    </rulegroup>

    <rulegroup name="Unifikacja rzeczowników z innymi (koordynacja)" id="Unify_2_3_noun">
        <rule>
            <pattern>
                <unify>
                    <feature id="case"><type id="acc"/><type id="inst"/><type id="gen"/><type id="dat"/><type id="loc"/><type id="nom"/></feature>
                    <token postag="(?:subst|depr|ger).*" postag_regexp="yes"><exception negate_pos="yes" postag_regexp="yes" postag="(?:subst|depr|ger).*"/><exception scope="previous" postag_regexp="yes" postag="(?:ger|subst).*"/></token>
                    <unify-ignore>
                        <token regexp="yes">[,i]|oraz|ani|lub|albo|bądź|czy</token>
                    </unify-ignore>
                    <token postag="(?:subst|depr|ger).*" postag_regexp="yes"><exception negate_pos="yes" postag_regexp="yes" postag="(?:subst|depr|ger).*"/></token>
                    <unify-ignore>
                        <token regexp="yes">[,i]|oraz|ani|lub|albo|bądź|czy</token>
                    </unify-ignore>
                    <token postag="(?:subst|depr|ger).*" postag_regexp="yes"><exception negate_pos="yes" postag_regexp="yes" postag="(?:subst|depr|ger).*"/><exception>nic</exception></token>
                </unify>
            </pattern>
            <disambig action="unify"/>
            <example type="ambiguous" inputform="konie[konie/subst:pl:acc:p3,konie/subst:pl:nom:p3,konie/subst:pl:voc:p3,koń/subst:pl:acc:m2,koń/subst:pl:nom:m2,koń/subst:pl:voc:m2]"
                     outputform="konie[konie/subst:pl:acc:p3,koń/subst:pl:acc:m2]">Patrzył na kozy, <marker>konie</marker> i robaki.</example>
            <example type="untouched">Spojrzał na nową, ale się nie odezwał.</example>
        </rule>
        <rule>
            <pattern>
                <marker>
                    <unify>
                        <feature id="case"><type id="acc"/><type id="inst"/><type id="gen"/><type id="dat"/><type id="loc"/><type id="nom"/></feature>
                        <feature id="number"/>
                        <token postag="(?:subst|depr|ger).*" postag_regexp="yes"><exception negate_pos="yes" postag_regexp="yes" postag="(?:subst|depr|ger).*"/><exception scope="previous" postag_regexp="yes" postag="(?:ger|subst).*"/></token>
                        <unify-ignore>
                            <token regexp="yes">[,i]|oraz|ani|lub|albo|bądź|czy|plus</token>
                        </unify-ignore>
                        <token postag="(?:subst|depr|ger).*" postag_regexp="yes"><exception negate_pos="yes" postag_regexp="yes" postag="(?:subst|depr|ger).*"/><exception>nic</exception></token>
                    </unify>
                </marker>
                    <token postag="interp:comma|SENT_END" postag_regexp="yes"/>
            </pattern>
            <disambig action="unify"/>
            <example type="ambiguous" inputform="konie[konie/subst:pl:acc:p3,konie/subst:pl:nom:p3,konie/subst:pl:voc:p3,koń/subst:pl:acc:m2,koń/subst:pl:nom:m2,koń/subst:pl:voc:m2]"
                     outputform="konie[konie/subst:pl:acc:p3,koń/subst:pl:acc:m2]">Patrzył na kozy i <marker>konie</marker>.</example>
            <example type="untouched">Spojrzał na nową, ale się nie odezwał.</example>
            <example type="untouched">Pokazały się owoce nauki i wyniki poszybowały w górę.</example>
        </rule>
        <rule>
            <pattern>
                <marker>
                    <unify>
                        <feature id="case"><type id="acc"/><type id="inst"/><type id="gen"/><type id="dat"/><type id="loc"/><type id="nom"/></feature>
                        <feature id="number"/>
                        <token postag="(?:subst|depr|ger).*" postag_regexp="yes"><exception negate_pos="yes" postag_regexp="yes" postag="(?:subst|depr|ger).*"/><exception scope="previous" postag_regexp="yes" postag="(?:ger|subst).*"/></token>
                        <unify-ignore>
                            <token regexp="yes">[,i]|oraz|ani|lub|albo|bądź|czy</token>
                        </unify-ignore>
                        <token postag="(?:adj|pact|ppas).*" postag_regexp="yes"><exception postag="comp:comma"/></token>
                        <token postag="(?:subst|depr|ger).*" postag_regexp="yes"><exception negate_pos="yes" postag_regexp="yes" postag="(?:subst|depr|ger).*"/><exception>nic</exception></token>
                    </unify>
                </marker>
                <token postag="interp:comma|SENT_END" postag_regexp="yes"/>
            </pattern>
            <disambig action="unify"/>
            <example type="ambiguous" inputform="konie[konie/subst:pl:acc:p3,konie/subst:pl:nom:p3,konie/subst:pl:voc:p3,koń/subst:pl:acc:m2,koń/subst:pl:nom:m2,koń/subst:pl:voc:m2]"
                     outputform="konie[konie/subst:pl:acc:p3,koń/subst:pl:acc:m2]">Patrzył na kozy i piękne <marker>konie</marker>.</example>
            <example type="untouched">Spojrzał na nową, ale się nie odezwał.</example>
            <example type="untouched">Pokazały się owoce nauki i wyniki poszybowały w górę.</example>
            <example type="untouched">Podpisał trzyletni, definitywny kontrakt, którego wysokość, na życzenie strony polskiej, pozostaje na razie nieznana.</example>
        </rule>
    </rulegroup>


    <rule id="DAT_SIE_ZDAWALO" name="celownik + się zdawało, że">
        <pattern>
            <marker>
                <token postag="subst:.*dat.*" postag_regexp="yes"/>
            </marker>
            <token>się</token>
            <token regexp="yes">zda(?:je|wało)</token>
        </pattern>
        <disambig action="filterall"/>
    </rule>

    <rule id="DAT_ZDAWALO_SIE" name="celownik + zdawało się, że">
        <pattern>
            <marker>
                <token postag="subst:.*dat.*" postag_regexp="yes"/>
            </marker>
            <token regexp="yes">zda(?:je|wało)</token>
            <token>się</token>
        </pattern>
        <disambig action="filterall"/>
    </rule>

    <rule id="LATA" name="lata + data => rok">
        <pattern>
            <marker>
                <token postag="subst:pl.*m3" postag_regexp="yes" inflected="yes">rok</token>
            </marker>
            <token regexp="yes">(?:\d\d)?\d\d</token>
        </pattern>
        <disambig action="filterall"/>
    </rule>

    <rule id="LATA_UNIFY" name="lata + data => rok">
        <pattern>
            <unify><feature id="case"/><feature id="number"/><feature id="gender"><type id="m3"/></feature>
                <token postag="subst:pl.*m3" postag_regexp="yes" inflected="yes">rok</token>
                <token inflected="yes" postag="adj.*" postag_regexp="yes" regexp="yes">zerowy|dwudziesty|trzydziesty|czterdziesty|pięćdziesiąty|sześćdziesiąty|siedemdziesiąty|osiemdziesiąty|dziewięćdziesiąty</token>
            </unify>
        </pattern>
        <disambig action="unify"/>
        <example type="untouched">Antoni lata Tupolowem.</example>
        <example type="ambiguous" inputform="lata[latać/verb:fin:sg:ter:imperf:nonrefl,lato/subst:pl:acc:n2,lato/subst:pl:nom:n2,lato/subst:pl:voc:n2,lato/subst:sg:gen:n2,rok/subst:pl:acc:m3,rok/subst:pl:nom:m3,rok/subst:pl:voc:m3]"
                 outputform="lata[rok/subst:pl:acc:m3,rok/subst:pl:nom:m3,rok/subst:pl:voc:m3]">To były <marker>lata</marker> dziewięćdziesiąte!</example>
    </rule>


    <!-- now not that greedy :) -->
    <rulegroup name="unifikacja przymiotnika z rzeczownikiem" id="unify_adj_subst">
        <rule>
            <pattern>
                <marker>
                    <unify>
                        <feature id="number"/><feature id="gender"/> <feature id="case"/>
                        <token postag="(?:adj|ppas).*" postag_regexp="yes">
                            <exception negate_pos="yes" postag_regexp="yes" postag="(adj|ppas|depr|subst|comp:comma).*"/>
                            <exception inflected="yes" regexp="yes">który|jaki</exception>
                        </token>
                        <token postag="(?:adj|ppas).*" postag_regexp="yes"><exception negate_pos="yes" postag_regexp="yes" postag="(adj|ppas|depr|subst|comp:comma).*"/></token>
                        <token postag="(subst|depr|ger).*" postag_regexp="yes"><exception negate_pos="yes" postag_regexp="yes" postag="(?:subst|ger|depr|brev).*|SENT_END"/></token>
                    </unify>
                </marker>
            </pattern>
            <disambig action="unify"/>
            <example type="ambiguous" inputform="młoda[młoda/subst:sg:nom:f,młoda/subst:sg:voc:f,młody/adj:sg:nom.voc:f:pos]"
                     outputform="młoda[młody/adj:sg:nom.voc:f:pos]">Piękna <marker>młoda</marker> kobieta</example>
            <example type="ambiguous" inputform="dawnym[dawny/adj:pl:dat:m1.m2.m3.f.n1.n2.p1.p2.p3:pos,dawny/adj:sg:inst:m1.m2.m3.n1.n2:pos,dawny/adj:sg:loc:m1.m2.m3.n1.n2:pos]"
                     outputform="dawnym[dawny/adj:sg:inst:m1.m2.m3.n1.n2:pos]">Uklękła przy starym i <marker>dawnym</marker> kurowskim obyczajem zaśpiewała stłumionym nieco głosem.</example>
            <example type="untouched">Wnioskują też ouruchomienie funduszu 40 milionów, które walne zgromadzenie odliczyło od zysku z 1994 roku — pieniądze te miały być rezerwą również na poczet zaległych podatków.</example>
        </rule>
        <rule>
            <pattern>
                <marker>
                    <unify>
                        <feature id="number"/><feature id="gender"/> <feature id="case"/>
                        <token postag="(?:adj|ppas|pact).*" postag_regexp="yes"><exception negate_pos="yes" postag_regexp="yes" postag="(adj|ppas|depr|pact|subst|comp:comma).*"/></token>
                        <token postag="(subst|depr|ger).*" postag_regexp="yes"><exception negate_pos="yes" postag_regexp="yes" postag="(?:subst|ger|depr|verb:impt|brev|interj).*|SENT_END"/></token>
                    </unify>
                </marker>
            </pattern>
            <disambig action="unify"/>
            <example type="ambiguous" inputform="Młoda[młoda/subst:sg:nom:f,młoda/subst:sg:voc:f,młody/adj:sg:nom.voc:f:pos]"
                     outputform="Młoda[młody/adj:sg:nom.voc:f:pos]"><marker>Młoda</marker> kobieta</example>
            <example type="ambiguous" inputform="par[par/subst:sg:acc:m3,par/subst:sg:nom:m1,par/subst:sg:nom:m3,para/subst:pl:gen:f,paragraf/brev:pun]"
                     outputform="par[para/subst:pl:gen:f]">Zwycięzcy tych <marker>par</marker> awansują do I rundy.</example>
        </rule>
        <rule>
            <pattern>
                <marker>
                    <unify>
                        <feature id="number"/><feature id="gender"/> <feature id="case"/>
                        <token postag="(?:adj|ppas|pact).*" postag_regexp="yes">
                            <exception negate_pos="yes" postag_regexp="yes" postag="(adj|ppas|depr|pact|subst|comp:comma).*"/>
                            <exception inflected="yes" regexp="yes">który|jaki</exception>
                        </token>
                        <unify-ignore>
                            <token postag="adv.*|qub" postag_regexp="yes"/>
                        </unify-ignore>
                        <token postag="(subst|depr|ger).*" postag_regexp="yes"><exception negate_pos="yes" postag_regexp="yes" postag="(?:subst|ger|depr|verb:impt|brev|interj).*|SENT_END"/></token>
                    </unify>
                </marker>
            </pattern>
            <disambig action="unify"/>
            <example type="ambiguous" inputform="Młoda[młoda/subst:sg:nom:f,młoda/subst:sg:voc:f,młody/adj:sg:nom.voc:f:pos]"
                     outputform="Młoda[młody/adj:sg:nom.voc:f:pos]"><marker>Młoda</marker> jeszcze kobieta</example>
            <example type="ambiguous" inputform="par[par/subst:sg:acc:m3,par/subst:sg:nom:m1,par/subst:sg:nom:m3,para/subst:pl:gen:f,paragraf/brev:pun]"
                     outputform="par[para/subst:pl:gen:f]">Zwycięzcy nowych wciąż <marker>par</marker> awansują do I rundy.</example>
            <example type="untouched">Chrześcijanin powinien przyjąć nieszczęścia, które nawet dobro pociąga za sobą.</example>
        </rule>
        <rule>
            <pattern>
                <marker>
                    <unify> <feature id="number"/><feature id="gender"/> <feature id="case"/>
                        <token postag="(?:subst|depr|ger).*" postag_regexp="yes"><exception negate_pos="yes" postag_regexp="yes" postag="(?:subst|ger|depr|interj|brev:pun).*"/></token>
                        <token postag="(?:adj|ppas|pact).*" postag_regexp="yes"><exception negate_pos="yes" postag_regexp="yes" postag="(?:adj|ppas|pact|subst|verb:winien).*|SENT_END"/><exception inflected="yes">winny</exception><exception>diabli</exception></token>
                    </unify>
                </marker>
                <token><exception postag="(subst|ger).*" postag_regexp="yes"/></token>
            </pattern>
            <disambig action="unify"/>
        </rule>
        <rule>
            <pattern>
                <token postag="prep:nom.*" postag_regexp="yes"/>
                <marker>
                    <unify><feature id="case"><type id="nom"/></feature><feature id="gender"/><feature id="number"/>
                        <token postag="(?:subst|depr|ger).*" postag_regexp="yes"><exception negate_pos="yes" postag_regexp="yes" postag="(?:subst|ger|depr).*"/></token>
                        <token postag="(?:adj|ppas|pact).*" postag_regexp="yes"><exception negate_pos="yes" postag_regexp="yes" postag="(?:adj|ppas|pact|subst).*|SENT_END"/></token>
                    </unify>
                </marker>
            </pattern>
            <disambig action="unify"/>
        </rule>
        <rule>
            <pattern>
                <token postag="prep:acc.*" postag_regexp="yes"/>
                <marker>
                    <unify><feature id="case"><type id="acc"/></feature><feature id="gender"/><feature id="number"/>
                        <token postag="(?:subst|depr|ger).*" postag_regexp="yes"><exception negate_pos="yes" postag_regexp="yes" postag="(?:subst|ger|depr).*"/></token>
                        <token postag="(?:adj|ppas|pact).*" postag_regexp="yes"><exception negate_pos="yes" postag_regexp="yes" postag="(?:adj|ppas|pact|subst).*|SENT_END"/></token>
                    </unify>
                </marker>
            </pattern>
            <disambig action="unify"/>
        </rule>

        <rule>
            <pattern>
                <token postag="prep:gen.*" postag_regexp="yes"/>
                <marker>
                    <unify><feature id="case"><type id="gen"/></feature><feature id="gender"/><feature id="number"/>
                        <token postag="(?:subst|depr|ger).*" postag_regexp="yes"><exception negate_pos="yes" postag_regexp="yes" postag="(?:subst|ger|depr).*"/></token>
                        <token postag="(?:adj|ppas|pact).*" postag_regexp="yes"><exception negate_pos="yes" postag_regexp="yes" postag="(?:adj|ppas|pact|subst).*|SENT_END"/></token>
                    </unify>
                </marker>
            </pattern>
            <disambig action="unify"/>
        </rule>

        <rule>
            <pattern>
                <token postag="prep:dat.*" postag_regexp="yes"/>
                <marker>
                    <unify><feature id="case"><type id="dat"/></feature><feature id="gender"/><feature id="number"/>
                        <token postag="(?:subst|depr|ger).*" postag_regexp="yes"><exception negate_pos="yes" postag_regexp="yes" postag="(?:subst|ger|depr).*"/></token>
                        <token postag="(?:adj|ppas|pact).*" postag_regexp="yes"><exception negate_pos="yes" postag_regexp="yes" postag="(?:adj|ppas|pact|subst).*|SENT_END"/></token>
                    </unify>
                </marker>
            </pattern>
            <disambig action="unify"/>
        </rule>

        <rule>
            <pattern>
                <token postag="prep:inst.*" postag_regexp="yes"/>
                <marker>
                    <unify><feature id="case"><type id="inst"/></feature><feature id="gender"/><feature id="number"/>
                        <token postag="(?:subst|depr|ger).*" postag_regexp="yes"><exception negate_pos="yes" postag_regexp="yes" postag="(?:subst|ger|depr).*"/></token>
                        <token postag="(?:adj|ppas|pact).*" postag_regexp="yes"><exception negate_pos="yes" postag_regexp="yes" postag="(?:adj|ppas|pact|subst).*|SENT_END"/></token>
                    </unify>
                </marker>
            </pattern>
            <disambig action="unify"/>
        </rule>

        <rule>
            <pattern>
                <token postag="prep:loc.*" postag_regexp="yes"/>
                <marker>
                    <unify><feature id="case"><type id="loc"/></feature><feature id="gender"/><feature id="number"/>
                        <token postag="(?:subst|depr|ger).*" postag_regexp="yes"><exception negate_pos="yes" postag_regexp="yes" postag="(?:subst|ger|depr).*"/></token>
                        <token postag="(?:adj|ppas|pact).*" postag_regexp="yes"><exception negate_pos="yes" postag_regexp="yes" postag="(?:adj|ppas|pact|subst).*|SENT_END"/></token>
                    </unify>
                </marker>
            </pattern>
            <disambig action="unify"/>
        </rule>
        <rule>
            <pattern>
                <marker>
                    <unify>
                        <feature id="number"/><feature id="gender"/> <feature id="case"/>
                        <token postag="adj.*" postag_regexp="yes"><exception negate_pos="yes" postag_regexp="yes" postag="(adj|subst|comp:comma).*"/></token>
                        <token postag="(subst|depr|ger).*" postag_regexp="yes"><exception negate_pos="yes" postag_regexp="yes" postag="(?:subst|ger|depr).*"/></token>
                        <unify-ignore>
                            <token regexp="yes">[,i]|oraz|ani|lub|albo|bądź|czy</token>
                        </unify-ignore>
                        <token postag="(subst|depr|ger).*" postag_regexp="yes"><exception negate_pos="yes" postag_regexp="yes" postag="(?:subst|ger|depr).*|SENT_END"/></token>
                    </unify>
                </marker>
            </pattern>
            <disambig action="unify"/>
            <example type="ambiguous" inputform="wady[wad/subst:pl:acc:m3,wad/subst:pl:nom:m3,wada/subst:pl:acc:f,wada/subst:pl:nom:f]"
                     outputform="wady[wad/subst:pl:acc:m3]">Obnażała nasze błędy i <marker>wady</marker>.</example>
        </rule>
        <rule>
            <pattern>
                <unify>
                    <feature id="number"/><feature id="gender"/> <feature id="case"/>
                    <token postag="pact.*" postag_regexp="yes"><exception negate_pos="yes" postag_regexp="yes" postag="pact.*"/></token>
                    <token postag="(?:subst|depr|ger).*" postag_regexp="yes"><exception negate_pos="yes" postag_regexp="yes" postag="(?:subst|ger|depr).*|SENT_END"/></token>
                </unify>
            </pattern>
            <disambig action="unify"/>
        </rule>
        <rule>
            <pattern>
                <unify> <feature id="number"/><feature id="gender"/> <feature id="case"/>
                    <token postag="(?:subst|depr|ger).*" postag_regexp="yes"><exception negate_pos="yes" postag_regexp="yes" postag="(?:subst|ger|depr).*"/></token>
                    <token postag="pact.*" postag_regexp="yes"><exception negate_pos="yes" postag_regexp="yes" postag="pact.*|SENT_END"/></token>
                </unify>
            </pattern>
            <disambig action="unify"/>
        </rule>
        <rule>
            <pattern>
                <marker>
                    <unify>
                        <feature id="number"/><feature id="gender"/> <feature id="case"/>
                        <token max="2" postag="adj.*" postag_regexp="yes"><exception negate_pos="yes" postag_regexp="yes" postag="(adj|subst|comp:comma).*"/></token>
                        <token postag="(subst|depr|ger).*" postag_regexp="yes"><exception negate_pos="yes" postag_regexp="yes" postag="(?:subst|ger|depr|adj).*"/></token>
                    </unify>
                </marker>
                <token postag="SENT_END"/>
            </pattern>
            <disambig action="unify"/>
            <example type="ambiguous" inputform="drogi[droga/subst:pl:acc:f,droga/subst:pl:nom:f,droga/subst:pl:voc:f,droga/subst:sg:gen:f,drogi/adj:sg:acc:m3:pos,drogi/adj:sg:nom.voc:m1.m2.m3:pos,drogi/subst:pl:acc:p3,drogi/subst:pl:nom:p3,drogi/subst:pl:voc:p3]"
                     outputform="drogi[droga/subst:sg:gen:f]">Szukałem innej <marker>drogi</marker>.</example>
        </rule>
        <rule>
            <pattern>
                <marker>
                    <unify>
                        <feature id="number"/><feature id="gender"/> <feature id="case"/>
                        <token postag="(?:adj|ppas).*" postag_regexp="yes"><exception negate_pos="yes" postag_regexp="yes" postag="(adj|ppas|depr|subst|comp:comma).*"/>
                            <exception inflected="yes" regexp="yes">który|jaki</exception>
                        </token>
                        <unify-ignore><token postag="ppron3.*gen.*:npraep|qub" postag_regexp="yes"/></unify-ignore>
                        <token postag="(subst|depr|ger).*" postag_regexp="yes"><exception negate_pos="yes" postag_regexp="yes" postag="(?:subst|ger|depr).*|SENT_END"/></token>
                    </unify>
                </marker>
            </pattern>
            <disambig action="unify"/>
            <example type="ambiguous" inputform="Młoda[młoda/subst:sg:nom:f,młoda/subst:sg:voc:f,młody/adj:sg:nom.voc:f:pos]"
                     outputform="Młoda[młody/adj:sg:nom.voc:f:pos]"><marker>Młoda</marker> już kobieta</example>
            <example type="untouched">Ale człowiek wyższy powinien wznieść się ponad przesądy, a chrześcijanin powinien przyjąć nieszczęścia, które nawet dobro pociąga za sobą.</example>
        </rule>
    </rulegroup>

    <rulegroup id="unify_sposob" name="unifikacja rzeczownika „sposób” i „czas”">
        <rule>
        <pattern>
            <marker>
                <unify>
                    <feature id="number"/><feature id="gender"/><feature id="case"/>
                    <token postag="(?:adj|pact|ppas).*" postag_regexp="yes"/>
                    <token postag="(?:adj|pact|ppas).*" postag_regexp="yes"/>
                    <token regexp="yes">sposób|czas</token>
                </unify>
            </marker>
        </pattern>
        <disambig action="unify"/>
        <example type="ambiguous" inputform="sposób[sposobić/verb:impt:sg:sec:imperf:refl.nonrefl,sposób/pred,sposób/subst:sg:acc:m3,sposób/subst:sg:nom:m3]"
                 outputform="sposób[sposób/subst:sg:acc:m3]">Zrobiłem to w taki normalny <marker>sposób</marker>.</example>
        <example type="untouched">Acanie, sposób się do wojny!</example>
        </rule>
        <rule>
            <pattern>
                <marker>
                    <unify>
                        <feature id="number"/><feature id="gender"/><feature id="case"/>
                        <token postag="(?:adj|pact|ppas).*" postag_regexp="yes"/>
                        <unify-ignore><token postag="conj"/></unify-ignore>
                        <token postag="(?:adj|pact|ppas).*" postag_regexp="yes"/>
                        <token regexp="yes">sposób|czas</token>
                    </unify>
                </marker>
            </pattern>
            <disambig action="unify"/>
            <example type="ambiguous" inputform="sposób[sposobić/verb:impt:sg:sec:imperf:refl.nonrefl,sposób/pred,sposób/subst:sg:acc:m3,sposób/subst:sg:nom:m3]"
                     outputform="sposób[sposób/subst:sg:acc:m3]">Zrobiłem to w ten czy inny <marker>sposób</marker>.</example>
            <example type="untouched">Acanie, sposób się do wojny!</example>
        </rule>
        <rule>
            <pattern>
                <marker>
                    <unify>
                        <feature id="number"/><feature id="gender"/><feature id="case"/>
                        <token postag="(?:adj|pact|ppas).*" postag_regexp="yes"/>
                        <token regexp="yes">sposób|czas</token>
                    </unify>
                </marker>
            </pattern>
            <disambig action="unify"/>
            <example type="ambiguous" inputform="sposób[sposobić/verb:impt:sg:sec:imperf:refl.nonrefl,sposób/pred,sposób/subst:sg:acc:m3,sposób/subst:sg:nom:m3]"
                     outputform="sposób[sposób/subst:sg:acc:m3]">Zrobiłem to w normalny <marker>sposób</marker>.</example>
            <example type="untouched">Acanie, sposób się do wojny!</example>
        </rule>
        <rule>
            <pattern>
                <marker>
                    <unify>
                        <feature id="number"/><feature id="gender"/><feature id="case"/>
                        <token postag="(?:adj|pact|ppas).*" postag_regexp="yes"/>
                        <unify-ignore>
                            <token regexp="yes">[»«„”&quot;]</token>
                        </unify-ignore>
                        <token regexp="yes">sposób|czas</token>
                    </unify>
                </marker>
            </pattern>
            <disambig action="unify"/>
            <example type="ambiguous" inputform="sposób[sposobić/verb:impt:sg:sec:imperf:refl.nonrefl,sposób/pred,sposób/subst:sg:acc:m3,sposób/subst:sg:nom:m3]"
                     outputform="sposób[sposób/subst:sg:acc:m3]">Zrobiłem to w „normalny” <marker>sposób</marker>.</example>
            <example type="untouched">Acanie, sposób się do wojny!</example>
        </rule>
    </rulegroup>

    <rule id="unify_sposob_qub" name="unifikacja rzeczownika „sposób” i „czas”">
        <pattern>
            <marker>
                <unify>
                    <feature id="number"/><feature id="gender"/><feature id="case"/>
                    <token postag="(?:adj|pact|ppas).*" postag_regexp="yes"/>
                    <unify-ignore><token postag="adv.*|qub" postag_regexp="yes"/></unify-ignore>
                    <token regexp="yes">sposób|czas</token>
                </unify>
            </marker>
        </pattern>
        <disambig action="unify"/>
        <example type="ambiguous" inputform="sposób[sposobić/verb:impt:sg:sec:imperf:refl.nonrefl,sposób/pred,sposób/subst:sg:acc:m3,sposób/subst:sg:nom:m3]"
                 outputform="sposób[sposób/subst:sg:acc:m3]">Zrobiłem to w taki właśnie <marker>sposób</marker>.</example>
        <example type="untouched">Acanie, sposób się do wojny!</example>
    </rule>

    <rule id="unify_powstanie" name="unifikacja rzczownika powstanie">
        <pattern>
            <marker>
                <unify>
                    <feature id="number"><type id="sg"/></feature>
                    <feature id="gender"><type id="n2"/></feature>
                    <feature id="case"/>
                    <token>powstanie</token>
                    <token postag="(?:adj|pact|ppas).*" postag_regexp="yes"/>
                </unify>
            </marker>
        </pattern>
        <disambig action="unify"/>

    </rule>

    <rule id="idzie_o" name="idzie to czasownik z o">
        <pattern>
            <marker>
            <token>idzie</token>
            </marker>
            <token>o</token>
        </pattern>
        <disambig postag="verb:fin:sg:ter:imperf:nonrefl"/>
    </rule>


    <rule id="mamze" name="mamże">
        <pattern>
            <marker>
            <token skip="-1">mamże</token>
            </marker>
            <token>?</token>
        </pattern>
        <disambig action="add"><wd pos="verb:fin:sg:pri:imperf:refl.nonrefl" lemma="mieć"/></disambig>
    </rule>

    <rule id="MAMZE_JA_ACC" name="mamże ja + acc">
        <pattern>
            <token postag="verb:fin:sg:pri:imperf:refl.nonrefl">mamże</token>
            <token>ja</token>
            <token postag=".*acc.*" postag_regexp="yes"/>
        </pattern>
        <disambig action="filterall"/>
    </rule>

    <rulegroup name="byc moze -> qub" id="MOZE_QUB">
        <rule>
            <pattern>
                <token postag="verb:inf:imperf:nonrefl">być</token>
                <token postag="qub">może</token>
            </pattern>
            <disambig action="filterall"/>
            <example type="untouched">On może być debilem.</example>
            <example type="ambiguous" inputform="może[może/qub,móc/verb:fin:sg:ter:imperf:nonrefl]" outputform="może[może/qub]">On być <marker>może</marker> jest debilem</example>
        </rule>
        <rule>
            <pattern>
                <marker>
                    <token skip="-1">może<exception scope="next" postag_regexp="yes" postag="SENT_END|(?:interp|comp):comma|verb:inf.*"/></token>
                </marker>
                <token postag="verb:.*(?:sg|pl|imp[st]).*|pred" postag_regexp="yes"/>
            </pattern>
            <disambig postag="qub"></disambig>
            <example type="ambiguous" inputform="może[może/qub,móc/verb:fin:sg:ter:imperf:nonrefl]"
                     outputform="może[może/qub]">Byłoby się to <marker>może</marker> powiodło.</example>
            <example type="ambiguous" inputform="może[może/qub,móc/verb:fin:sg:ter:imperf:nonrefl]"
                     outputform="może[może/qub]">Kto wie, <marker>może</marker> się powiodło.</example>
        </rule>
        <rule>
            <pattern>
                <token skip="-1" postag="verb:.*(?:sg|pl|imp[st]).*|pred" postag_regexp="yes"><exception scope="next" postag_regexp="yes" postag="interp:comma|comp:comma|conj"/></token>
                <marker>
                    <token skip="-1">może
                        <exception scope="next" postag="verb:inf.*" postag_regexp="yes" />
                    </token>
                </marker>
                <token postag="SENT_END|.*comma" postag_regexp="yes"/>
            </pattern>
            <disambig action="replace"><wd pos="qub" lemma="może"/></disambig>
            <example type="ambiguous" inputform="może[może/qub,móc/verb:fin:sg:ter:imperf:nonrefl]"
                     outputform="może[może/qub]">Byłoby <marker>może</marker> lepiej bez tego.</example>
            <example type="ambiguous" inputform="może[może/qub,móc/verb:fin:sg:ter:imperf:nonrefl]"
                     outputform="może[może/qub]">Byłoby wczoraj <marker>może</marker> lepiej bez tego.</example>
            <example type="untouched">To, że on się spotkał z kucharzem może świadczyć przeciwko niemu.</example>
        </rule>
    </rulegroup>

    <rule id="moze_qub_fix" name="może po czasowniku wymagającym zwykle bezokolicznika">
        <pattern>
            <token skip="-1" postag="verb:.*(?:sg|pl|imp[st]).*|pred" postag_regexp="yes" inflected="yes" regexp="yes">mieć|móc|musieć|potrafić|pozwolić|pozwalać|zdołać|umieć|ośmielić|powinien|gotów|ważyć|raczyć|usiłować|rozkazać|śmieć|zacząć|uczyć|dozwolić|(?:po)?móc|s?próbować|chcieć|da(?:wa)?ć|iść|pójść|ośmielić|umieć|kazać|mieć|zacząć|przestać|zaczynać|przestawać|pozwolić|pozwalać|starać|jechać|nauczyć|biec|położyć|zdążyć<exception scope="next" postag_regexp="yes" postag="interp:comma|comp:comma|conj|verb:inf.*"/><exception>może</exception></token>
            <marker>
                <token postag="verb:fin:sg:ter:imperf:nonrefl">może</token>
            </marker>
        </pattern>
        <disambig action="replace"><wd pos="qub" lemma="może"/></disambig>
        <example type="ambiguous" inputform="może[może/qub,móc/verb:fin:sg:ter:imperf:nonrefl]"
                 outputform="może[może/qub]">Chyba cioci dałby się <marker>może</marker> namówić, co?</example>
        <example type="untouched">Zaczynam się zastanawiać dokąd ta rozmowa może prowadzić.</example>
    </rule>

    <rule id="moze_inf" name="może + bezokolicznik -> czasownik">
        <pattern>
            <marker>
                <token postag="verb:fin:sg:ter:imperf:nonrefl" skip="-1">może<exception scope="previous">być</exception><exception postag="&lt;ELLIPSIS&gt;|verb:(pot|fin|bedzie|praet|winien):(sg|pl).*|verb:imps.*|pcon:imperf.*|pant:perf.*|comp:comma|interp:comma" postag_regexp="yes" scope="next"/></token>
            </marker>
            <token postag="verb:inf.*" postag_regexp="yes"/>
        </pattern>
        <disambig postag="verb:fin:sg:ter:imperf:nonrefl"/>
        <example type="ambiguous" inputform="może[może/qub,móc/verb:fin:sg:ter:imperf:nonrefl]"
                 outputform="może[móc/verb:fin:sg:ter:imperf:nonrefl]">Chyba <marker>może</marker> być patriotą.</example>
        <example type="ambiguous" inputform="może[może/qub,móc/verb:fin:sg:ter:imperf:nonrefl]"
                 outputform="może[móc/verb:fin:sg:ter:imperf:nonrefl]">Chyba <marker>może</marker> w ostateczności być patriotą.</example>
        <example type="untouched">Być może leczyć się trzeba.</example>
    </rule>

    <rule id="ON" name="on to nie adj">
        <pattern>
            <token>on</token>
        </pattern>
        <disambig postag="ppron3:sg:nom:m1.m2.m3:ter:akc.nakc:praep.npraep"></disambig>
    </rule>

    <rule id="ONA" name="ona to nie adj">
        <pattern>
            <token>ona</token>
        </pattern>
        <disambig postag="ppron3:sg:nom:f:ter:akc.nakc:praep.npraep"></disambig>
    </rule>


    <rulegroup id="SUBST_NOM_VOC_VERB" name="potencjalny podmiot i orzeczenie">
        <rule> <!-- 1 -->
            <pattern>
                <marker>
                <token postag="subst:pl:nom:m1">panowie</token>
                <token regexp="yes" postag="subst:sg:nom:m1">\p{Lu}\p{Ll}+</token>
                <token postag="conj">i</token>
                <token regexp="yes" postag="subst:sg:nom:m1">\p{Lu}\p{Ll}+</token>
                <token postag="verb.*pl.*ter.*" postag_regexp="yes"/>
                </marker>
            </pattern>
            <disambig action="filterall"/>
        </rule>
        <rule> <!-- 2 -->
            <pattern case_sensitive="yes">
                <marker>
                    <unify>
                        <feature id="number"/><feature id="gender"/>
                        <token postag="subst.*nom.*|ppron.*:nom.*:ter.*" postag_regexp="yes"><exception postag="verb:winien:.*" postag_regexp="yes"/><exception regexp="yes">[tj]aki|rad</exception></token>
                        <token postag="verb:(?:praet|pot):.*ter.*" postag_regexp="yes"><exception regexp="yes">\p{Lu}\p{Ll}+</exception></token>
                    </unify>
                </marker>
                <token><exception postag="verb:(?:praet|pot|fin|bedzie|imp.|pred|winien).*" postag_regexp="yes"></exception></token>
            </pattern>
            <disambig action="unify"/>
            <example type="ambiguous" inputform="miały[miał/subst:pl:acc:m3,miał/subst:pl:nom:m3,miał/subst:pl:voc:m3,mieć/verb:praet:pl:m2.m3.f.n1.n2.p2.p3:ter:imperf:refl.nonrefl]"
                     outputform="miały[mieć/verb:praet:pl:m2.m3.f.n1.n2.p2.p3:ter:imperf:refl.nonrefl]">Wczoraj kobiety <marker>miały</marker> dużo pracy.</example>
        </rule>
        <rule> <!-- 3 -->
            <pattern case_sensitive="yes">
                <marker>
                    <unify>
                        <feature id="number"/><feature id="gender"/>
                        <token postag="subst.*nom.*|ppron.*:nom.*:ter.*" postag_regexp="yes"><exception postag="verb:winien:.*" postag_regexp="yes"/><exception regexp="yes">[tj]aki|rad</exception></token>
                        <token postag="(?:adj|ppas|pact).*:nom.*" postag_regexp="yes"/>
                        <token postag="verb:(?:praet|pot):.*ter.*" postag_regexp="yes"><exception regexp="yes">\p{Lu}\p{Ll}+</exception></token>
                    </unify>
                </marker>
                <token><exception postag="verb:(?:praet|pot|fin|bedzie|imp.|pred|winien).*" postag_regexp="yes"></exception></token>
            </pattern>
            <disambig action="unify"/>
            <example type="ambiguous" inputform="miały[miał/subst:pl:acc:m3,miał/subst:pl:nom:m3,miał/subst:pl:voc:m3,mieć/verb:praet:pl:m2.m3.f.n1.n2.p2.p3:ter:imperf:refl.nonrefl]"
                     outputform="miały[mieć/verb:praet:pl:m2.m3.f.n1.n2.p2.p3:ter:imperf:refl.nonrefl]">Wczoraj kobiety nieczyste <marker>miały</marker> dużo pracy.</example>
        </rule>
        <rule> <!-- 4 -->
            <pattern case_sensitive="yes">
                <marker>
                    <unify>
                        <feature id="number"/><feature id="gender"/>
                        <token postag="subst.*nom.*|ppron.*:nom.*:ter.*" postag_regexp="yes"><exception postag="verb:winien:.*" postag_regexp="yes"/><exception regexp="yes">[tj]aki|rad</exception></token>
                        <unify-ignore>
                            <token regexp="yes">jego|ich|jej</token>
                        </unify-ignore>
                        <token postag="verb:(?:praet|pot):.*ter.*" postag_regexp="yes"><exception regexp="yes">\p{Lu}\p{Ll}+</exception></token>
                    </unify>
                </marker>
                <token><exception postag="verb:(?:praet|pot|fin|bedzie|imp.|pred|winien).*" postag_regexp="yes"></exception></token>
            </pattern>
            <disambig action="unify"/>
            <example type="ambiguous" inputform="miały[miał/subst:pl:acc:m3,miał/subst:pl:nom:m3,miał/subst:pl:voc:m3,mieć/verb:praet:pl:m2.m3.f.n1.n2.p2.p3:ter:imperf:refl.nonrefl]"
                     outputform="miały[mieć/verb:praet:pl:m2.m3.f.n1.n2.p2.p3:ter:imperf:refl.nonrefl]">Wczoraj koty jego <marker>miały</marker> używanie.</example>
        </rule>
        <rule> <!-- 5 -->
            <pattern case_sensitive="yes">
                <marker>
                    <unify>
                        <feature id="number"/><feature id="gender"/>
                        <token postag="subst.*nom.*|ppron.*:nom.*:ter.*" postag_regexp="yes"><exception postag="verb:winien:.*" postag_regexp="yes"/><exception regexp="yes">[tj]aki</exception></token>
                        <unify-ignore>
                            <token postag="adv(?::pos)?|qub" postag_regexp="yes"><exception postag="conj|comp.*" postag_regexp="yes"/><exception>jak</exception></token>
                        </unify-ignore>
                        <token postag="verb:(?:praet|pot):.*ter.*" postag_regexp="yes"><exception regexp="yes">\p{Lu}\p{Ll}+</exception></token>
                    </unify>
                </marker>
                <token><exception postag="verb:(?:praet|pot|fin|bedzie|imp.|pred|winien).*" postag_regexp="yes"></exception></token>
            </pattern>
            <disambig action="unify"/>
            <example type="ambiguous" inputform="miały[miał/subst:pl:acc:m3,miał/subst:pl:nom:m3,miał/subst:pl:voc:m3,mieć/verb:praet:pl:m2.m3.f.n1.n2.p2.p3:ter:imperf:refl.nonrefl]"
                     outputform="miały[mieć/verb:praet:pl:m2.m3.f.n1.n2.p2.p3:ter:imperf:refl.nonrefl]">Wczoraj kobiety nadal <marker>miały</marker> dużo pracy.</example>
        </rule>
        <rule> <!-- 6 -->
            <pattern>
                <marker>
                    <unify>
                        <feature id="number"/>
                        <token postag="subst.*nom.*|ppron.*:nom.*:ter.*" postag_regexp="yes"><exception postag="verb:winien:.*" postag_regexp="yes"/><exception scope="previous" regexp="yes">był[ao]?</exception><exception scope="previous">nie</exception><exception regexp="yes">[tj]ak[ia]</exception></token>
                        <token postag="verb:fin:.*ter.*" postag_regexp="yes"><exception>je</exception><exception>mnie</exception><exception>nasza</exception><exception regexp="yes">\p{Lu}\p{Ll}+</exception></token>
                    </unify>
                </marker>
                <token><exception postag="verb:(?:praet|pot|fin|bedzie|imp.|pred|winien).*" postag_regexp="yes"></exception><exception>zerowe</exception></token>
            </pattern>
            <disambig action="unify"/>
            <example type="ambiguous" inputform="stanowi[stan/subst:sg:dat:m3,stanowić/verb:fin:sg:ter:imperf:refl.nonrefl,stanowy/adj:pl:nom.voc:m1.p1:pos]" outputform="stanowi[stanowić/verb:fin:sg:ter:imperf:refl.nonrefl]">To, co <marker>stanowi</marker> treść ich wyobraźni ma charakter intersubiektywny i postrzegalny także przez innych.</example>
            <example type="untouched">A to był kostur pastuszy.</example>
            <example type="untouched">Trzeba było odbyć tak zwaną straż broni.</example>
            <example type="untouched">Ukazało się w r. 1670 to pierwsze wydanie Myśli, tzw.* wydanie Port-Royalu*.</example>
        </rule>
        <rule> <!-- 7 -->
            <pattern>
                <token postag="SENT_START|interp:comma" postag_regexp="yes"/>
                <marker>
                    <unify>
                        <feature id="number"/>
                        <token postag="verb:fin:.*ter.*" postag_regexp="yes">
                            <exception>je</exception>
                            <exception>mnie</exception>
                            <exception>nasza</exception>
                            </token>
                        <token postag="(?:subst|ger).*nom.*|ppron.*:nom.*:ter.*" postag_regexp="yes">
                            <exception postag="verb:winien:.*|adj.*" postag_regexp="yes"/>
                            <exception regexp="yes">[tj]ak[ia]|ma|zerowe</exception>
                        </token>
                    </unify>
                </marker>
            </pattern>
            <disambig action="unify"/>
            <example type="ambiguous" inputform="Stanowi[Stan/subst:sg:dat:m1,stan/subst:sg:dat:m3,stanowić/verb:fin:sg:ter:imperf:refl.nonrefl,stanowy/adj:pl:nom.voc:m1.p1:pos]" outputform="Stanowi[stanowić/verb:fin:sg:ter:imperf:refl.nonrefl]"><marker>Stanowi</marker> ona treść ich wyobraźni.</example>
            <example type="untouched">A to był kostur pastuszy.</example>
            <example type="untouched">Trzeba było odbyć tak zwaną straż broni.</example>
            <example type="untouched">Ukazało się w r. 1670 to pierwsze wydanie Myśli, tzw.* wydanie Port-Royalu*.</example>
            <example type="untouched">Może ma rację, a może nie do końca.</example>
        </rule>

        <rule> <!-- 8 -->
            <pattern>
                    <unify>
                        <feature id="number"><type id="sg"/></feature>
                        <feature id="gender"/>
                        <token postag="(?:subst|ger|depr):.*" postag_regexp="yes"/>
                        <!-- FIXME:  skip="-1" -->
                        <unify-ignore>
                            <token>,</token>
                        </unify-ignore>
                        <token postag="adj:.*nom.*" postag_regexp="yes" inflected="yes" regexp="yes">jaki|który</token>
                    </unify>
                <marker>
                        <token postag="verb:fin:sg:ter.*" postag_regexp="yes"><exception>je</exception><exception>mnie</exception><exception>nasza</exception><exception regexp="yes">\p{Lu}\p{Ll}+</exception></token>
                </marker>
                <token><exception postag="verb:(?:praet|pot|fin|bedzie|imp.|pred|winien).*" postag_regexp="yes"></exception></token>
            </pattern>
            <disambig action="filter" postag="verb:fin:sg:ter.*"/>
            <example type="ambiguous" inputform="stanowi[stan/subst:sg:dat:m3,stanowić/verb:fin:sg:ter:imperf:refl.nonrefl,stanowy/adj:pl:nom.voc:m1.p1:pos]" outputform="stanowi[stanowić/verb:fin:sg:ter:imperf:refl.nonrefl]">Cel, jaki <marker>stanowi</marker> treść ich wyobraźni, ma charakter intersubiektywny.</example>
            <example type="untouched">A to był kostur pastuszy.</example>
            <example type="untouched">Trzeba było odbyć tak zwaną straż broni.</example>
            <example type="untouched">Ukazało się w r. 1670 to pierwsze wydanie Myśli, tzw.* wydanie Port-Royalu*.</example>
        </rule>
        <rule> <!-- 9 -->
            <pattern>
                <unify>
                    <feature id="number"><type id="pl"/></feature>
                    <token postag="(?:subst|ger|depr):.*" postag_regexp="yes"/>
                    <!-- FIXME:  skip="-1" -->
                    <unify-ignore>
                        <token>,</token>
                    </unify-ignore>
                    <token postag="adj:.*nom.*" postag_regexp="yes" inflected="yes" regexp="yes">jaki|który</token>
                </unify>
               <marker>
                   <token postag="verb:fin:pl.*ter.*" postag_regexp="yes"><exception>je</exception><exception>mnie</exception><exception>nasza</exception><exception regexp="yes">\p{Lu}\p{Ll}+</exception></token>
                </marker>
                <token><exception postag="verb:(?:praet|pot|fin|bedzie|imp.|pred|winien).*" postag_regexp="yes"></exception></token>
            </pattern>
            <disambig action="filter" postag="verb:fin:pl:ter.*"/>
            <example type="ambiguous" inputform="muszą[musieć/verb:fin:pl:ter:imperf:nonrefl,musić/verb:fin:pl:ter:imperf:refl.nonrefl,muszy/adj:sg:acc:f:pos,muszy/adj:sg:inst:f:pos]" outputform="muszą[musieć/verb:fin:pl:ter:imperf:nonrefl,musić/verb:fin:pl:ter:imperf:refl.nonrefl]">Cele, jakie <marker>muszą</marker>, jak mi się zdaje, stanowić treść ich wyobraźni, mają charakter intersubiektywny.</example>
            <example type="untouched">A to był kostur pastuszy.</example>
            <example type="untouched">Trzeba było odbyć tak zwaną straż broni.</example>
            <example type="untouched">Ukazało się w r. 1670 to pierwsze wydanie Myśli, tzw.* wydanie Port-Royalu*.</example>
        </rule>



        <rule> <!-- 10 -->
            <pattern>
                <marker>
                    <unify>
                        <feature id="number"/>
                        <token postag="subst.*nom.*|ppron.*:nom.*:ter.*" postag_regexp="yes"><exception postag="verb:winien:.*" postag_regexp="yes"/><exception scope="previous" regexp="yes">był[ao]?</exception><exception scope="previous">nie</exception><exception regexp="yes">[tj]ak[ia]</exception></token>
                        <token postag="(?:adj|ppas|pact).*:nom.*" postag_regexp="yes"/>
                        <token postag="verb:fin:.*ter.*" postag_regexp="yes"><exception>je</exception><exception>mnie</exception><exception>nasza</exception><exception regexp="yes">\p{Lu}\p{Ll}+</exception></token>
                    </unify>
                </marker>
                <token><exception postag="verb:(?:praet|pot|fin|bedzie|imp.|pred|winien).*" postag_regexp="yes"></exception><exception>zerowe</exception></token>
            </pattern>
            <disambig action="unify"/>
            <example type="ambiguous" inputform="moje[mój/adj:pl:acc:m2.m3.f.n1.n2.p2.p3:pos,mój/adj:pl:nom.voc:m2.m3.f.n1.n2.p2.p3:pos]"
                     outputform="moje[mój/adj:pl:nom.voc:m2.m3.f.n1.n2.p2.p3:pos]">Nerwy <marker>moje</marker> wydają się chore.</example>
            <example type="untouched">A to był kostur pastuszy.</example>
            <example type="untouched">Trzeba było odbyć tak zwaną straż broni.</example>
            <example type="untouched">Ukazało się w r. 1670 to pierwsze wydanie Myśli, tzw.* wydanie Port-Royalu*.</example>
        </rule>
        <rule> <!-- 11 -->
            <pattern>
                <marker>
                    <unify>
                        <feature id="number"/>
                        <token postag="subst.*nom.*|ppron.*:nom.*:ter.*" postag_regexp="yes"><exception postag="verb:winien:.*" postag_regexp="yes"/><exception scope="previous" regexp="yes">był[ao]?|jest</exception><exception scope="previous">nie</exception><exception regexp="yes">[tj]ak[ia]</exception></token>
                        <unify-ignore>
                            <token postag="adv.*|qub" postag_regexp="yes"><exception postag="conj|comp.*" postag_regexp="yes"/><exception>jak</exception></token>
                        </unify-ignore>
                        <token postag="verb:fin:.*ter.*" postag_regexp="yes"><exception>je</exception><exception>mnie</exception><exception>nasza</exception><exception regexp="yes">\p{Lu}\p{Ll}+</exception></token>
                    </unify>
                </marker>
                <token><exception postag="verb:(?:praet|pot|fin|bedzie|imp.|pred|winien).*" postag_regexp="yes"></exception></token>
            </pattern>
            <disambig action="unify"/>
            <example type="ambiguous" inputform="stanowi[stan/subst:sg:dat:m3,stanowić/verb:fin:sg:ter:imperf:refl.nonrefl,stanowy/adj:pl:nom.voc:m1.p1:pos]" outputform="stanowi[stanowić/verb:fin:sg:ter:imperf:refl.nonrefl]">To, co wciąż <marker>stanowi</marker> treść ich wyobraźni ma charakter intersubiektywny i postrzegalny także przez innych.</example>
            <example type="untouched">A to był kostur pastuszy.</example>
            <example type="untouched">Trzeba było odbyć tak zwaną straż broni.</example>
            <example type="untouched">Ukazało się w r. 1670 to pierwsze wydanie Myśli, tzw.* wydanie Port-Royalu*.</example>
        </rule>
        <rule><!-- 12 -->
            <pattern>
                <marker>
                    <unify>
                        <feature id="number"/>
                        <token postag="subst.*nom.*|ppron.*:nom.*:ter.*" postag_regexp="yes"><exception postag="verb:winien:.*" postag_regexp="yes"/><exception scope="previous" regexp="yes">był[ao]?|jest</exception><exception scope="previous">nie</exception><exception regexp="yes">[tj]ak[ia]</exception></token>
                        <unify-ignore>
                            <token regexp="yes">jego|jej|ich</token>
                        </unify-ignore>
                        <token postag="verb:fin:.*ter.*" postag_regexp="yes"><exception>je</exception><exception>mnie</exception><exception>nasza</exception><exception regexp="yes">\p{Lu}\p{Ll}+</exception></token>
                    </unify>
                </marker>
                <token><exception postag="verb:(?:praet|pot|fin|bedzie|imp.|pred|winien).*" postag_regexp="yes"></exception></token>
            </pattern>
            <disambig action="unify"/>
            <example type="ambiguous" inputform="kot[kot/subst:sg:nom:m1,kot/subst:sg:nom:m2,kota/subst:pl:gen:f]"
                     outputform="kot[kot/subst:sg:nom:m1,kot/subst:sg:nom:m2]">Nie lubię sposobu, w jaki <marker>kot</marker> jego jada myszy.</example>
            <example type="untouched">A to był kostur pastuszy.</example>
            <example type="untouched">Trzeba było odbyć tak zwaną straż broni.</example>
            <example type="untouched">Ukazało się w r. 1670 to pierwsze wydanie Myśli, tzw.* wydanie Port-Royalu*.</example>
        </rule>

        <rule> <!-- 12 -->
            <pattern>
                <marker>
                    <unify>
                        <feature id="number"/>
                        <token postag="subst.*nom.*|ppron.*:nom.*:ter.*" postag_regexp="yes"><exception postag="verb:winien:.*" postag_regexp="yes"/><exception scope="previous" regexp="yes">był[ao]?</exception><exception scope="previous">nie</exception><exception regexp="yes">[tj]ak[ia]</exception></token>
                        <token postag="verb:bedzie:.*ter.*" postag_regexp="yes"><exception>je</exception><exception>mnie</exception><exception>nasza</exception><exception regexp="yes">\p{Lu}\p{Ll}+</exception></token>
                    </unify>
                </marker>
                <token><exception postag="verb:(?:pot|fin|bedzie|imp.|pred|winien).*" postag_regexp="yes"></exception></token>
            </pattern>
            <disambig action="unify"/>
            <example type="ambiguous" inputform="robot[robot/subst:sg:acc:m3,robot/subst:sg:nom:m2,robot/subst:sg:nom:m3]"
                     outputform="robot[robot/subst:sg:nom:m2,robot/subst:sg:nom:m3]">Mój <marker>robot</marker> będzie przygotowywać posiłki.</example>
            <example type="untouched">A to był kostur pastuszy.</example>
            <example type="untouched">Trzeba było odbyć tak zwaną straż broni.</example>
            <example type="untouched">Ukazało się w r. 1670 to pierwsze wydanie Myśli, tzw.* wydanie Port-Royalu*.</example>
        </rule>
        <rule> <!-- 13 -->
            <pattern>
                <marker>
                    <unify>
                        <feature id="number"/>
                        <token postag="subst.*nom.*|ppron.*:nom.*:ter.*" postag_regexp="yes"><exception postag="verb:winien:.*" postag_regexp="yes"/><exception scope="previous" regexp="yes">był[ao]?</exception><exception scope="previous">nie</exception><exception regexp="yes">[tj]ak[ia]</exception></token>
                        <unify-ignore>
                            <token postag="adv(?::pos)?|qub" postag_regexp="yes"><exception postag="conj|comp.*" postag_regexp="yes"/><exception>jak</exception></token>
                        </unify-ignore>
                        <token postag="verb:bedzie:.*ter.*" postag_regexp="yes"><exception>je</exception><exception>mnie</exception><exception>nasza</exception><exception regexp="yes">\p{Lu}\p{Ll}+</exception></token>
                    </unify>
                </marker>
                <token><exception postag="verb:(?:pot|fin|bedzie|imp.|pred|winien).*" postag_regexp="yes"></exception></token>
            </pattern>
            <disambig action="unify"/>
            <example type="ambiguous" inputform="robot[robot/subst:sg:acc:m3,robot/subst:sg:nom:m2,robot/subst:sg:nom:m3]"
                     outputform="robot[robot/subst:sg:nom:m2,robot/subst:sg:nom:m3]">Mój <marker>robot</marker> nadal będzie przygotowywać posiłki.</example>
            <example type="untouched">A to był kostur pastuszy.</example>
            <example type="untouched">Trzeba było odbyć tak zwaną straż broni.</example>
            <example type="untouched">Ukazało się w r. 1670 to pierwsze wydanie Myśli, tzw.* wydanie Port-Royalu*.</example>
        </rule>
        <rule> <!-- 14 -->
            <pattern>
                <marker>
                    <unify>
                        <feature id="number"/><feature id="person"/>
                        <token postag="ppron12.*:nom.*" postag_regexp="yes"></token>
                        <token postag="verb:.*" postag_regexp="yes"><exception>je</exception><exception>mnie</exception><exception>nasza</exception><exception regexp="yes">\p{Lu}\p{Ll}+</exception></token>
                    </unify>
                </marker>
            </pattern>
            <disambig action="unify"/>
            <example type="ambiguous" inputform="miałem[miał/subst:sg:inst:m3,mieć/verb:praet:sg:m1.m2.m3:pri:imperf:refl.nonrefl]"
                     outputform="miałem[mieć/verb:praet:sg:m1.m2.m3:pri:imperf:refl.nonrefl]">Myślisz, że to ja <marker>miałem</marker> zrobić?</example>
        </rule>
        <rule> <!-- 15 -->
            <pattern>
                <marker>
                    <unify>
                        <feature id="number"/><feature id="person"/>
                        <token postag="ppron12.*:nom.*" postag_regexp="yes"></token>
                        <unify-ignore>
                            <token postag="adv(?::pos)?|qub" postag_regexp="yes"><exception postag="conj|comp.*" postag_regexp="yes"/><exception>jak</exception></token>
                        </unify-ignore>
                        <token postag="verb:.*" postag_regexp="yes"><exception>je</exception><exception>mnie</exception><exception>nasza</exception><exception regexp="yes">\p{Lu}\p{Ll}+</exception></token>
                    </unify>
                </marker>
            </pattern>
            <disambig action="unify"/>
            <example type="ambiguous" inputform="miałem[miał/subst:sg:inst:m3,mieć/verb:praet:sg:m1.m2.m3:pri:imperf:refl.nonrefl]"
                     outputform="miałem[mieć/verb:praet:sg:m1.m2.m3:pri:imperf:refl.nonrefl]">Myślisz, że to ja naprawdę <marker>miałem</marker> zrobić?</example>
        </rule>
        <rule> <!-- 16 -->
            <pattern>
                <marker>
                    <unify>
                        <feature id="number"/><feature id="gender"/>
                        <token postag="subst.*nom.*|ppron.*:nom.*:ter.*" postag_regexp="yes"><exception postag="verb:winien:.*" postag_regexp="yes"/><exception scope="previous" regexp="yes">był[ao]?</exception><exception scope="previous">nie</exception><exception regexp="yes">[tj]ak[ia]</exception></token>
                        <token skip="-1" postag="verb:winien.*:ter.*" postag_regexp="yes"></token>
                    </unify>
                </marker>
                <token postag="verb:inf.*" postag_regexp="yes"/>
            </pattern>
            <disambig action="unify"/>
            <example type="ambiguous" inputform="winna[winien/verb:winien:sg:f:ter:imperf:nonrefl,winna/subst:sg:nom:f,winna/subst:sg:voc:f,winny/adj:sg:nom.voc:f:pos]"
                     outputform="winna[winien/verb:winien:sg:f:ter:imperf:nonrefl]">Gazeta <marker>winna</marker> zniknąć.</example>
        </rule>
        <rule> <!-- 17 -->
            <pattern>
                <marker>
                    <unify>
                        <feature id="number"/><feature id="gender"/>
                        <token postag="subst.*nom.*|ppron.*:nom.*:ter.*" postag_regexp="yes"><exception postag="verb:winien:.*" postag_regexp="yes"/><exception scope="previous" regexp="yes">był[ao]?</exception><exception scope="previous">nie</exception><exception regexp="yes">[tj]ak[ia]</exception></token>
                        <unify-ignore>
                            <token postag="adv(?::pos)?|qub" postag_regexp="yes"><exception postag="conj|comp.*" postag_regexp="yes"/><exception>jak</exception></token>
                        </unify-ignore>
                        <token skip="-1" postag="verb:winien.*:ter.*" postag_regexp="yes"></token>
                    </unify>
                </marker>
                <token postag="verb:inf.*" postag_regexp="yes"/>
            </pattern>
            <disambig action="unify"/>
            <example type="ambiguous" inputform="winna[winien/verb:winien:sg:f:ter:imperf:nonrefl,winna/subst:sg:nom:f,winna/subst:sg:voc:f,winny/adj:sg:nom.voc:f:pos]"
                     outputform="winna[winien/verb:winien:sg:f:ter:imperf:nonrefl]">Gazeta nadal <marker>winna</marker> zniknąć.</example>
        </rule>
        <rule> <!-- 18 -->
            <pattern>
                <token postag="SENT_START|interp:comma" postag_regexp="yes"/>
                <marker>
                    <unify>
                        <feature id="number"/>
                        <token postag="verb:fin:.*ter.*" postag_regexp="yes">
                            <exception>je</exception>
                            <exception>mnie</exception>
                            <exception>nasza</exception>
                        </token>
                        <token postag="(?:pact|ppas|adj).*nom.*" postag_regexp="yes">
                            <exception postag="verb:winien:.*" postag_regexp="yes"/>
                            <exception regexp="yes">[tj]ak[ia]|ma|zerowe</exception>
                        </token>
                        <token postag="(?:subst|ger).*nom.*" postag_regexp="yes"/>
                    </unify>
                </marker>
            </pattern>
            <disambig action="unify"/>
            <example type="ambiguous" inputform="Stanowi[Stan/subst:sg:dat:m1,stan/subst:sg:dat:m3,stanowić/verb:fin:sg:ter:imperf:refl.nonrefl,stanowy/adj:pl:nom.voc:m1.p1:pos]" outputform="Stanowi[stanowić/verb:fin:sg:ter:imperf:refl.nonrefl]"><marker>Stanowi</marker> ta treść ważny przykład.</example>
            <example type="ambiguous" inputform="dziecko[dziecko/subst:sg:acc:n1,dziecko/subst:sg:nom:n1,dziecko/subst:sg:voc:n1]"
                     outputform="dziecko[dziecko/subst:sg:nom:n1]">Mówi piękne <marker>dziecko</marker>.</example>
            <example type="untouched">A to był kostur pastuszy.</example>
            <example type="untouched">Trzeba było odbyć tak zwaną straż broni.</example>
            <example type="untouched">Ukazało się w r. 1670 to pierwsze wydanie Myśli, tzw.* wydanie Port-Royalu*.</example>
            <example type="untouched">Może ma rację, a może nie do końca.</example>
        </rule>
        <rule> <!-- 19 --> <!-- liczebnik główny congr w roli podmiotu -->
            <pattern>
                <token postag_regexp="yes" postag="num:pl:nom.*:congr"/>
                <token postag="verb.*pl.*" postag_regexp="yes"><exception postag="verb:impt:pl.*" postag_regexp="yes"/></token>
            </pattern>
            <disambig action="filterall"/>
        </rule>
        <rule> <!-- 20 --> <!-- liczebnik główny congr w roli podmiotu -->
            <pattern>
                <token postag_regexp="yes" postag="num:pl:nom.*:rec"/>
                <token postag="verb.*sg.*" postag_regexp="yes"><exception postag="verb:impt:sg.*" postag_regexp="yes"/></token>
            </pattern>
            <disambig action="filterall"/>
            <example type="ambiguous" inputform="gra[gra/subst:sg:nom:f,grać/verb:fin:sg:ter:imperf:refl.nonrefl]"
            outputform="gra[grać/verb:fin:sg:ter:imperf:refl.nonrefl]">Osiem <marker>gra</marker> w obronie.</example>
            <example type="untouched">To szczątki dwóch wierz.</example>
        </rule>
    </rulegroup>

    <rule id="unify_ten_subst" name="unifikacja ten + rzeczownik">
        <pattern>
            <marker>
                <unify>
                    <feature id="number"/><feature id="gender"/>
                    <feature id="case">  <!-- bez wołacza! on nie występuje razem z "ten" -->
                        <type id="nom"/>
                        <type id="gen"/>
                        <type id="acc"/>
                        <type id="dat"/>
                        <type id="loc"/>
                        <type id="inst"/>
                    </feature>
                    <token postag="adj.*" postag_regexp="yes" inflected="yes">ten</token>
                    <token postag="(subst|depr|ger).*" postag_regexp="yes"><exception negate_pos="yes" postag_regexp="yes" postag="(?:subst|ger|depr).*|SENT_END"/></token>
                </unify>
            </marker>
        </pattern>
        <disambig action="unify"/>
        <example type="ambiguous" inputform="Ci[ci/qub,ten/adj:pl:nom.voc:m1.p1:pos,ty/ppron12:sg:dat:m1.m2.m3.f.n1.n2:sec:nakc]"
                 outputform="Ci[ten/adj:pl:nom.voc:m1.p1:pos]"><marker>Ci</marker> smarkacze byli nieznośni.</example>
    </rule>

    <rule id="unify_ten_adj_subst" name="unifikacja ten + przymiotnik+ rzeczownik">
        <pattern>
            <marker>
                <unify>
                    <feature id="number"/><feature id="gender"/>
                    <feature id="case">  <!-- bez wołacza! on nie występuje razem z "ten" -->
                        <type id="nom"/>
                        <type id="gen"/>
                        <type id="acc"/>
                        <type id="dat"/>
                        <type id="loc"/>
                        <type id="inst"/>
                    </feature>
                    <token postag="adj.*" postag_regexp="yes" inflected="yes">ten</token>
                    <token postag="adj.*" postag_regexp="yes"/>
                    <token postag="(subst|depr|ger).*" postag_regexp="yes"><exception negate_pos="yes" postag_regexp="yes" postag="(?:subst|ger|depr).*|SENT_END"/></token>
                </unify>
            </marker>
        </pattern>
        <disambig action="unify"/>
        <example type="ambiguous" inputform="Ci[ci/qub,ten/adj:pl:nom.voc:m1.p1:pos,ty/ppron12:sg:dat:m1.m2.m3.f.n1.n2:sec:nakc]"
                 outputform="Ci[ten/adj:pl:nom.voc:m1.p1:pos]"><marker>Ci</marker> cholerni smarkacze byli nieznośni.</example>
    </rule>

    <rule id="unify_subst_ktory_jaki" name="unifikacja rzeczownika nadrzędnego z który i jaki">
        <pattern>
            <unify>
                <feature id="gender"/><feature id="number"/>
                <token postag="(?:subst|depr|ger|adj|ppas|pact|num:pl).*" postag_regexp="yes"/>
                <unify-ignore>
                <token>,</token>
                </unify-ignore>
                <token inflected="yes" regexp="yes">który|jaki</token>
            </unify>
        </pattern>
        <disambig action="unify"/>
        <example type="ambiguous" inputform="Posłowie[poseł/subst:pl:nom:m1,poseł/subst:pl:voc:m1,posłowie/subst:sg:acc:n2,posłowie/subst:sg:nom:n2,posłowie/subst:sg:voc:n2]"
                 outputform="Posłowie[poseł/subst:pl:nom:m1,poseł/subst:pl:voc:m1]"><marker>Posłowie</marker>, którzy popierali Dziubka, nie uznali wyniku głosowania za swoją porażkę.</example>
    </rule>

    <rule name="jakim/którym być z narzędnikiem dla orzecznika" id="jaki_ktory_BYC_INST">
        <pattern>
            <marker>
                <token postag="adj.*inst.*" postag_regexp="yes" regexp="yes" inflected="yes">jaki|który</token>
                <token inflected="yes" postag="(?:verb|pact).*" postag_regexp="yes" regexp="yes">by(wa)?ć</token>
            </marker>
            <token><exception inflected="yes" regexp="yes">posłuszny|wierny</exception></token>
        </pattern>
        <disambig action="filterall"/>
        <example type="untouched">Istnieją myśli, którym jesteśmy posłuszni, nie znając ich; są w nas bez naszej wiedzy.</example>
    </rule>

    <rule name="bądź i lub jako spójniki w ogóle między dwoma przymiotnikami" id="badz_lub">
        <pattern>
            <token postag="(?:adj|pact|subst|ger).*" postag_regexp="yes"><exception negate_pos="yes" postag_regexp="yes" postag="(?:adj|pact|subst|depr|ger).*"/></token>
            <token min="0" max="1">,</token>
            <marker><token regexp="yes" postag="conj">bądź|lub</token></marker>
            <token postag="(?:adj|pact|subst|ger).*" postag_regexp="yes"><exception negate_pos="yes" postag_regexp="yes" postag="(?:adj|pact|subst|depr|ger).*|SENT_END"/></token>
        </pattern>
        <disambig action="filter" postag="conj|comp:comma"></disambig>
        <example type="untouched">Bądź zdrów!</example>
        <example type="untouched">Ludwiku, bądź zdrów!</example>
        <example type="untouched">Lub lubelskie!</example>
        <example type="untouched">Ludwiku, lub lubelskie!</example>
        <example type="ambiguous" inputform="bądź[być/verb:impt:sg:sec:imperf:nonrefl,bądź/comp:comma,bądź/conj,bądź/qub]"
                 outputform="bądź[bądź/comp:comma,bądź/conj]">Połysk: najczęściej szklisty, tłusty <marker>bądź</marker> perłowy</example>
    </rule>

    <rule name="Bądź i lub jako spójnik" id="badz_koordynacja_subst">
        <pattern>
            <unify>
                <feature id="case"><type id="acc"/><type id="inst"/><type id="gen"/><type id="dat"/><type id="loc"/></feature>
                <feature id="number"/>
                <token postag="(?:subst|ger).*" postag_regexp="yes"><exception negate_pos="yes" postag_regexp="yes" postag="(?:adj|depr|subst|ger).*"/><exception scope="previous" postag_regexp="yes" postag="(?:ger|subst).*"/></token>
                <unify-ignore>
                    <token min="0" max="1">,</token>
                    <marker><token regexp="yes">bądź|lub|i|czy</token></marker>
                </unify-ignore>
                <token postag="(?:subst|ger).*" postag_regexp="yes"><exception negate_pos="yes" postag_regexp="yes" postag="(?:adj|depr|subst|ger).*|SENT_END"/><exception regexp="yes">nic|co</exception></token>
            </unify>
            <token><exception postag="(verb|pant).*" postag_regexp="yes"/></token>
        </pattern>
        <disambig action="filter" postag="conj"/>
        <example type="ambiguous" inputform="bądź[bądź/comp:comma,bądź/conj]"
                 outputform="bądź[bądź/conj]">Restrykcyjne przepisy aborcyjne mają też niektóre terytoria <marker>bądź</marker> regiony.</example>
        <example type="ambiguous" inputform="bądź[bądź/comp:comma,bądź/conj]"
                 outputform="bądź[bądź/conj]">Restrykcyjne przepisy aborcyjne mają też niektóre terytoria, <marker>bądź</marker> regiony.</example>
        <example type="untouched">Pokazały się owoce nauki i wyniki poszybowały w górę.</example>
        <example type="untouched">Zacisnął zęby i ramiona zwarłszy, zatrzymał w piersiach tchnienie.</example>
    </rule>

    <rule name="Bądź, lub, i, czy jako spójniki w ramach grupy nominalnej" id="badz_koordynacja_adj_subst">
        <pattern>
            <unify>
                <feature id="case"><type id="acc"/><type id="inst"/><type id="gen"/><type id="dat"/><type id="loc"/><type id="nom"/></feature>
                <feature id="gender"/>
                <feature id="number"/>
                <token postag="(?:adj|pact).*" postag_regexp="yes"><exception negate_pos="yes" postag_regexp="yes" postag="(?:adj|pact|subst).*"/></token>
                <unify-ignore>
                    <token min="0" max="1">,</token>
                    <marker><token regexp="yes">bądź|lub|i|czy</token></marker>
                </unify-ignore>
                <token postag="(?:adj|pact).*" postag_regexp="yes"><exception negate_pos="yes" postag_regexp="yes" postag="(?:adj|pact|subst).*"/></token>
                <token postag="(?:subst|ger|depr).*" postag_regexp="yes"><exception negate_pos="yes" postag_regexp="yes" postag="(?:adj|subst|depr|ger).*|SENT_END"/></token>
            </unify>
        </pattern>
        <disambig action="filter" postag="conj"/>
        <example type="ambiguous" inputform="bądź[bądź/comp:comma,bądź/conj]"
                 outputform="bądź[bądź/conj]">Restrykcyjne przepisy aborcyjne mają też niektóre autonomiczne <marker>bądź</marker> zależne terytoria.</example>
        <example type="ambiguous" inputform="bądź[bądź/comp:comma,bądź/conj]"
                 outputform="bądź[bądź/conj]">Restrykcyjne przepisy aborcyjne mają też niektóre autonomiczne, <marker>bądź</marker> zależne terytoria.</example>

    </rule>

    <rule name="Bądź, lub, i, czy jako spójniki w ramach grupy nominalnej" id="badz_koordynacja_subst_adj">
        <pattern>
            <unify>
                <feature id="case"><type id="acc"/><type id="inst"/><type id="gen"/><type id="dat"/><type id="loc"/><type id="nom"/></feature>
                <feature id="gender"/>
                <feature id="number"/>
                <token postag="(?:subst|ger|depr).*" postag_regexp="yes"><exception negate_pos="yes" postag_regexp="yes" postag="(?:adj|subst|depr|ger).*|SENT_END"/></token>
                <token postag="(?:adj|pact).*" postag_regexp="yes"><exception negate_pos="yes" postag_regexp="yes" postag="(?:adj|pact|subst).*"/></token>
                <unify-ignore>
                    <token min="0" max="1">,</token>
                    <marker><token regexp="yes">bądź|lub|i|czy</token></marker>
                </unify-ignore>
                <token postag="(?:adj|pact).*" postag_regexp="yes"><exception negate_pos="yes" postag_regexp="yes" postag="(?:adj|pact|subst).*"/></token>

            </unify>
        </pattern>
        <disambig action="filter" postag="conj"/>
        <example type="ambiguous" inputform="bądź[bądź/comp:comma,bądź/conj]"
                 outputform="bądź[bądź/conj]">Restrykcyjne przepisy aborcyjne mają też niektóre terytoria autonomiczne <marker>bądź</marker> zależne.</example>
        <example type="ambiguous" inputform="bądź[bądź/comp:comma,bądź/conj]"
                 outputform="bądź[bądź/conj]">Restrykcyjne przepisy aborcyjne mają też niektóre terytoria autonomiczne, <marker>bądź</marker> zależne.</example>
    </rule>

    <rule name="Bądź, lub, i, czy jako spójniki w ramach grupy nominalnej" id="badz_koordynacja_adv_adj_com_com">
        <pattern>
            <token regexp="yes">coraz|dużo|minimalnie|nieco|trochę|znacznie|wiele|.*krotnie</token>
            <marker>
                <unify>
                    <feature id="case"><type id="acc"/><type id="inst"/><type id="gen"/><type id="dat"/><type id="loc"/><type id="nom"/></feature>
                    <feature id="gender"/>
                    <feature id="number"/>
                    <token postag="adj.*:com" postag_regexp="yes"><exception negate_pos="yes" postag_regexp="yes" postag="(?:adj|pact|subst).*"/></token>
                    <unify-ignore>
                        <token min="0" max="1">,</token>
                        <marker><token regexp="yes">bądź|lub|i|czy</token></marker>
                    </unify-ignore>
                    <token postag="adj.*:com" postag_regexp="yes"><exception negate_pos="yes" postag_regexp="yes" postag="(?:adj|pact|subst).*"/></token>
                </unify>
            </marker>
        </pattern>
        <disambig action="filter" postag="conj"/>
        <example type="ambiguous" inputform="bądź[bądź/comp:comma,bądź/conj]"
                 outputform="bądź[bądź/conj]">Restrykcyjne przepisy aborcyjne mają też niektóre terytoria znacznie większe <marker>bądź</marker> piękniejsze.</example>
    </rule>


    <rule name="Bądź i lub jako spójnik" id="badz_koordynacja_ppas">
        <pattern>
            <unify>
                <feature id="case"><type id="acc"/><type id="inst"/><type id="gen"/><type id="dat"/><type id="loc"/><type id="nom"/></feature>
                <token postag="(?:ppas).*" postag_regexp="yes"><exception negate_pos="yes" postag_regexp="yes" postag="(?:adj|ppas).*"/></token>
                <unify-ignore>
                    <token min="0" max="1">,</token>
                    <marker><token regexp="yes">bądź|lub|i|czy</token></marker>
                </unify-ignore>
                <token postag="(?:ppas).*" postag_regexp="yes"><exception negate_pos="yes" postag_regexp="yes" postag="(?:adj|ppas).*|SENT_END"/></token>
            </unify>
        </pattern>
        <disambig action="filter" postag="conj"/>
        <example type="ambiguous" inputform="bądź[być/verb:impt:sg:sec:imperf:nonrefl,bądź/comp:comma,bądź/conj,bądź/qub]"
                 outputform="bądź[bądź/conj]">Restrykcyjne przepisy aborcyjne mają też niektóre terytoria rządzone <marker>bądź</marker> podbijane.</example>
        <example type="ambiguous" inputform="bądź[być/verb:impt:sg:sec:imperf:nonrefl,bądź/comp:comma,bądź/conj,bądź/qub]"
                 outputform="bądź[bądź/conj]">Restrykcyjne przepisy aborcyjne mają też niektóre terytoria rządzone, <marker>bądź</marker> podbijane.</example>
    </rule>


    <rule name="to z większą grupą nominalną jako predykatyw" id="to_pred_2">
        <pattern>
            <unify><feature id="case"><type id="nom"/></feature><feature id="gender"/>
                <feature id="number"/>
                <token postag="subst.*" postag_regexp="yes"><exception regexp="yes">to|jaki</exception></token>
                <token postag="adj.*" postag_regexp="yes"/>
            </unify>
            <marker>
                <token>to</token>
            </marker>
            <token skip="-1" postag="(subst|ppas|pact|adj).*nom.*" postag_regexp="yes"><exception>to</exception>
                <exception scope="next" postag="verb:.*(sg|pl).*|verb:imps.*" postag_regexp="yes"/></token>
            <token postag="interp:comma|SENT_END" postag_regexp="yes"/>
        </pattern>
        <disambig action="replace"><wd pos="pred"/></disambig>
    </rule>

    <rule name="to z większą grupą nominalną jako predykatyw" id="to_pred_2a">
        <pattern>
            <unify><feature id="case"><type id="nom"/></feature><feature id="gender"/>
                <feature id="number"/>
                <token postag="subst.*" postag_regexp="yes"><exception regexp="yes">to|jaki</exception></token>
                <token postag="adj.*" postag_regexp="yes"/>
            </unify>
            <marker>
                <token>to</token>
            </marker>
            <token postag="adv.*|qub" postag_regexp="yes"/>
            <token skip="-1" postag="(subst|ppas|pact|adj).*nom.*" postag_regexp="yes"><exception>to</exception>
                <exception scope="next" postag="verb:.*(sg|pl).*|verb:imps.*" postag_regexp="yes"/></token>
            <token postag="interp:comma|SENT_END" postag_regexp="yes"/>
        </pattern>
        <disambig action="replace"><wd pos="pred"/></disambig>
    </rule>


    <rule name="to z większą grupą nominalną jako predykatyw" id="to_pred_3">
        <pattern>
            <unify><feature id="case"><type id="nom"/></feature><feature id="gender"/>
                <feature id="number"/>
                <token postag="subst.*" postag_regexp="yes"><exception regexp="yes">to|jaki</exception></token>
                <token postag="adj.*" postag_regexp="yes"/>
            </unify>
            <marker>
                <token>to</token>
            </marker>
            <unify><feature id="case"><type id="nom"/></feature><feature id="gender"/>
                <feature id="number"/>
                <token postag="(adj|pact|ppas).*" postag_regexp="yes"><exception regexp="yes">to|jaki</exception></token>
                <token skip="-1" postag="subst.*" postag_regexp="yes"><exception scope="next" postag="verb:.*(sg|pl).*|verb:imps.*" postag_regexp="yes"/></token>
            </unify>
            <token postag="interp:comma|SENT_END" postag_regexp="yes"/>
        </pattern>
        <disambig action="replace"><wd pos="pred"/></disambig>
    </rule>

    <rule name="to z większą grupą nominalną jako predykatyw" id="to_pred_4">
        <pattern>
            <unify><feature id="case"><type id="nom"/></feature><feature id="gender"/>
                <feature id="number"/>
                <token postag="subst.*" postag_regexp="yes"><exception regexp="yes">to|jaki</exception></token>
                <token postag="adj.*" postag_regexp="yes"/>
            </unify>
            <marker>
                <token>to</token>
            </marker>
            <token postag="adv.*|qub" postag_regexp="yes"/>
            <unify><feature id="case"><type id="nom"/></feature><feature id="gender"/>
                <feature id="number"/>
                <token postag="(adj|pact|ppas).*" postag_regexp="yes"><exception regexp="yes">to|jaki</exception></token>
                <token skip="-1" postag="subst.*" postag_regexp="yes"><exception scope="next" postag="verb:.*(sg|pl).*|verb:imps.*" postag_regexp="yes"/></token>
            </unify>
            <token postag="interp:comma|SENT_END" postag_regexp="yes"/>
        </pattern>
        <disambig action="replace"><wd pos="pred"/></disambig>
    </rule>

    <rule name="to jako predykatyw - uzgodnienie" id="to_pred_nominativ">
        <pattern>
            <marker>
                <token postag="(subst|adj|pact|ppas|num).*nom.*" postag_regexp="yes"><exception>to</exception></token>
                <token postag="pred">to</token>
                <token postag="(subst|adj|ppas|pact).*nom.*" postag_regexp="yes"><exception>to</exception></token>
            </marker>
        </pattern>
        <disambig action="filterall"/>
    </rule>

    <rule id="byc_praet_nom" name="być w czasie przeszłym + orzecznik => unifikacja">
        <pattern>
            <unify><feature id="number"/><feature id="gender"/>
                <marker>
                    <token inflected="yes" postag=".*(:?praet|pot).*" postag_regexp="yes">być</token>
                    <token postag="(?:adj|ppas):.*nom.*" postag_regexp="yes"/>
                </marker>
            </unify>
        </pattern>
        <disambig action="unify"/>
        <example type="ambiguous" inputform="zaniedbany[zaniedbany/adj:sg:acc:m3:pos,zaniedbany/adj:sg:nom.voc:m1.m2.m3:pos,zaniedbać/ppas:sg:acc:m3:perf:aff,zaniedbać/ppas:sg:nom.voc:m1.m2.m3:perf:aff]"
                 outputform="zaniedbany[zaniedbany/adj:sg:nom.voc:m1.m2.m3:pos,zaniedbać/ppas:sg:nom.voc:m1.m2.m3:perf:aff]">On był <marker>zaniedbany</marker>.</example>
        <example type="untouched">On był niewinną ofiarą.</example>
    </rule>

    <rule id="byc_adv_praet_nom" name="być w czasie przeszłym + orzecznik => unifikacja">
        <pattern>
            <unify><feature id="number"/><feature id="gender"/>
                <marker>
                    <token inflected="yes">być</token>
                    <unify-ignore>
                        <token postag="adv.*|qub" postag_regexp="yes"/>
                    </unify-ignore>
                    <token postag="(?:adj|ppas):.*nom.*" postag_regexp="yes"/>
                </marker>
            </unify>
        </pattern>
        <disambig action="unify"/>
        <example type="ambiguous" inputform="zaniedbany[zaniedbany/adj:sg:acc:m3:pos,zaniedbany/adj:sg:nom.voc:m1.m2.m3:pos,zaniedbać/ppas:sg:acc:m3:perf:aff,zaniedbać/ppas:sg:nom.voc:m1.m2.m3:perf:aff]"
                 outputform="zaniedbany[zaniedbany/adj:sg:nom.voc:m1.m2.m3:pos,zaniedbać/ppas:sg:nom.voc:m1.m2.m3:perf:aff]">On był bardzo <marker>zaniedbany</marker>.</example>
        <example type="untouched">On był niewinną ofiarą.</example>
    </rule>

    <rulegroup id="BYC_ADJ_ACC_NOM" name="być + przymiotnik orzecznikowy -> mianownik">
        <rule>
            <pattern>
                <unify><feature id="number"/>
                    <marker>
                        <token inflected="yes">być</token>
                        <and>
                            <token postag="(?:adj|ppas):.*nom.*" postag_regexp="yes"/>
                            <token postag="(?:adj|ppas):.*acc.*" postag_regexp="yes"/>
                        </and>
                    </marker>
                </unify>
                <token postag="SENT_END|(?:interp|comp):comma" postag_regexp="yes"/>
            </pattern>
            <disambig action="unify"/>
            <example type="ambiguous" inputform="miły[miły/adj:sg:acc:m3:pos,miły/adj:sg:nom.voc:m1.m2.m3:pos,miły/subst:sg:nom:m1,miły/subst:sg:voc:m1]"
                     outputform="miły[miły/adj:sg:nom.voc:m1.m2.m3:pos]">Jest <marker>miły</marker>.</example>
            <example type="untouched">On był niewinną ofiarą.</example>
        </rule>
        <rule>
            <pattern>
                <unify><feature id="number"/>
                    <marker>
                        <token inflected="yes">być</token>
                        <token postag="ppas:.*nom.*" postag_regexp="yes"/>
                    </marker>
                </unify>
                <token inflected="yes">przez</token>
            </pattern>
            <disambig action="unify"/>
            <example type="ambiguous" inputform="zaniedbany[zaniedbany/adj:sg:nom.voc:m1.m2.m3:pos,zaniedbać/ppas:sg:nom.voc:m1.m2.m3:perf:aff]"
                     outputform="zaniedbany[zaniedbać/ppas:sg:nom.voc:m1.m2.m3:perf:aff]">On był <marker>zaniedbany</marker> przez rodziców.</example>
            <example type="untouched">On był niewinną ofiarą.</example>
        </rule>
        <rule>
            <pattern>
                <unify><feature id="number"/>
                    <marker>
                        <token postag="adj.*nom.*" postag_regexp="yes"/>
                        <token inflected="yes" postag_regexp="yes" postag="verb.*(pri|sec).*">być</token>
                    </marker>
                </unify>
                <token postag="interp:comma|SENT_END" postag_regexp="yes"/>
            </pattern>
            <disambig action="unify"/>
            <example type="ambiguous" inputform="Młody[młody/adj:sg:acc:m3:pos,młody/adj:sg:nom.voc:m1.m2.m3:pos,młody/subst:sg:nom:m1,młody/subst:sg:voc:m1]"
                     outputform="Młody[młody/adj:sg:nom.voc:m1.m2.m3:pos]"><marker>Młody</marker> jestem, to prawda…</example>
        </rule>
    </rulegroup>

    <rule name="Bądź i lub jako spójnik" id="badz_koordynacja_subst_verb_non_transitive">
        <pattern>
            <unify>
                <feature id="case"><type id="acc"/><type id="inst"/><type id="gen"/><type id="dat"/><type id="loc"/></feature>
                <feature id="number"/>
                <token postag="(?:subst|ger).*" postag_regexp="yes"><exception negate_pos="yes" postag_regexp="yes" postag="(?:adj|depr|subst|ger).*"/><exception scope="previous" postag_regexp="yes" postag="(?:ger|subst).*"/></token>
                <unify-ignore>
                    <token min="0" max="1">,</token>
                    <marker><token regexp="yes">bądź|lub|i|czy</token></marker>
                </unify-ignore>
                <token postag="(?:subst|ger).*" postag_regexp="yes"><exception negate_pos="yes" postag_regexp="yes" postag="(?:adj|depr|subst|ger).*|SENT_END"/><exception regexp="yes">nic|co</exception></token>
            </unify>
            <token postag="(verb|pant).*" postag_regexp="yes" inflected="yes" regexp="yes">&verb_non_transitive;</token>
        </pattern>
        <disambig action="filter" postag="conj"/>
        <example type="ambiguous" inputform="i[i/comp:comma,i/conj]"
                 outputform="i[i/conj]">Fatma ucałowawszy ręce obu inżynierów <marker>i</marker> dzieci wyszła, błogosławiąc szczególniej Nel.</example>
        <example type="untouched">Pokazały się owoce nauki i wyniki poszybowały w górę.</example>
        <example type="untouched">Zacisnął zęby i ramiona zwarłszy, zatrzymał w piersiach tchnienie.</example>
    </rule>


    <rule name="Bądź i lub jako spójnik" id="badz_koordynacja_subst_verb_refl">
        <pattern>
            <unify>
                <feature id="case"><type id="acc"/><type id="inst"/><type id="gen"/><type id="dat"/><type id="loc"/></feature>
                <feature id="number"/>
                <token postag="(?:subst|ger).*" postag_regexp="yes"><exception negate_pos="yes" postag_regexp="yes" postag="(?:adj|depr|subst|ger).*"/><exception scope="previous" postag_regexp="yes" postag="(?:ger|subst).*"/></token>
                <unify-ignore>
                    <token min="0" max="1">,</token>
                    <marker><token regexp="yes">bądź|lub|i|czy</token></marker>
                </unify-ignore>
                <token postag="(?:subst|ger).*" postag_regexp="yes"><exception negate_pos="yes" postag_regexp="yes" postag="(?:adj|depr|subst|ger).*|SENT_END"/><exception regexp="yes">nic|co</exception></token>
            </unify>
            <token postag="(verb|pant).*refl.*" postag_regexp="yes"/>
            <token>się</token>
        </pattern>
        <disambig action="filter" postag="conj"/>
        <example type="ambiguous" inputform="i[i/comp:comma,i/conj]"
                 outputform="i[i/conj]">Potężny zwierz ujrzawszy jeźdźców <marker>i</marker> konie podniósł się na przednie łapy i począł na nich patrzeć..</example>
        <example type="untouched">Pokazały się owoce nauki i wyniki poszybowały w górę.</example>
        <example type="untouched">Zacisnął zęby i ramiona zwarłszy, zatrzymał w piersiach tchnienie.</example>
    </rule>

    <rule name="Bądź i lub jako spójnik" id="badz_koordynacja_subst_verb_ze">
        <pattern>
            <unify>
                <feature id="case"><type id="acc"/><type id="inst"/><type id="gen"/><type id="dat"/><type id="loc"/></feature>
                <feature id="number"/>
                <token postag="(?:subst|ger).*" postag_regexp="yes"><exception negate_pos="yes" postag_regexp="yes" postag="(?:adj|depr|subst|ger).*"/><exception scope="previous" postag_regexp="yes" postag="(?:ger|subst).*"/></token>
                <unify-ignore>
                    <token min="0" max="1">,</token>
                    <marker><token regexp="yes">bądź|lub|i|czy</token></marker>
                </unify-ignore>
                <token postag="(?:subst|ger).*" postag_regexp="yes"><exception negate_pos="yes" postag_regexp="yes" postag="(?:adj|depr|subst|ger).*|SENT_END"/><exception regexp="yes">nic|co</exception></token>
            </unify>
            <token postag="(verb|pant).*" postag_regexp="yes"/>
            <token>,</token>
            <token regexp="yes">iż|że</token>
        </pattern>
        <disambig action="filter" postag="conj"/>
        <example type="ambiguous" inputform="i[i/comp:comma,i/conj]"
                 outputform="i[i/conj]">Widzę, że potężny zwierz ujrzawszy jeźdźców <marker>i</marker> konie sądzę, że się nie mylę.</example>
        <example type="untouched">Pokazały się owoce nauki i wyniki poszybowały w górę.</example>
        <example type="untouched">Zacisnął zęby i ramiona zwarłszy, zatrzymał w piersiach tchnienie.</example>
    </rule>

    <rule id="byc_on_adj_1" name="był on X-owy">
        <pattern>
            <unify>
            <feature id="number"/><feature id="gender"/>
                <token inflected="yes">być</token>
                <token inflected="yes" postag=".*nom.*" postag_regexp="yes">on</token>
                <token postag="adj.*|ppas.*" postag_regexp="yes"/>
            </unify>
        </pattern>
        <disambig action="unify"/>
    </rule>

    <rule id="byc_on_adj_2" name="jest on X-owy">
        <pattern>
            <token inflected="yes">być</token>
            <marker>
            <unify>
                <feature id="number"/><feature id="gender"/><feature id='case'/>
                <token inflected="yes" postag=".*nom.*" postag_regexp="yes">on</token>
                <token postag="adj.*|ppas.*" postag_regexp="yes"/>
            </unify>
            </marker>
        </pattern>
        <disambig action="unify"/>
    </rule>

    <rule id="CI_PANT" name="ci = ten, kiedy przed imiesłowem">
        <pattern>
            <token>ci</token>
            <token>,</token>
            <token postag="pant:perf.*" postag_regexp="yes"/>
        </pattern>
        <disambig postag="adj:pl:nom.voc:m1.p1:pos"></disambig>
        <example type="ambiguous" inputform="ci[ci/qub,ten/adj:pl:nom.voc:m1.p1:pos,ty/ppron12:sg:dat:m1.m2.m3.f.n1.n2:sec:nakc]"
                 outputform="ci[ten/adj:pl:nom.voc:m1.p1:pos]">A <marker>ci</marker>, ujrzawszy królewnę, zjedli krzesło.</example>
    </rule>


    <!-- specjalnie robimy to drugi raz... to jest kaskada! -->
    <rule name="Przyimek z rzeczownikiem po unifikacji" id="PREP_SUBST_2">
        <pattern>
            <unify> <feature id="case"/>
                <token postag="prep.*" postag_regexp="yes"><exception postag="prep.*" negate_pos="yes" postag_regexp="yes"/><exception>co</exception></token>
                <token postag="(?:adj|subst|ger|ppron.*|ppas|pact|num):.*" postag_regexp="yes"><exception>co</exception><exception postag="qub"/><exception>trochę</exception><exception>dużo</exception></token>
            </unify>
        </pattern>
        <disambig action="unify"/>
        <example type="untouched">Tu mamy piękny przykład.</example>
        <example type="untouched">Łaciny używamy na co dzień.</example>
        <!-- example type="ambiguous" inputform="mamy[mama/subst:pl:acc:f,mama/subst:pl:nom:f,mama/subst:pl:voc:f,mama/subst:sg:gen:f]" outputform="mamy[mama/subst:sg:gen:f]">Idę do <marker>mamy</marker>.</example>  -->
    </rule>

    <rule name="PREP_ACC_JAKIS_CZAS" id="PREP_JAKIS_CZAS">
        <pattern>
            <unify> <feature id="case"/>
                <token postag="prep.*" postag_regexp="yes"><exception postag="prep.*" negate_pos="yes" postag_regexp="yes"/><exception>co</exception></token>
                <token>jakiś</token>
                <token>czas</token>
            </unify>
        </pattern>
        <disambig action="unify"/>
    </rule>

    <rule name="Jaki z przymiotnikiem i rzeczownikiem po unifikacji" id="PREP_JAKI_ADV_SUBST">
        <pattern>
            <unify> <feature id="case"/>
                <token postag="prep.*" postag_regexp="yes"><exception postag="prep.*" negate_pos="yes" postag_regexp="yes"/><exception>co</exception></token>
                <token inflected="yes">jaki</token>
                <token postag="(adj|ppas|pact):.*" postag_regexp="yes"><exception>co</exception><exception postag="qub"/></token>
                <token postag="(adj|subst|ger|ppron.*|ppas|pact|num):.*" postag_regexp="yes"><exception>co</exception><exception postag="qub"/></token>
            </unify>
        </pattern>
        <disambig action="unify"/>
    </rule>

    <rulegroup name="Jaki z rzeczownikiem po unifikacji" id="PREP_JAKI_SUBST">
        <rule> <!-- 1: nom -->
            <pattern>
                <token postag="prep:nom.*" postag_regexp="yes">
                <exception postag="prep.*" negate_pos="yes" postag_regexp="yes"/>
                <exception>co</exception></token>
                <unify> <feature id="case"><type id="nom"/></feature>
                    <feature id="gender"/><feature id="number"/>
                    <token inflected="yes">jaki</token>
                    <token postag="(subst|ger|ppron.*|num):.*" postag_regexp="yes">
                        <exception>co</exception><exception postag="qub"/>
                    </token>
                </unify>
            </pattern>
        <disambig action="filterall"/>
        </rule>
        <rule> <!-- 2: acc -->
            <pattern>
                <token postag="prep:acc.*" postag_regexp="yes">
                    <exception postag="prep.*" negate_pos="yes" postag_regexp="yes"/>
                    <exception>co</exception></token>
                <unify> <feature id="case"><type id="acc"/></feature>
                    <feature id="gender"/><feature id="number"/>
                    <token inflected="yes">jaki</token>
                    <token postag="(subst|ger|ppron.*|num):.*" postag_regexp="yes">
                        <exception>co</exception><exception postag="qub"/>
                    </token>
                </unify>
            </pattern>
            <disambig action="filterall"/>
        </rule>
        <rule> <!-- 3: gen -->
            <pattern>
                <token postag="prep:gen.*" postag_regexp="yes">
                    <exception postag="prep.*" negate_pos="yes" postag_regexp="yes"/>
                    <exception>co</exception></token>
                <unify> <feature id="case"><type id="gen"/></feature>
                    <feature id="gender"/><feature id="number"/>
                    <token inflected="yes">jaki</token>
                    <token postag="(subst|ger|ppron.*|num):.*" postag_regexp="yes">
                        <exception>co</exception><exception postag="qub"/>
                    </token>
                </unify>
            </pattern>
            <disambig action="filterall"/>
        </rule>
        <rule> <!-- 4: dat -->
            <pattern>
                <token postag="prep:dat.*" postag_regexp="yes">
                    <exception postag="prep.*" negate_pos="yes" postag_regexp="yes"/>
                    <exception>co</exception></token>
                <unify> <feature id="case"><type id="dat"/></feature>
                    <feature id="gender"/><feature id="number"/>
                    <token inflected="yes">jaki</token>
                    <token postag="(subst|ger|ppron.*|num):.*" postag_regexp="yes">
                        <exception>co</exception><exception postag="qub"/>
                    </token>
                </unify>
            </pattern>
            <disambig action="filterall"/>
        </rule>
        <rule> <!-- 5: loc -->
            <pattern>
                <token postag="prep:loc.*" postag_regexp="yes">
                    <exception postag="prep.*" negate_pos="yes" postag_regexp="yes"/>
                    <exception>co</exception></token>
                <unify> <feature id="case"><type id="loc"/></feature>
                    <feature id="gender"/><feature id="number"/>
                    <token inflected="yes">jaki</token>
                    <token postag="(subst|ger|ppron.*|num):.*" postag_regexp="yes">
                        <exception>co</exception><exception postag="qub"/>
                    </token>
                </unify>
            </pattern>
            <disambig action="filterall"/>
        </rule>
        <rule> <!-- 6: inst-->
            <pattern>
                <token postag="prep:inst.*" postag_regexp="yes">
                    <exception postag="prep.*" negate_pos="yes" postag_regexp="yes"/>
                    <exception>co</exception></token>
                <unify> <feature id="case"><type id="inst"/></feature>
                    <feature id="gender"/><feature id="number"/>
                    <token inflected="yes">jaki</token>
                    <token postag="(subst|ger|ppron.*|num):.*" postag_regexp="yes">
                        <exception>co</exception><exception postag="qub"/>
                    </token>
                </unify>
            </pattern>
            <disambig action="filterall"/>
        </rule>
    </rulegroup>

    <rule id="PODNIOSLA_ACC" name="podniosła/dostała z biernikiem > czasownik">
        <pattern>
            <marker>
                <token postag="verb:praet:sg:f:ter:.*" postag_regexp="yes" regexp="yes">podniosła|dostała|zrozumiała|zastała|czuła</token>
                <token postag=".*acc.*" postag_regexp="yes"/>
            </marker>
        </pattern>
        <disambig action="filterall"/>
        <example type="ambiguous" inputform="podniosła[podnieść/verb:praet:sg:f:ter:perf:refl.nonrefl,podniosły/adj:sg:nom.voc:f:pos]"
                 outputform="podniosła[podnieść/verb:praet:sg:f:ter:perf:refl.nonrefl]">Mama przestała szyć i <marker>podniosła</marker> książkę.</example>
    </rule>

    <rule id="ACC_PODNIOSLA" name="podniosła/dostała z biernikiem > czasownik">
        <pattern>
            <marker>
                <token postag=".*acc.*" postag_regexp="yes"/>
                <token postag="verb:praet:sg:f:ter:perf:refl.nonrefl" regexp="yes">podniosła|dostała|zrozumiała</token>
            </marker>
        </pattern>
        <disambig action="filterall"/>
        <example type="ambiguous" inputform="podniosła[podnieść/verb:praet:sg:f:ter:perf:refl.nonrefl,podniosły/adj:sg:nom.voc:f:pos]"
                 outputform="podniosła[podnieść/verb:praet:sg:f:ter:perf:refl.nonrefl]">Mama przestała szyć i głowę <marker>podniosła</marker>.</example>
    </rule>


    <rule name="Unifikacja przymiotników z innymi" id="Unify_adj_comma">
        <pattern>
            <unify>
                <feature id="number"/><feature id="gender"/> <feature id="case"/>
                <token postag="(?:adj|pact|ppas).*" postag_regexp="yes"><exception negate_pos="yes" postag_regexp="yes" postag="(?:adj|pact|ppas|subst).*"/></token>
                <unify-ignore>
                    <token regexp="yes">[,i]|oraz|ani|lub|albo|bądź|czy</token>
                </unify-ignore>
                <token postag="(?:adj|pact|ppas).*" postag_regexp="yes"><exception negate_pos="yes" postag_regexp="yes" postag="(?:adj|pact|ppas|subst).*"/><exception inflected="yes" regexp="yes">jaki|który</exception></token>
            </unify>
        </pattern>
        <disambig action="unify"/>
        <example type="ambiguous" inputform="młodego[młody/adj:sg:acc:m1.m2:pos,młody/adj:sg:gen:m1.m2.m3.n1.n2:pos]"
                 outputform="młodego[młody/adj:sg:gen:m1.m2.m3.n1.n2:pos]">Mówię do ładnego, <marker>młodego</marker> chłopca.</example>
        <example type="untouched">Spojrzał na nową, ale się nie odezwał.</example>
    </rule>


    <rule name="rzeczowniki z dywizem" id="unify_noun_hyphen">
    <pattern case_sensitive="yes">
        <unify>
        <feature id="case"/><feature id="number"/>
        <token postag="(?:subst|depr|ger).*" postag_regexp="yes"><exception negate_pos="yes" postag_regexp="yes" postag="(?:subst|depr|ger).*"/></token>
        <unify-ignore>
            <token spacebefore="no">-</token>
        </unify-ignore>
        <token postag="(?:subst|depr|ger).*" postag_regexp="yes"><exception negate_pos="yes" postag_regexp="yes" postag="(?:subst|depr|ger).*"/></token>
        </unify>
    </pattern>
    <disambig action="unify"/>
        <example type="ambiguous" inputform="kota[kot/subst:sg:acc:m1,kot/subst:sg:acc:m2,kot/subst:sg:gen:m1,kot/subst:sg:gen:m2,kota/subst:sg:nom:f]"
                 outputform="kota[kot/subst:sg:acc:m1,kot/subst:sg:acc:m2]">Patrzę na kobietę-<marker>kota</marker>.</example>
    </rule>

    <rule name="oznaczenie przecinka oddzielającego człony równorzędne" id="comma_conj">
        <pattern>
        <unify>
            <feature id="case"/><feature id="number"/><feature id="gender"/>
            <token postag="(?:subst|depr|ger|adj|pact|ppas).*" postag_regexp="yes"/>
            <unify-ignore><marker><token>,</token></marker></unify-ignore>
            <token postag="(?:subst|depr|ger|adj|pact|ppas).*" postag_regexp="yes"><exception postag="verb.*" postag_regexp="yes"/></token>
        </unify>
        </pattern>
        <disambig action="add"><wd pos="conj"/></disambig>
        <!-- to trochę prymitywne, ale przyda się do reguły POZA_TYM; w przyszłości to powinien być
         po prostu przecinek oznaczony jako środkowy fragment grupy nominalnej -->
    </rule>

    <!-- conjunctions that take a comma -->
    <rule name="Spójniki wymagające przecinka lub zastępujące go" id="COMP_COMMA_2">
        <pattern>
            <and>
            <token inflected="yes" regexp="yes">aby|acz|aczkolwiek|albo|albowiem|ale|aleć|aliści|ani|azali|ażeby|bo|byleby|choć|chociaż|chociażby|czyli|czyliż|dlaczego|dopóki|dopóty|gdy|gdyby|gdyż|gdyżby|ilekolwiek|ilekroć|iż|iżby|jaki|jeśli|jeżeli|kiedy|który|którędy|lecz|oraz|ponieważ|póki|wszelako|zanim|że|żeby<exception postag="comp:comma"/></token>
                <token negate_pos="yes" postag="qub"><exception postag="qub">że</exception></token> <!-- prawie że -> qub -->
            </and>
        </pattern>
        <disambig action="add"><wd pos="comp:comma"/></disambig>
        <example type="untouched">To jest krowa.</example>
        <example type="ambiguous" inputform="której[który/adj:sg:loc:f:pos]" outputform="której[której/comp:comma,który/adj:sg:loc:f:pos]">Krainę, w <marker>której</marker> kupiłem krowę, zapamiętam do końca życia.</example>
    </rule>

    <rule name="jak gdyby" id="jak_gdyby">
        <pattern>
            <token postag="adv:pos">jak</token>
            <token postag="qub">gdyby</token>
        </pattern>
        <disambig action="filterall"/>
    </rule>

    <rulegroup id="PIECIU" name="Pięciu jako gerundium">
        <rule>
            <pattern>
                <marker>
                    <token>pięciu</token>
                </marker>
                <token>się</token>
                <token regexp="yes">wzwyż|po</token>
            </pattern>
            <disambig><match no="1" postag="ger.*"  postag_regexp="yes"/></disambig>
            <example type="untouched">Widzę pięciu wyrostków.</example>
            <example type="ambiguous" inputform="pięciu[piąć/ger:sg:dat.loc:n2:imperf:aff:refl,pięć/num:pl:acc:m1:rec,pięć/num:pl:gen.dat.inst.loc:m1.m2.m3.f.n2:congr,pięć/num:pl:nom.voc:m1:rec]"
                     outputform="pięciu[piąć/ger:sg:dat.loc:n2:imperf:aff:refl]">Nie było końca <marker>pięciu</marker> się wzwyż.</example>
        </rule>
        <rule>
            <pattern>
                <marker>
                    <token>pięciu</token>
                </marker>
                <token>się</token>
                <token>w</token>
                <token>górę</token>
            </pattern>
            <disambig><match no="1" postag="ger.*"  postag_regexp="yes"/></disambig>
            <example type="untouched">Widzę pięciu wyrostków.</example>
            <example type="ambiguous" inputform="pięciu[piąć/ger:sg:dat.loc:n2:imperf:aff:refl,pięć/num:pl:acc:m1:rec,pięć/num:pl:gen.dat.inst.loc:m1.m2.m3.f.n2:congr,pięć/num:pl:nom.voc:m1:rec]"
                     outputform="pięciu[piąć/ger:sg:dat.loc:n2:imperf:aff:refl]">Nie było końca <marker>pięciu</marker> się w górę.</example>
        </rule>
    </rulegroup>
    <rule id="PIECIU_NUM" name="Pięciu jako liczebnik">
        <pattern>
            <marker><token postag="num.*" postag_regexp="yes">pięciu</token></marker>
        </pattern>
        <disambig action="remove" postag="ger:.*"/>
        <example type="ambiguous" inputform="pięciu[piąć/ger:sg:dat.loc:n2:imperf:aff:refl,pięć/num:pl:acc:m1:rec,pięć/num:pl:gen.dat.inst.loc:m1.m2.m3.f.n2:congr,pięć/num:pl:nom.voc:m1:rec]"
                 outputform="pięciu[pięć/num:pl:acc:m1:rec,pięć/num:pl:gen.dat.inst.loc:m1.m2.m3.f.n2:congr,pięć/num:pl:nom.voc:m1:rec]">Widzę ich tu <marker>pięciu</marker>.</example>
        <example type="untouched">O pięciu się w górę nie słyszałem.</example>
    </rule>

    <rule name="niechaj jako kublik" id="niechaj">
        <pattern>
            <marker>
            <token skip="-1"><exception scope="next" postag="verb:(fin|imps|impt):pl.*|interp:comma" postag_regexp="yes"/>niechaj</token>
            </marker>
            <token postag="verb:fin:sg:ter:.*" postag_regexp="yes"/>
        </pattern>
        <disambig postag="qub"/>
        <example type="ambiguous" inputform="niechaj[niechaj/qub,niechać/verb:impt:sg:sec:imperf.perf:nonrefl]" outputform="niechaj[niechaj/qub]">Wiedziałeś od wieków, czego mi potrzeba; <marker>niechaj</marker> się wola twoja spełni.</example>
    </rule>

    <!-- rulegroup id="STAJE_VERB" name="staje się => czasownik">
        <rule><pattern>
            <token postag="verb:fin:sg:ter:imperf:refl">staje</token>
            <token postag="qub">się</token>
        </pattern>
        <disambig action="filterall"/>
        <example type="ambiguous" inputform="staje[stajać/verb:fin:sg:ter:perf:nonrefl,stawać/verb:fin:sg:ter:imperf:nonrefl,stawać/verb:fin:sg:ter:imperf:refl]"
                 outputform="staje[stawać/verb:fin:sg:ter:imperf:refl]">Kluczowe <marker>staje</marker> się stanowisko rządu.</example>
        <example type="untouched">Pociąg staje na stacji.</example>
        </rule>
        <rule><pattern>
            <token postag="qub">się</token>
            <token postag="verb:fin:sg:ter:imperf:refl">staje</token>
        </pattern>
            <disambig action="filterall"/>
            <example type="ambiguous" inputform="staje[staj/subst:pl:acc:m3,staj/subst:pl:nom:m3,staj/subst:pl:voc:m3,staja/subst:pl:acc:f,staja/subst:pl:nom:f,staja/subst:pl:voc:f,stajać/verb:fin:sg:ter:perf:nonrefl,staje/subst:sg:acc:n2,staje/subst:sg:nom:n2,staje/subst:sg:voc:n2,stawać/verb:fin:sg:ter:imperf:nonrefl,stawać/verb:fin:sg:ter:imperf:refl]"
                     outputform="staje[stawać/verb:fin:sg:ter:imperf:refl]">Kluczowe się <marker>staje</marker> stanowisko rządu.</example>
            <example type="untouched">Pociąg staje na stacji.</example>
        </rule>
    </rulegroup -->

    <rule id="wrecz_ze" name="wręcz, że => qub">
        <pattern>
            <token postag="qub">wręcz</token>
            <token>,</token>
            <token postag="comp.*" postag_regexp="yes" regexp="yes">iż|że</token>
        </pattern>
        <disambig action="filterall"/>
    </rule>

    <rule id="chciec_inf" name="bezokoliczniki">
        <pattern>
            <token skip="-1" postag="verb:.*(?:sg|pl|imp[st]).*|pred" postag_regexp="yes" inflected="yes" regexp="yes">mieć|móc|musieć|potrafić|pozwolić|pozwalać|zdołać|umieć|ośmielić|powinien|gotów|ważyć|raczyć|usiłować|rozkazać|śmieć|zacząć|uczyć|dozwolić|(?:po)?móc|s?próbować|chcieć|da(?:wa)?ć|iść|pójść|ośmielić|umieć|kazać|mieć|zacząć|przestać|zaczynać|przestawać|pozwolić|pozwalać|starać|jechać|nauczyć|biec|położyć|zdążyć
            <exception scope="next" postag="comp:comma|interp:comma" postag_regexp="yes"/></token>
            <marker>
                <token postag_regexp="yes" postag="verb:inf.*"/>
            </marker>
        </pattern>
        <disambig action="filterall"/>
    </rule>

    <rule id="inf_chciec" name="bezokoliczniki przed czasownikiem">
        <pattern>
            <marker>
                <token skip="5" postag_regexp="yes" postag="verb:inf.*"><exception scope="next" postag="comp:comma|interp:comma" postag_regexp="yes"/></token>
            </marker>
            <token postag="verb:.*(?:sg|pl|imp[st]).*|pred" postag_regexp="yes" inflected="yes" regexp="yes">mieć|móc|musieć|potrafić|pozwolić|pozwalać|zdołać|umieć|ośmielić|powinien|gotów|ważyć|raczyć|usiłować|rozkazać|śmieć|zacząć|uczyć|dozwolić|(?:po)?móc|s?próbować|chcieć|da(?:wa)?ć|iść|pójść|ośmielić|umieć|kazać|mieć|zacząć|przestać|zaczynać|przestawać|pozwolić|pozwalać|starać|jechać|nauczyć|biec|położyć|zdążyć</token>
        </pattern>
        <disambig action="filterall"/>
        <example type="ambiguous" inputform="iść[iścić/verb:impt:sg:sec:imperf:nonrefl,iścić/verb:impt:sg:sec:imperf:refl.nonrefl,iść/verb:inf:imperf:nonrefl]"
                 outputform="iść[iść/verb:inf:imperf:nonrefl]">... znaleźć nawet śladu drogi, po której by się <marker>iść</marker> chciało.</example>
    </rule>

    <rule id="nastroj" name="zmienia ci się nastrój">
        <pattern>
            <token postag="verb.*sg.*ter.*" postag_regexp="yes" inflected="yes" regexp="yes">zmienić|poprawić|udzielić</token>
            <token postag="ppron.*dat.*nakc" postag_regexp="yes"/>
            <token postag="qub">się</token>
            <token postag="subst:sg:nom:m3">nastrój</token>
        </pattern>
        <disambig action="filterall"/>
        <example type="untouched">Ty się nastrój na inne fale!</example>
        <example type="ambiguous" inputform="nastrój[nastroić/verb:impt:sg:sec:perf:refl.nonrefl,nastrój/subst:sg:acc:m3,nastrój/subst:sg:nom:m3]"
                 outputform="nastrój[nastrój/subst:sg:nom:m3]">Odkąd przyszła depesza, zmienił ci się <marker>nastrój</marker>?!</example>
    </rule>

    <rule id="nalezycie" name="należycie + verb => adv">
        <pattern>
            <marker>
            <token skip="5">należycie</token>
            </marker>
            <token postag="verb.*|ppas.*|pact.*" postag_regexp="yes"/>
        </pattern>
        <disambig postag="adv:pos"/>
        <example type="untouched">Od kiedy należycie do Partii, towarzyszu?</example>
        <example type="ambiguous" inputform="należycie[należeć/verb:fin:pl:sec:imperf:refl.nonrefl,należeć/verb:fin:pl:sec:perf:refl,należycie/adv:pos]"
                 outputform='należycie[należycie/adv:pos]'>Nie zdążyła się <marker>należycie</marker> rozpatrzyć w nowych warunkach życia rodziny.</example>
    </rule>

    <rulegroup id="zrobilo_zal" name="zrobiło się żal > rzeczownik">
    <rule>
        <pattern>
            <token skip="-1">zrobiło</token>
            <marker>
                <token>żal</token>
            </marker>
        </pattern>
        <disambig postag="pred"/>
    </rule>
    <rule>
        <pattern>
            <marker>
                <token skip="-1">żal</token>
            </marker>
            <token>zrobiło</token>
        </pattern>
        <disambig postag="pred"/>
        <example type="untouched">Jest mi jej żal.</example>
        <example type="ambiguous" inputform="żal[żal/adv,żal/pred,żal/subst:sg:acc:m3,żal/subst:sg:nom:m3,żalić/verb:impt:sg:sec:imperf:refl]"
                 outputform="żal[żal/pred]">Ale i wujkowi Władkowi <marker>żal</marker> się nagle tej czapki zrobiło.</example>
    </rule>
    </rulegroup>

    <rulegroup id="VERB_REFL_NONREFL" name="czasownik zwrotny i niezwrotny + się => zwrotny">
        <rule>
        <pattern>
            <and>
                <token postag=".*:refl" postag_regexp="yes"/>
                <token postag=".*:nonrefl" postag_regexp="yes"/>
            </and>
            <token postag="qub">się</token>
        </pattern>
        <disambig action="filterall"/>
        <example type="untouched">Jajko stało na stole.</example>
        <example type="ambiguous" inputform="stało[stać/verb:praet:sg:n1.n2:ter:imperf:nonrefl,stać/verb:praet:sg:n1.n2:ter:perf:nonrefl,stać/verb:praet:sg:n1.n2:ter:perf:refl]"
                 outputform="stało[stać/verb:praet:sg:n1.n2:ter:perf:refl]">To <marker>stało</marker> się nagle.</example>
        </rule>
        <rule>
            <pattern>
                <token postag="qub">się</token>
                <and>
                    <token postag=".*:refl" postag_regexp="yes"/>
                    <token postag=".*:nonrefl" postag_regexp="yes"/>
                </and>
            </pattern>
            <disambig action="filterall"/>
            <example type="untouched">Jajko stało na stole.</example>
            <example type="ambiguous" inputform="stało[stać/verb:praet:sg:n1.n2:ter:imperf:nonrefl,stać/verb:praet:sg:n1.n2:ter:perf:nonrefl,stać/verb:praet:sg:n1.n2:ter:perf:refl]"
                     outputform="stało[stać/verb:praet:sg:n1.n2:ter:perf:refl]">To się <marker>stało</marker> nagle.</example>
        </rule>
    </rulegroup>

    <rule id="JEST_NIE_QUB_SPOSOB" name="verb:inf + jest nie sposób">
        <pattern>
            <token skip="3" postag="verb:inf.*" postag_regexp="yes"></token>
            <token regexp="yes">jest|było|będzie|byłoby</token>
            <marker>
                <token postag="qub">nie</token>
                <token skip="1" postag="pred">sposób</token>
            </marker>
        </pattern>
        <disambig action="filterall"/>
        <example type="ambiguous" inputform="sposób[sposobić/verb:impt:sg:sec:imperf:refl.nonrefl,sposób/pred,sposób/subst:sg:acc:m3,sposób/subst:sg:nom:m3]"
                 outputform="sposób[sposób/pred]">Być eleganckim jest nie <marker>sposób</marker>.</example>
        <example type="untouched">Nie sposób się do wojny.</example>
    </rule>

    <rule id="NIE_QUB_SPOSOB" name="nie sposób jest">
        <pattern>
            <marker>
                <token postag="qub">nie</token>
                <token skip="1" postag="pred">sposób</token>
            </marker>
            <token min="0" max="1" regexp="yes">jest|było|będzie|byłoby</token>
            <token postag="verb:inf.*" postag_regexp="yes"></token>
        </pattern>
        <disambig action="filterall"/>
        <example type="ambiguous" inputform="sposób[sposobić/verb:impt:sg:sec:imperf:refl.nonrefl,sposób/pred,sposób/subst:sg:acc:m3,sposób/subst:sg:nom:m3]"
                 outputform="sposób[sposób/pred]">Nie <marker>sposób</marker> być eleganckim.</example>
        <example type="untouched">Nie sposób się do wojny.</example>
        <example type="ambiguous" inputform="sposób[sposobić/verb:impt:sg:sec:imperf:refl.nonrefl,sposób/pred,sposób/subst:sg:acc:m3,sposób/subst:sg:nom:m3]"
                 outputform="sposób[sposób/pred]">Nie <marker>sposób</marker> jest być eleganckim.</example>
        <example type="ambiguous" inputform="sposób[sposobić/verb:impt:sg:sec:imperf:refl.nonrefl,sposób/pred,sposób/subst:sg:acc:m3,sposób/subst:sg:nom:m3]"
                 outputform="sposób[sposób/pred]">Telefon to coś, bez czego nie <marker>sposób</marker> się obejść.</example>
    </rule>

    <rule id="NIE_QUB_SPOSOB_INF" name="nie sposób jest - do końca zdania">
        <pattern>
            <marker>
                <token postag="qub">nie</token>
                <token skip="1" postag="pred">sposób</token>
            </marker>
            <token skip="-1" regexp="yes">jest|było|będzie|byłoby
                <exception scope="next" postag_regexp="yes" postag="verb:.*(sg|pl).*|verb:imps.*|pcon:imperf.*|pant:perf.*"/></token>
            <token postag="verb:inf.*" postag_regexp="yes"></token>
        </pattern>
        <disambig action="filterall"/>
        <example type="ambiguous" inputform="sposób[sposobić/verb:impt:sg:sec:imperf:refl.nonrefl,sposób/pred,sposób/subst:sg:acc:m3,sposób/subst:sg:nom:m3]"
                 outputform="sposób[sposób/pred]">Nie <marker>sposób</marker> jest się cieszyć z cudzego nieszczęścia.</example>
        <example type="untouched">Nie sposób się do wojny.</example>
        <example type="ambiguous" inputform="sposób[sposobić/verb:impt:sg:sec:imperf:refl.nonrefl,sposób/pred,sposób/subst:sg:acc:m3,sposób/subst:sg:nom:m3]"
                 outputform="sposób[sposób/pred]">Nie <marker>sposób</marker> było się cieszyć z cudzego nieszczęścia.</example>
        <example type="ambiguous" inputform="sposób[sposobić/verb:impt:sg:sec:imperf:refl.nonrefl,sposób/pred,sposób/subst:sg:acc:m3,sposób/subst:sg:nom:m3]"
                 outputform="sposób[sposób/pred]">Telefon to coś, bez czego nie <marker>sposób</marker> będzie się obejść.</example>
    </rule>

    <rule name='się po czasowniku zwrotnym' id="refl_sie">
        <pattern>
            <marker>
                <token postag=".*:refl.*" postag_regexp="yes"/>
                <token postag="qub">się</token>
            </marker>
            <token><exception postag=".*:refl.*" postag_regexp="yes"/></token>
        </pattern>
        <disambig action="filterall"/>
    </rule>

    <rule name='się przed czasownikiem zwrotnym' id="sie_refl">
        <pattern>
            <token><exception postag=".*:refl.*" postag_regexp="yes"/></token>
            <marker>
                <token postag="qub">się</token>
                <token postag=".*:refl.*" postag_regexp="yes"><exception>iść</exception></token>
            </marker>
        </pattern>
        <disambig action="filterall"/>
    </rule>

    <rule name='się przed czasownikiem zwrotnym' id="sie_nie_refl">
        <pattern>
            <token><exception postag=".*:refl.*" postag_regexp="yes"/></token>
            <marker>
                <token postag="qub">się</token>
                <token postag="qub">nie</token>
                <token postag=".*:refl.*" postag_regexp="yes"/>
            </marker>
        </pattern>
        <disambig action="filterall"/>
    </rule>


    <rule id="JAK_ZES" name="jak żeś -> adv qub">
        <pattern>
            <token>jak</token>
            <token inflected="yes">że</token>
        </pattern>
        <disambig postag="replace"><wd pos="adv" lemma="jak"/><wd pos="qub" lemma="że"/></disambig>
        <example type="ambiguous" inputform="żeś[że/comp,żeś/comp:comma]" outputform="żeś[że/qub]">I cóż, stary Balu — dodała — jak <marker>żeś</marker> wyszedł z tej przygody?</example>
    </rule>

    <rule name="mieć to do siebie" id="ma_to_do_siebie">
        <pattern>
            <marker>
            <token postag="verb.*" postag_regexp="yes" inflected="yes">mieć</token>
            <token postag="subst:sg:acc:n2">to</token>
            <token postag="prep:gen">do</token>
            <token postag="siebie:gen">siebie</token>
            </marker>
        </pattern>
        <disambig action="filterall"/>
        <example type="untouched">Ma przyjaciółka kupuje glizdy na targu.</example>
        <example type="ambiguous" inputform="ma[mieć/verb:fin:sg:ter:imperf:refl.nonrefl,mój/adj:sg:nom.voc:f:pos]"
                 outputform="ma[mieć/verb:fin:sg:ter:imperf:refl.nonrefl]">Szczęście, niestety, <marker>ma</marker> to do siebie, że się kończy.</example>
    </rule>

    <rule name="mieć w sobie" id="ma_w_sobie">
        <pattern>
            <marker>
                <token postag="verb.*" postag_regexp="yes" inflected="yes">mieć</token>
                <token postag="prep:loc:nwok">w</token>
                <token postag="siebie:loc">sobie</token>
            </marker>
        </pattern>
        <disambig action="filterall"/>
        <example type="untouched">Ma przyjaciółka kupuje glizdy na targu.</example>
        <example type="ambiguous" inputform="ma[mieć/verb:fin:sg:ter:imperf:refl.nonrefl,mój/adj:sg:nom.voc:f:pos]"
                 outputform="ma[mieć/verb:fin:sg:ter:imperf:refl.nonrefl]">Szczęście, niestety, <marker>ma</marker> w sobie coś niepokojącego.</example>
    </rule>

    <rule name="kolokaty mieć" id="miec_kolokaty_nominatywne">
        <pattern>
            <marker>
            <token postag="verb.*" postag_regexp="yes" inflected="yes">mieć</token>
            <token postag="subst.*acc.*" postag_regexp="yes" regexp="yes">ochotę|wrażenie|nadzieję|moc|zamiar|pojęcie|gorączkę|rację|przeczucie|pewność|odwagę|szansę|zwyczaj|rozkaz|wątpliwości|wątpliwość|polecenie|wadę|słuszność|siedzibę|problem|cechę|zaletę</token>
            </marker>
        </pattern>
        <disambig action="filterall"/>
    </rule>

    <rule name="kolokaty mieć" id="kolokaty_nominatywne_miec">
        <pattern>
            <marker>
                <token postag="subst.*acc.*" postag_regexp="yes" regexp="yes">ochotę|wrażenie|nadzieję|moc|zamiar|pojęcie|gorączkę|rację|przeczucie|pewność|odwagę|zwyczaj|rozkaz|wątpliwości|wątpliwość|polecenie|wadę|słuszność|siedzibę|problem|cechę|zaletę</token>
                <token postag="verb.*" postag_regexp="yes" inflected="yes">mieć</token>
            </marker>
        </pattern>
        <disambig action="filterall"/>
    </rule>

    <rule name="ma być" id="MA_INF">
        <pattern>
            <marker><token>ma</token></marker>
            <token postag_regexp="yes" postag="verb:inf.*"/>
        </pattern>
        <disambig postag="verb:fin:sg:ter:imperf:refl.nonrefl"/>
        <example type="untouched">Wraca ma ukochana.</example>
        <example type="ambiguous" inputform="ma[mieć/verb:fin:sg:ter:imperf:refl.nonrefl,mój/adj:sg:nom.voc:f:pos]"
                 outputform="ma[mieć/verb:fin:sg:ter:imperf:refl.nonrefl]">Jak <marker>ma</marker> być zrobione zadanie 3?</example>
    </rule>

    <rule name="ma być" id="MA_QUB_INF">
        <pattern>
            <marker><token>ma</token></marker>
            <token postag="qub"/>
            <token postag_regexp="yes" postag="verb:inf.*"/>
        </pattern>
        <disambig postag="verb:fin:sg:ter:imperf:refl.nonrefl"/>
        <example type="untouched">Wraca ma ukochana.</example>
        <example type="ambiguous" inputform="ma[mieć/verb:fin:sg:ter:imperf:refl.nonrefl,mój/adj:sg:nom.voc:f:pos]"
                 outputform="ma[mieć/verb:fin:sg:ter:imperf:refl.nonrefl]">Tak <marker>ma</marker> też być zrobione zadanie 3.</example>
    </rule>


    <rule name="być ma" id="INF_MA">
        <pattern>
            <token postag_regexp="yes" postag="verb:inf.*"/>
            <marker><token>ma</token></marker>
        </pattern>
        <disambig postag="verb:fin:sg:ter:imperf:refl.nonrefl"/>
        <example type="untouched">Wraca ma ukochana.</example>
        <example type="ambiguous" inputform="ma[mieć/verb:fin:sg:ter:imperf:refl.nonrefl,mój/adj:sg:nom.voc:f:pos]"
                 outputform="ma[mieć/verb:fin:sg:ter:imperf:refl.nonrefl]">To być <marker>ma</marker> zadanie 3?</example>
    </rule>

    <rule name="robić coś ma" id="INF_SUBST_MA">
        <pattern>
            <token postag_regexp="yes" postag="verb:inf.*"/>
            <token postag="subst.*acc.*" postag_regexp="yes"/>
            <marker><token>ma</token></marker>
        </pattern>
        <disambig postag="verb:fin:sg:ter:imperf:refl.nonrefl"/>
        <example type="untouched">Wraca ma ukochana.</example>
        <example type="ambiguous" inputform="ma[mieć/verb:fin:sg:ter:imperf:refl.nonrefl,mój/adj:sg:nom.voc:f:pos]"
                 outputform="ma[mieć/verb:fin:sg:ter:imperf:refl.nonrefl]">Ułatwiać adopcję <marker>ma</marker> m.in. artykuł 118 kodeksu.</example>
    </rule>

    <rule name="być ma" id="INF_SIE_MA">
        <pattern>
            <token postag_regexp="yes" postag="verb:inf.*:refl.*"/>
            <token>się</token>
            <marker><token>ma</token></marker>
        </pattern>
        <disambig postag="verb:fin:sg:ter:imperf:refl.nonrefl"/>
        <example type="untouched">Wraca ma ukochana.</example>
        <example type="ambiguous" inputform="ma[mieć/verb:fin:sg:ter:imperf:refl.nonrefl,mój/adj:sg:nom.voc:f:pos]"
                 outputform="ma[mieć/verb:fin:sg:ter:imperf:refl.nonrefl]">Sejm zajmować się <marker>ma</marker> tą sprawą.</example>
    </rule>

    <rule name="acc ma nom lub przecinek" id="ACC_MA_NOM">
        <pattern>
            <marker>
            <token postag_regexp="yes" postag=".*acc.*">
                <exception inflected="yes" regexp="yes">który|jaki</exception>
            </token>
            <token postag="verb:fin:sg:ter:imperf:refl.nonrefl">ma</token>
            <token postag="subst:sg:nom.*|interp:comma|SENT_END" postag_regexp="yes"/>
            </marker>
        </pattern>
        <disambig action="filterall"/>
        <example type="untouched">To jest ma przyjaciółka.</example>
        <example type="ambiguous" inputform="ma[mieć/verb:fin:sg:ter:imperf:refl.nonrefl,mój/adj:sg:nom.voc:f:pos]"
                 outputform="ma[mieć/verb:fin:sg:ter:imperf:refl.nonrefl]">Wcześniejszą genezę <marker>ma</marker> osada oraz kościoły.</example>
    </rule>

    <rule name="taki/ten + acc + ma" id="TAKI_ACC_MA">
        <pattern>
            <marker>
                <token postag_regexp="yes" inflected="yes" postag=".*acc.*" regexp="yes">taki|ten</token>
                <token postag_regexp="yes" postag="(subst|ger).*acc.*"/>
                <token postag="verb:fin:sg:ter:imperf:refl.nonrefl">ma</token>
            </marker>
        </pattern>
        <disambig action="filterall"/>
        <example type="ambiguous" inputform="ma[mieć/verb:fin:sg:ter:imperf:refl.nonrefl,mój/adj:sg:nom.voc:f:pos]"
                 outputform="ma[mieć/verb:fin:sg:ter:imperf:refl.nonrefl]">A taką siłę <marker>ma</marker> praktycznie tylko armia.</example>
    </rule>

    <rule name="przymiotnik + rzeczownik w bierniku + ma" id="adj_acc_subst_acc_ma">
        <pattern>
            <marker>
                <token postag_regexp="yes" postag="adj.*acc.*"/>
                <token postag_regexp="yes" postag="subst.*acc.*"/>
                <token postag="verb:fin:sg:ter:imperf:refl.nonrefl">ma</token>
            </marker>
        </pattern>
        <disambig action="filterall"/>
        <example type="untouched">To jest ma przyjaciółka.</example>
        <example type="ambiguous" inputform="ma[mieć/verb:fin:sg:ter:imperf:refl.nonrefl,mój/adj:sg:nom.voc:f:pos]"
                 outputform="ma[mieć/verb:fin:sg:ter:imperf:refl.nonrefl]">Jedną koszulę <marker>ma</marker> na grzbiecie.</example>
    </rule>

    <rule name="acc ma qub nom" id="ACC_MA_QUB_NOM">
        <pattern>
            <marker>
                <token postag_regexp="yes" postag=".*acc.*"/>
                <token postag="verb:fin:sg:ter:imperf:refl.nonrefl">ma</token>
                <token postag="qub"/>
                <token postag="subst:sg:nom.*" postag_regexp="yes"/>
            </marker>
        </pattern>
        <disambig action="filterall"/>
        <example type="untouched">To jest ma przyjaciółka.</example>
        <example type="ambiguous" inputform="ma[mieć/verb:fin:sg:ter:imperf:refl.nonrefl,mój/adj:sg:nom.voc:f:pos]"
                 outputform="ma[mieć/verb:fin:sg:ter:imperf:refl.nonrefl]">Rolę <marker>ma</marker> też osada oraz kościoły.</example>
    </rule>

    <rule name="acc ma qub nom" id="ACC_MA_ADV_NOM">
        <pattern>
            <marker>
                <token postag_regexp="yes" postag=".*acc.*"/>
                <token postag="verb:fin:sg:ter:imperf:refl.nonrefl">ma</token>
                <token postag="adv.*" postag_regexp="yes"/>
                <token postag="adj:sg:acc.*" postag_regexp="yes"/>
            </marker>
        </pattern>
        <disambig action="filterall"/>
        <example type="untouched">To jest ma przyjaciółka.</example>
        <example type="ambiguous" inputform="ma[mieć/verb:fin:sg:ter:imperf:refl.nonrefl,mój/adj:sg:nom.voc:f:pos]"
                 outputform="ma[mieć/verb:fin:sg:ter:imperf:refl.nonrefl]">Zaprawdę skórę <marker>ma</marker> bardzo delikatną.</example>
    </rule>


    <rule name="formę/acc ma GEN" id="FORMA_ACC_MA_GEN">
        <pattern>
            <marker>
                <token postag_regexp="yes" postag=".*acc.*" regexp="yes">formę|kształt</token>
                <token postag="verb:fin:sg:ter:imperf:refl.nonrefl">ma</token>
                <token postag="subst:sg:gen.*" postag_regexp="yes"/>
            </marker>
        </pattern>
        <disambig action="filterall"/>
        <example type="untouched">To jest ma przyjaciółka.</example>
        <example type="ambiguous" inputform="ma[mieć/verb:fin:sg:ter:imperf:refl.nonrefl,mój/adj:sg:nom.voc:f:pos]"
                 outputform="ma[mieć/verb:fin:sg:ter:imperf:refl.nonrefl]">Formę <marker>ma</marker> pomarańczy.</example>
    </rule>

    <rule name="ma nie od parady" id="MA_NIE_OD_PARADY">
        <pattern>
            <marker>
                <token postag="verb:fin:sg:ter:imperf:refl.nonrefl">ma</token>
                <token postag="qub">nie</token>
            </marker>
            <token>od</token>
            <token>parady</token>
        </pattern>
        <disambig action="filterall"/>
        <example type="ambiguous" inputform="ma[mieć/verb:fin:sg:ter:imperf:refl.nonrefl,mój/adj:sg:nom.voc:f:pos]"
        outputform="ma[mieć/verb:fin:sg:ter:imperf:refl.nonrefl]">O, pan Ostrzeński to kombinator, głowę <marker>ma</marker> nie od parady.</example>
    </rule>

    <rule name="ma z biernikiem" id="MA_ACC">
        <pattern>
            <marker>
                <token postag="verb:fin:sg:ter:imperf:refl.nonrefl|verb:praet:sg:m1.m2.m3:ter:imperf:refl.nonrefl" postag_regexp="yes" regexp="yes">ma|miał</token>
                <token postag_regexp="yes" postag=".*acc.*"><exception postag="adv"/></token>
            </marker>
        </pattern>
        <disambig action="filterall"/>
        <example type="untouched">Ma przyjaciółka robi na drutach.</example>
        <example type="ambiguous" inputform="Ma[mieć/verb:fin:sg:ter:imperf:refl.nonrefl,mój/adj:sg:nom.voc:f:pos]"
                 outputform="Ma[mieć/verb:fin:sg:ter:imperf:refl.nonrefl]"><marker>Ma</marker> powierzchnię 462 km².</example>
    </rule>

    <rule name="ma z biernikiem" id="MA_ADV_ACC">
        <pattern>
            <marker>
                <token postag="verb:fin:sg:ter:imperf:refl.nonrefl">ma</token>
                <token postag="adv.*" postag_regexp="yes"/>
                <token postag_regexp="yes" postag=".*acc.*"><exception postag="adv"/></token>
            </marker>
        </pattern>
        <disambig action="filterall"/>
        <example type="untouched">Ma przyjaciółka robi na drutach.</example>
        <example type="ambiguous" inputform="Ma[mieć/verb:fin:sg:ter:imperf:refl.nonrefl,mój/adj:sg:nom.voc:f:pos]"
                 outputform="Ma[mieć/verb:fin:sg:ter:imperf:refl.nonrefl]"><marker>Ma</marker> bardzo dużą powierzchnię 462 km².</example>
    </rule>


    <!-- rule name="kobiety miały" id="MIALY">
        <pattern>
            <marker>
                <unify>
                    <feature id="gender"/><feature id="number"/>
                        <token postag="subst.*" postag_regexp="yes"/>
                        <token>miały</token>
                </unify>
            </marker>
        </pattern>
        <disambig action="unify"/>
        <example type="ambiguous" inputform="miały[miał/subst:pl:acc:m3,miał/subst:pl:nom:m3,miał/subst:pl:voc:m3,mieć/verb:praet:pl:m2.m3.f.n1.n2.p2.p3:ter:imperf:refl.nonrefl]"
                 outputform="miały[mieć/verb:praet:pl:m2.m3.f.n1.n2.p2.p3:ter:imperf:refl.nonrefl]">Wczoraj kobiety <marker>miały</marker> dużo pracy.</example>
    </rule -->

    <rule name="sporo to nie spora" id="SPORO">
        <pattern>
            <and>
                <token>sporo</token>
                <token inflected="yes">spora</token>
            </and>
        </pattern>
        <disambig action="remove"><wd lemma="spora"/></disambig>
    </rule>

    <rule name="jaki by -> by jako kublik" id="JAKI_BY_TU">
        <pattern>
            <token inflected="yes">jaki</token>
            <marker>
                <token>by</token>
            </marker>
        </pattern>
        <disambig postag="qub"/>
        <example type="ambiguous" inputform="by[by/comp,by/qub]" outputform="by[by/qub]">Natychmiast kombinował, jaki <marker>by</marker> tu numer wykręcić zapraszającemu.</example>
        <example type="untouched">Użył narzędzia, jakiego, by użyć tu mocnego określenia, nie powinien był używać.</example>
    </rule>

    <rule name="wiele by jeszcze" id="WIELE_BY_JESZCZE">
        <pattern>
            <token>wiele</token>
            <marker><token>by</token></marker>
            <token>jeszcze</token>
        </pattern>
        <disambig postag="qub"/>
        <example type="ambiguous" inputform="by[by/comp,by/qub]" outputform="by[by/qub]">Ciekawa to była figura i wiele <marker>by</marker> jeszcze o niej gadać.</example>
        <example type="untouched">Dałbym wiele, by jeszcze móc ją zobaczyć.</example>
    </rule>

    <rule name="predykatyw + by > kublik" id="PRED_BY">
        <pattern>
            <token postag_regexp="yes" postag="pred|verb:winien.*"/>
            <marker><token>by</token></marker>
        </pattern>
        <disambig postag="qub"/>
        <example type="ambiguous" inputform="by[by/comp,by/qub]" outputform="by[by/qub]">Oni powinni <marker>by</marker> to zrobić.</example>
        <example type="untouched">Ale nie w poprzek, jak powinna, by zagrodzić drogę nadjeżdżającej dziewczynie.</example>
    </rule>

    <rule name="„nie” na początku zdania" id="NIE_ADAMP">
        <pattern>
            <token postag="SENT_START"/>
            <token min="0" max="1" regexp="yes">&interp;</token>
            <marker>
                <token>nie</token>
            </marker>
        </pattern>
        <disambig postag="qub"/>
        <example type="ambiguous" outputform="Nie[nie/qub]" inputform="Nie[nie/conj,nie/qub,on/ppron3:pl:acc:m2.m3.f.n1.n2.p2.p3:ter:akc.nakc:praep,on/ppron3:sg:acc:n1.n2:ter:akc.nakc:praep]">— <marker>Nie</marker> słyszałeś?</example>
    </rule>

    <rule name="oklep" id="na-oklep">
        <pattern>
            <token>na</token>
            <marker>
                <token regexp="yes">oklep|oślep</token>
            </marker>
        </pattern>
        <disambig postag="qub">
        </disambig>
    </rule>

    <rulegroup name="chybił trafił" id="chybil-trafil">
        <rule>
            <pattern>
                <token>na</token>
                <marker>
                    <token>chybił</token>
                </marker>
            </pattern>
            <disambig postag="qub"/>
        </rule>
        <rule>
            <pattern>
                <token>na</token>
                <token>chybił</token>
                <marker>
                    <token>trafił</token>
                </marker>
            </pattern>
            <disambig postag="qub"/>
        </rule>
    </rulegroup>

    <rule name="obok, dookoła, wewnątrz -> adv" id="obok">
        <pattern>
            <marker>
                <token regexp="yes">obok|dookoła|wewnątrz</token>
            </marker>
            <token postag="subst:.*" postag_regexp="yes"><exception postag="subst:.*gen.*" postag_regexp="yes"/></token>
        </pattern>
        <disambig postag="adv:pos"/>
    </rule>

    <rule name="też to nie tenże" id="tez_nie_tenze">
        <pattern>
            <marker><token>też</token></marker>
        </pattern>
        <disambig postag="qub"/>
    </rule>

    <rulegroup name="mam -> subst" id="mam">
        <rule>
            <pattern>
                <token postag="prep:.*gen.*" postag_regexp="yes"/>
                <marker>
                    <token>mam</token>
                </marker>
            </pattern>
            <disambig action="filter"><match no="2" postag="subst:pl:.*" postag_regexp="yes"/></disambig>
        </rule>
    </rulegroup>

    <rule name="mam na myśli" id="mam_na_mysli">
        <pattern>
            <token postag="verb:fin:sg:pri:imperf:refl.nonrefl">mam</token>
            <token postag="prep:loc">na</token>
            <token regexp="yes" postag="subst:sg.*loc.*" postag_regexp="yes">myśli|celu|względzie</token>
        </pattern>
        <disambig action="filterall"/>
        <example type="ambiguous" inputform="mam[mama/subst:pl:gen:f,mamić/verb:impt:sg:sec:imperf:refl.nonrefl,mieć/verb:fin:sg:pri:imperf:refl.nonrefl]"
                 outputform="mam[mieć/verb:fin:sg:pri:imperf:refl.nonrefl]">Tu <marker>mam</marker> na myśli dzialałność usługową.</example>
    </rule>

    <rule name="miał(y) + inf -> verb" id="mial">
        <pattern>
            <marker>
                <token regexp="yes">miały?</token>
            </marker>
            <token postag_regexp="yes" postag="verb:inf.*"/>
        </pattern>
        <disambig action="filter" postag="verb.*"/>
    </rule>

    <!-- TODO: oznakować tak jak rzeczownik po skrócie -->
    <rule name="dr, mgr + . => qub" id="dr_mgr_kropka">
        <pattern>
            <marker>
                <token regexp="yes">dr|mgr|nr|kmdr|kmdt|arcybp|bp|abp|gen|ul</token>
            </marker>
            <token>.</token>
        </pattern>
        <disambig postag="brev:pun"/>
    </rule>

    <rule id="dr_femininum" name="pani dr">
        <pattern>
            <unify>
                <feature id="case"></feature>
                <token postag="prep.*" postag_regexp="yes"><exception postag="prep.*" negate_pos="yes" postag_regexp="yes"/><exception>co</exception></token>
                <unify-ignore>
                <marker>
                    <token>dr</token>
                </marker>
                </unify-ignore>
                <token postag="subst.*:f" postag_regexp="yes" regexp="yes">\p{Lu}\p{Ll}+<exception postag="subst.*:m1" postag_regexp="yes"/></token>
            </unify>
        </pattern>
        <disambig postag="brev:npun"/>
    </rule>

    <rule name="doktor + rzeczownik r.m. = uzgodnienie" id="doktor_profesor">
        <pattern>
            <unify>
                <feature id="case"/><feature id="gender"/><feature id="number"/>
            <token regexp="yes" inflected="yes">doktor|profesor|docent|magister<exception scope="previous">pani</exception></token>
            <token postag_regexp="yes" postag="subst:sg.*:m1" regexp="yes" inflected="yes">\p{Lu}\p{Ll}+</token>
            </unify>
        </pattern>
        <disambig action="unify"/>
        <example type="ambiguous" inputform="doktor[doktor/subst:pl:acc:f,doktor/subst:pl:dat:f,doktor/subst:pl:gen:f,doktor/subst:pl:inst:f,doktor/subst:pl:loc:f,doktor/subst:pl:nom:f,doktor/subst:pl:voc:f,doktor/subst:sg:acc:f,doktor/subst:sg:dat:f,doktor/subst:sg:gen:f,doktor/subst:sg:inst:f,doktor/subst:sg:loc:f,doktor/subst:sg:nom:f,doktor/subst:sg:nom:m1,doktor/subst:sg:voc:f]"
                 outputform="doktor[doktor/subst:sg:nom:m1]">Na klatce stał <marker>doktor</marker> Stachowiak.</example>
    </rule>

<!-- 
    <rule name="wzgledem" id="względem">
        <pattern>
            <marker>
                <token>względem<exception scope="previous">pod</exception></token>
            </marker>
            <token postag_regexp="yes" postag=".*[:\.]gen[:\.].*"/>
        </pattern>
        <disambig action="add"><wd lemma="względem" pos="prep:gen">względem</wd></disambig>
        <example type="untouched">Tu mamy piękny przykład pod względem architektury.</example>
        <example type="ambiguous" inputform="względem[wzgląd/subst:sg:inst:m3,względem/prep:gen]" outputform="względem[wzgląd/subst:sg:inst:m3,względem/prep:gen]">Tu mamy piękny przykład, <marker>względem</marker> którego nie będziemy się kierować.</example>
    </rule>
 -->
 
    <rulegroup name="winny/winien -> przymiotnik" id="winien">
        <rule>
            <pattern>
                <unify> <feature id="number"/>
                    <token postag="verb:winien.*" postag_regexp="yes" regexp="yes">win.*</token>
                    <token inflected="yes" postag="verb:.*" postag_regexp="yes">być</token>
                </unify>
            </pattern>
            <disambig action="filter" postag="adj.*"/>
            <example type="untouched">Powinien był pójść do lekarza.</example>
            <example type="ambiguous" inputform="Winni[winien/verb:winien:pl:m1.p1:ter:imperf:nonrefl,winny/adj:pl:nom.voc:m1.p1:pos,winny/subst:pl:nom:m1,winny/subst:pl:voc:m1]" outputform="Winni[winny/adj:pl:nom.voc:m1.p1:pos]"><marker>Winni</marker> są już ukarani.</example>
        </rule>
        <rule>
            <pattern>
                <unify>
                    <feature id="number"/>
                    <token postag="verb:.*" postag_regexp="yes"/>
                    <marker>
                        <token postag="verb:winien.*" postag_regexp="yes" regexp="yes">win.*</token>
                    </marker>
                </unify>
            </pattern>
            <disambig action="filter" postag="adj.*"/>
            <example type="untouched">Powinien był pójść do lekarza.</example>
            <example type="untouched">Każdy winien przestrzegać prawa!</example>
            <example type="ambiguous" inputform="winni[winien/verb:winien:pl:m1.p1:ter:imperf:nonrefl,winny/adj:pl:nom.voc:m1.p1:pos,winny/subst:pl:nom:m1,winny/subst:pl:voc:m1]" outputform="winni[winny/adj:pl:nom.voc:m1.p1:pos]">Tak mówią <marker>winni</marker>!</example>
        </rule>
    </rulegroup>

    <rule id="WINNA_LATOROSL" name="winna latorośl">
        <pattern>
            <marker><token postag="verb.*" postag_regexp="yes">winna</token></marker>
            <token>latorośl</token>
        </pattern>
        <disambig postag="adj:sg:nom.voc:f:pos"/>
        <example type="untouched">Ona była winna.</example>
        <example type="ambiguous" inputform="winna[winien/verb:winien:sg:f:ter:imperf:nonrefl,winna/subst:sg:nom:f,winna/subst:sg:voc:f,winny/adj:sg:nom.voc:f:pos]"
                 outputform="winna[winny/adj:sg:nom.voc:f:pos]">Iż <marker>winna</marker> latorośl wybrana wyda jeno ocet.</example>
    </rule>

    <rule id="WINNY_DAT_BYC" name="winny/winien -> przymiotnik w konstrukcji z datiwem">
        <pattern>
            <marker>
            <token postag="verb:winien.*" postag_regexp="yes" regexp="yes">win.*</token>
            </marker>
            <token postag=".*dat.*" postag_regexp="yes"/>
            <token inflected="yes" postag="verb:.*" postag_regexp="yes">być</token>
        </pattern>
        <disambig action="filter" postag="adj.*"/>
        <example type="ambiguous" inputform="winni[winien/verb:winien:pl:m1.p1:ter:imperf:nonrefl,winny/adj:pl:nom.voc:m1.p1:pos,winny/subst:pl:nom:m1,winny/subst:pl:voc:m1]"
                 outputform="winni[winny/adj:pl:nom.voc:m1.p1:pos]">Otóż <marker>winni</marker> mi jesteście paszę</example>
        <example type="untouched">Winna pójść do lekarza.</example>
    </rule>
<!-- 
    <rulegroup name="zdarzył w sensie niezwrotnym" id="LOS_ZDARZYL">
        <rule>
            <pattern>
                <token regexp="yes" skip="-1">los|przypadek<exception scope="next" regexp="yes">się|,</exception></token>
                <marker>
                    <token>zdarzył</token>
                </marker>
            </pattern>
            <disambig action="remove"><wd lemma="zdarzyć" pos="refl">zdarzył</wd></disambig>
            <example type="untouched">To nie przypadek, że ten wypadek zdarzył się tu.</example>
            <example type="ambiguous" inputform="zdarzył[zdarzyć/refl,zdarzyć/verb:praet:sg:ter:m:perf]" outputform="zdarzył[zdarzyć/verb:praet:sg:ter:m:perf]">Los tak <marker>zdarzył</marker>, mój panie.</example>
        </rule>
        <rule id="LOS2">
            <pattern>
                <marker>
                    <token skip="-1">zdarzył</token>
                </marker>
                <token regexp="yes">los|przypadek</token>
            </pattern>
            <disambig action="remove"><wd lemma="zdarzyć" pos="refl">zdarzył</wd></disambig>
            <example type="untouched">To nie przypadek, że ten wypadek zdarzył się tu.</example>
            <example type="ambiguous" inputform="zdarzył[zdarzyć/refl,zdarzyć/verb:praet:sg:ter:m:perf]" outputform="zdarzył[zdarzyć/verb:praet:sg:ter:m:perf]">Tak <marker>zdarzył</marker> los, mój panie.</example>
        </rule>
    </rulegroup>
 -->
 
	<!--  TODO: czy to nadal potrzebne po PoliMorfie? 
    <rule name="skrótowce jako nieodmienne" id="SKROTOWCE_IRREG">
        <pattern>
            <token postag="prep:.*" postag_regexp="yes"/>
            <marker>
                <token regexp="yes">\p{Lu}+[i]*\p{Lu}{1,4}+</token>
            </marker>
        </pattern>
        <disambig postag="subst:irreg"/>
        <example type="untouched">ONZ wystosowała pismo do redakcji Przeglądu Wędkarskiego.</example>
        <example type="ambiguous" inputform="ONZ[ONZ/subst:pl:gen:m3,ONZ/subst:sg:gen:m3]" outputform="ONZ[ONZ/subst:irreg]">Do <marker>ONZ</marker> dotarło pismo z redakcji Przeglądu Wędkarskiego.</example>
    </rule>
    -->

    <rule name="skróty z rozwinięciem" id="VERB_ACRONYM">
        <pattern case_sensitive="yes">
            <marker>
                    <token postag="verb.*" postag_regexp="yes" regexp="yes">^\p{Lu}{3}$</token>
            </marker>
            <token>(</token>
            <token regexp="yes"><match no="0" regexp_match="(.).." regexp_replace="$1.*"/></token>
            <token regexp="yes"><match no="0" regexp_match=".(.)." regexp_replace="$1.*"/></token>
            <token regexp="yes"><match no="0" regexp_match="..(.)" regexp_replace="$1.*"/></token>
            <token>)</token>
        </pattern>
        <disambig postag="brev:npun"/>
        <example type="ambiguous" inputform="IMA[imać/verb:fin:sg:ter:imperf:refl,imać/verb:fin:sg:ter:imperf:refl.nonrefl]"
                 outputform="IMA[imać/brev:npun]">krystalochemiczna klasyfikacja amfiboli <marker>IMA</marker> (International Mineralogical Association)</example>
    </rule>

    <rule name="wiodący w sensie właściwym" id="WIADACY_ADJ">
        <pattern>
            <unify> <feature id="number"/><feature id="gender"/> <feature id="case"/>
                <token skip="5" regexp="yes" inflected="yes">trasa|szlak|droga|trakt|drogi</token>
                <marker>
                    <token inflected="yes" postag="pact.*" postag_regexp="yes">wieść</token>
                </marker>
            </unify>
        </pattern>
        <disambig action="replace"><match no="1" postag_regexp="yes" postag="pact(.*):imperf:aff:refl.nonrefl" postag_replace="adj$1:pos"/></disambig>
        <example type="untouched">Tematem wiodącym tej książki są grzyby.</example>
        <example type="ambiguous" inputform="wiodącą[wieść/pact:sg:acc.inst:f:imperf:aff:refl.nonrefl]" outputform="wiodącą[wieść/adj:sg:acc.inst:f:pos]">Szedłem drogą <marker>wiodącą</marker> w stronę wioski.</example>
    </rule>

    <rule name="Jest to qub nom-> to/pred (wg NKJP manualnie anotowany)" id="TO_QUB_PREDYKATYW">
        <pattern>
            <token regexp="yes" postag="verb.*" postag_regexp="yes">jest|będzie|był[oa]?</token>
            <marker>
                <token>to</token>
            </marker>
            <token postag="qub"/>
            <token postag=".*:nom.*" postag_regexp="yes"><exception postag_regexp="yes" postag="verb:praet:sg:.*:ter.*"/></token>
        </pattern>
        <disambig action="replace"><wd pos="pred" lemma="to"/></disambig>
        <example type="untouched">To jest problem.</example>
        <example type="untouched">Będzie to znaczyło podciąć zło przy samym korzeniu.</example>
        <example type="ambiguous" inputform="to[ten/adj:sg:acc:n1.n2:pos,ten/adj:sg:nom.voc:n1.n2:pos,to/conj,to/qub,to/subst:sg:acc:n2,to/subst:sg:nom:n2]"
                 outputform="to[to/pred]" >Jest <marker>to</marker> tylko problem.</example>
        <example type="untouched">Moja była to mówiła.</example>
        <example type="untouched">Będzie to wówczas znaczyło, że to prawda.</example>
    </rule>

    <rule name="Jest to -> to/pred (wg NKJP manualnie anotowany)" id="TO_PREDYKATYW">
        <pattern>
            <token regexp="yes" postag="verb.*" postag_regexp="yes">jest|będzie|był[oa]?</token>
            <marker>
                <token>to</token>
            </marker>
                <token postag=".*:nom.*" postag_regexp="yes"><exception postag_regexp="yes" postag="verb:praet:sg:.*:ter.*"/></token>
        </pattern>
        <disambig action="replace"><wd pos="pred" lemma="to"/></disambig>
        <example type="untouched">To jest problem.</example>
        <example type="untouched">Będzie to znaczyło podciąć zło przy samym korzeniu.</example>
        <example type="ambiguous" inputform="to[ten/adj:sg:nom.voc:n1.n2:pos]"
                 outputform="to[to/pred]" >Jest <marker>to</marker> problem.</example>
        <example type="untouched">Moja była to mówiła.</example>
        <example type="untouched">Będzie to wówczas znaczyło, że to prawda.</example>
    </rule>

    <rule name="być gotowym" id="byc_gotowy">
        <pattern>
            <marker>
            <token inflected="yes">być</token>
            <token inflected="yes">gotowy</token>
            </marker>
        </pattern>
        <disambig action="filterall"/>
    </rule>

    <rule name="!być nie gotowym" id="byc_nie_gotowy">
        <pattern>
            <marker>
                <token inflected="yes">być</token>
                <token postag="qub">nie</token>
                <token inflected="yes" postag="adj.*" postag_regexp="yes">gotowy</token>
            </marker>
        </pattern>
        <disambig action="filterall"/>
    </rule>

	<!--  for za_pewne rule -->
	<rule name="pewne qub" id="pewne_qub">
		<pattern>
			<marker><token>pewne</token></marker>
		</pattern>
		<disambig action="add"><wd lemma="pewne" pos="qub">pewne</wd></disambig>
	</rule>


    <rule name="Oznaczenie przyimka za wymaganego przez czasownik" id="ZA_DEP">
        <pattern>
            <token skip="5" regexp="yes" inflected="yes">uważać|dziękować|przepraszać|uchodzić|przeprosić|uznać|uznawać|odpowiadać<exception scope="next" regexp="yes">[\p{Punct}—–„«»…&amp;&amp;[^\.]]+</exception></token>
            <marker>
                <token>za</token>
            </marker>
        </pattern>
        <disambig action="add"><wd lemma="za" pos="DEP">za</wd></disambig>
        <example type="untouched">Potrwa to za pewne kilka dni.</example>
        <example type="ambiguous" inputform="za[za/prep:acc]" outputform="za[za/DEP,za/prep:acc]">Chciałbym przeprosić <marker>za</marker> pewne nieporozumienie.</example>
    </rule>

    <rule name="pewny + rzeczownik" id="PEWNE_UNIFY">
        <pattern>
            <unify> <feature id="number"/><feature id="gender"/> <feature id="case"/>
                <token>pewne</token>
                <token postag="subst.*" postag_regexp="yes"><exception negate_pos="yes" postag_regexp="yes" postag="subst.*"/></token>
            </unify>
        </pattern>
        <disambig action="unify"/>
        <example type="untouched">Za pewne tak uważam.</example>
        <example type="ambiguous" inputform="pewne[pewien/adj:pl:acc:m2.m3.f.n1.n2.p2.p3:pos,pewne/qub,pewny/adj:pl:acc:m2.m3.f.n1.n2.p2.p3:pos]"
                 outputform="pewne[pewien/adj:pl:acc:m2.m3.f.n1.n2.p2.p3:pos,pewny/adj:pl:acc:m2.m3.f.n1.n2.p2.p3:pos]">Za <marker>pewne</marker> kwoty można kupić nawet krowę.</example>
    </rule>

    <!--  useful for removing false alarms for non-detected sentence-ends (note: it doesn't break the sentence for real) -->
    <rule name="Oznaczenie końca zdania" id="SRX_PL_FIX">
        <pattern>
            <token regexp="yes">\p{L}</token>
            <marker>
                <token>.</token>
            </marker>
            <and>
                <token inflected="yes" regexp="yes"><exception inflected="yes" regexp="yes">\p{Lu}.*</exception>\p{Ll}+</token>
                <token regexp="yes">\p{Lu}\p{Ll}+</token>
            </and>
        </pattern>
        <disambig action="add"><wd lemma="." pos="SENT_END">.</wd></disambig>
        <example type="untouched">To jest Józef R. Asdaafvafsf</example>
        <example type="ambiguous" inputform=".[.]" outputform=".[&lt;/S&gt;]">To jest cząstka B<marker>.</marker> Dopiero w niej jest cząstka A.</example>
    </rule>

    <rule id="INDZIEJ" name="kiedy indziej itp.">
        <pattern>
            <marker>
                <token regexp="yes">nigdy|kiedy|gdzie|nigdzie|gdziekolwiek</token>
            </marker>
            <token>indziej</token>
        </pattern>
        <disambig postag="adv"/>
    </rule>

    <rule id="KIEDY_ADV" name="kiedy jako adv">
    <pattern>
        <token>któż</token>
        <token postag="verb:praet:sg:m1.m2.m3:ter.*" postag_regexp="yes"/>
        <marker>
            <token>kiedy</token>
        </marker>
        </pattern>
        <disambig postag="adv"/>
        <example type="untouched">Poszedł, kiedy go wołali.</example>
        <example type="ambiguous" inputform="kiedy[kiedy/adv,kiedy/comp,kiedy/comp:comma]"
                 outputform="kiedy[kiedy/adv]">Któż widział <marker>kiedy</marker> podobne przepychy?</example>
    </rule>

    <rule id="sup_kiedy" name="kiedy jako adv po superlatywach">
        <pattern>
            <unify>
                <feature id="case"/> <feature id="number"/> <feature id="gender"/>
                <token postag="adj.*:sup" postag_regexp="yes"/>
                <token postag="subst.*" postag_regexp="yes"/>
            </unify>
                <token>,</token>
                <token inflected="yes">jaki</token>
                <marker>
                    <token>kiedy</token>
                </marker>
        </pattern>
        <disambig postag="adv"/>
        <example type="ambiguous" inputform="kiedy[kiedy/adv,kiedy/comp,kiedy/comp:comma]"
                 outputform="kiedy[kiedy/adv]">Kupił najroślejszą kobyłę, jaką <marker>kiedy</marker> w świecie widziano.</example>
    </rule>

    <rule id="sup_verb_kiedy" name="kiedy jako adv po superlatywach">
        <pattern>
            <unify>
                <feature id="case"/> <feature id="number"/> <feature id="gender"/>
                <token postag="adj.*:sup" postag_regexp="yes"/>
                <token postag="subst.*" postag_regexp="yes"/>
            </unify>
            <token>,</token>
            <unify>
                <feature id="number"/> <feature id="gender"/>
                <token inflected="yes">jaki</token>
                <token postag="verb.*" postag_regexp="yes"/>
            </unify>
            <marker>
                <token>kiedy</token>
            </marker>
        </pattern>
        <disambig postag="adv"/>
        <example type="ambiguous" inputform="kiedy[kiedy/adv,kiedy/comp,kiedy/comp:comma]"
                 outputform="kiedy[kiedy/adv]">Mojżesz, najłagodniejszy człowiek, jaki był <marker>kiedy</marker> na ziemi, srodze pokarał zuchwalce.</example>
    </rule>

    <rule id="JESLI_KIEDY_ADV" name="jeśli / jeżeli + kiedy jako adv">
        <pattern>
            <token regexp="yes">jeśli|jeżeli</token>
            <token regexp="yes">kto|pani?</token>
            <marker>
                <token>kiedy</token>
            </marker>
        </pattern>
        <disambig postag="adv"/>
        <example type="untouched">Poszedł, kiedy go wołali.</example>
        <example type="ambiguous" inputform="kiedy[kiedy/adv,kiedy/comp,kiedy/comp:comma]"
                 outputform="kiedy[kiedy/adv]">Mów pan: jeśli kto <marker>kiedy</marker> widział…</example>
    </rule>


    <rule id="MALO_KIEDY" name="mało/rzadko kiedy -> adv">
        <pattern>
            <token postag="adv:pos" regexp="yes">mało|rzadko</token>
            <token postag="adv">kiedy</token>
        </pattern>
        <disambig action="filterall"></disambig>
    </rule>

    <rule id="nie_zal" name="nie żal -> pred">
        <pattern>
            <token postag="SENT_START" skip="-1"><exception scope="next">się</exception></token>
            <marker>
                <token postag="pred" skip="-1">żal<exception scope="previous" negate="yes">nie</exception><exception scope="next">się</exception></token>
            </marker>
            <token postag="SENT_END"/>
        </pattern>
        <disambig action="filterall"/>
        <example type="untouched">Nie żal się, kretynie.</example>
        <example type="untouched">Ty się nie żal, kretynie.</example>
        <example type="ambiguous" inputform="żal[żal/adv,żal/pred,żal/subst:sg:acc:m3,żal/subst:sg:nom:m3,żalić/verb:impt:sg:sec:imperf:refl]"
                 outputform="żal[żal/pred]">Góralu, czy ci nie <marker>żal</marker>?</example>
    </rule>

    <rule id="NIE_QUB_PRED" name="nie przed predykatywem">
        <pattern>
            <marker>
                <token>nie</token>
            </marker>
            <token postag="pred"><exception negate_pos="yes" postag="pred"></exception></token>
        </pattern>
        <disambig postag="qub"></disambig>
    </rule>

    <rule id="NIE_QUB_WINIEN" name="nie przed powinien">
        <pattern>
            <marker>
                <token postag="qub">nie</token>
                <token postag="verb:winien.*" postag_regexp="yes"><exception inflected="yes">gotowy</exception></token>
            </marker>
        </pattern>
        <disambig action="filterall"/>
    </rule>


    <rule id="NIE_QUB" name="nie w funkcji negacji czasownika, przymiotnika i przysłówka w st. wyższym">
        <pattern>
            <marker>
                <token postag="qub">nie<exception scope="previous" postag_regexp="yes" postag="prep:acc.*"></exception></token>
                <token postag="verb.*|pred|ad[vj].*:com" postag_regexp="yes"><exception>czczą</exception><exception regexp="yes">dosyć|dość|pora</exception><exception postag="verb:winien.*" postag_regexp="yes"/></token>
            </marker>
        </pattern>
        <disambig action="filterall"/>
        <example type="ambiguous" inputform="nie[nie/conj,nie/qub,on/ppron3:pl:acc:m2.m3.f.n1.n2.p2.p3:ter:akc.nakc:praep,on/ppron3:sg:acc:n1.n2:ter:akc.nakc:praep]" outputform="nie[nie/qub]">Proszę, <marker>nie</marker> jedź sam!</example>
        <example type="untouched">Martwię się o nie.</example>
    </rule>

    <rule id="nie_qub_tyle" name="nie tyle to qub adv wg NKJP">
        <pattern>
            <marker>
                <token postag="qub">nie</token>
                <token postag="adv">tyle</token>
            </marker>
        </pattern>
        <disambig action="filterall"/>
    </rule>

    <rule id="NIE_NIEPPRON" name="„nie” to nie zaimek, jeśli bez przyimka">
        <pattern>
            <token><exception postag="prep.*acc.*" postag_regexp="yes"></exception></token>
            <marker><token>nie</token></marker>
        </pattern>
        <disambig action="remove" postag="ppron3.*:praep"/>
        <example type="untouched">Chodziło o nie.</example>
        <example type="ambiguous" inputform="nie[nie/conj,nie/qub,on/ppron3:pl:acc:m2.m3.f.n1.n2.p2.p3:ter:akc.nakc:praep,on/ppron3:sg:acc:n1.n2:ter:akc.nakc:praep]"
                 outputform="nie[nie/conj,nie/qub]">To <marker>nie</marker> przelewki.</example>
    </rule>

    <rule id="nie_tylko" name="nie tylko">
        <pattern>
            <marker>
                <token postag="qub">nie</token>
                <token postag="qub">tylko</token>
            </marker>
        </pattern>
        <disambig action="filterall"/>
        <example type="ambiguous" inputform="tylko[tylko/conj,tylko/qub]" outputform="tylko[tylko/qub]">To nie <marker>tylko</marker> grubianin, ale i cham.</example>
    </rule>

    <rule id="GORZEJ_OD" name="gorzej jako przysłówek">
        <pattern>
            <marker>
                <token>gorzej</token>
            </marker>
            <token regexp="yes">ode?|niż</token>
        </pattern>
        <disambig postag="adv:com"/>
        <example type="ambiguous" inputform="gorzej[gorzeć/verb:impt:sg:sec:imperf:nonrefl,źle/adv:com]"
                 outputform="gorzej[źle/adv:com]">Piszczę nie <marker>gorzej</marker> od piszczałki.</example>
    </rule>

    <rule name="Blokada reguły interpunkcyjnej dla daje vu" id="DAJE_VU_BLOKADA">
        <pattern>
            <marker>
                <token>daje</token>
            </marker>
            <token>vu</token>
        </pattern>
        <disambig action="replace"><match no="1" postag_regexp="yes" postag="verb:fin:sg:ter:imperf:refl.nonrefl" postag_replace="qub"/></disambig>
        <example type="untouched">On daje mu w ryj.</example>
        <example type="ambiguous" inputform="daje[dawać/verb:fin:sg:ter:imperf:refl.nonrefl]" outputform="daje[dawać/qub]">On przeżył <marker>daje</marker> vu.</example>
    </rule>

    <rule name="immunize_Windows" id="KOSHER_WINDOWS">
        <pattern>
            <token>dla</token>
            <marker>
                <token>Windows</token>
            </marker>
        </pattern>
        <disambig action="immunize"/>
    </rule>

    <rule name="al." id="al_brev">
        <pattern>
            <marker><token>al</token></marker>
            <token spacebefore="no">.</token>
        </pattern>
        <disambig postag="brev:pun"/>
    </rule>
    <rule name="al dente" id="al_dente">
        <pattern>
            <marker><token>al</token></marker>
            <token regexp="yes">dente|fresco</token>
        </pattern>
        <disambig postag="ign"/>
    </rule>
    <rule name="art deco" id="art_brev">
        <pattern>
            <marker><token>art</token></marker>
            <token regexp="yes">d[eé]co</token>
        </pattern>
        <disambig action="replace"><wd lemma="art" pos="ign"/></disambig>
    </rule>
    <rule name="m.in." id="M_IN">
    	<pattern case_sensitive="yes">
    		<marker>
                <token>m</token>
    	        <token>.</token>
    	        <token regexp="yes">i[mn]</token>
            </marker>
            <token>.</token>
    	</pattern>
    	<disambig action="replace">
            <wd pos="brev:pun" lemma="między"/>
            <wd lemma="."/>
            <wd pos="brev:pun" lemma="innymi"/></disambig>
    	<example type="ambiguous" inputform="m[metr/brev:npun]" outputform="m[między/brev:pun]">Jest to <marker>m</marker>.in. kretyn.</example>
    </rule>
    
    <rule name=".pl, .jp, .al" id="PL_DOMAIN_NAME">
    	<pattern>
    		<token>.</token>
    		<marker>
    		<token spacebefore="no" regexp="yes">pl|jp|al</token>
    		</marker>
    	</pattern>
    	<disambig action="remove"><wd pos="brev:pun"/></disambig>
    	<example type="ambiguous" inputform="pl[plac/brev:pun]" outputform="pl[pl]">Alergie.mp.<marker>pl</marker> - serwis</example>
    	<example type="untouched">Adres: pl. Zbawiciela 122</example>
		<example type="ambiguous" inputform="jp[jak poprzednio/brev:pun]" outputform="jp[jp]">Alergie.mp.<marker>jp</marker> - serwis</example>
    	<example type="untouched">Skrót - jp.</example>
    </rule>
    <rule name="l'art" id="L_ART">
        <pattern>
            <token>l</token>
            <token regexp="yes">&apost;</token>
            <marker><token>art</token></marker>
        </pattern>
        <disambig action="replace"><wd pos="ign" lemma="art"/></disambig>
        <example type="untouched">Art. 234 KC</example>
        <example type="ambiguous" inputform="art[artykuł/brev:pun]"
                 outputform="art[art/ign]">L'<marker>art</marker> du cuisinier</example>
    </rule>
    <rule name="KC" id="KC">
    	<pattern case_sensitive="yes">
    		<marker><token>KC</token></marker>
    		<token regexp="yes">KPZR|PZPR</token>
    	</pattern>
    	<disambig action="remove"><wd lemma="kodeks cywilny"/></disambig>
    	<example type="ambiguous" inputform="KC[KC/subst:pl:acc:m3,KC/subst:pl:acc:n2,KC/subst:pl:dat:m3,KC/subst:pl:dat:n2,KC/subst:pl:gen:m3,KC/subst:pl:gen:n2,KC/subst:pl:inst:m3,KC/subst:pl:inst:n2,KC/subst:pl:loc:m3,KC/subst:pl:loc:n2,KC/subst:pl:nom:m3,KC/subst:pl:nom:n2,KC/subst:pl:voc:m3,KC/subst:pl:voc:n2,KC/subst:sg:acc:m3,KC/subst:sg:acc:n2,KC/subst:sg:dat:m3,KC/subst:sg:dat:n2,KC/subst:sg:gen:m3,KC/subst:sg:gen:n2,KC/subst:sg:inst:m3,KC/subst:sg:inst:n2,KC/subst:sg:loc:m3,KC/subst:sg:loc:n2,KC/subst:sg:nom:m3,KC/subst:sg:nom:n2,KC/subst:sg:voc:m3,KC/subst:sg:voc:n2,kodeks cywilny/brev:pun]" outputform="KC[KC/subst:pl:acc:m3,KC/subst:pl:acc:n2,KC/subst:pl:dat:m3,KC/subst:pl:dat:n2,KC/subst:pl:gen:m3,KC/subst:pl:gen:n2,KC/subst:pl:inst:m3,KC/subst:pl:inst:n2,KC/subst:pl:loc:m3,KC/subst:pl:loc:n2,KC/subst:pl:nom:m3,KC/subst:pl:nom:n2,KC/subst:pl:voc:m3,KC/subst:pl:voc:n2,KC/subst:sg:acc:m3,KC/subst:sg:acc:n2,KC/subst:sg:dat:m3,KC/subst:sg:dat:n2,KC/subst:sg:gen:m3,KC/subst:sg:gen:n2,KC/subst:sg:inst:m3,KC/subst:sg:inst:n2,KC/subst:sg:loc:m3,KC/subst:sg:loc:n2,KC/subst:sg:nom:m3,KC/subst:sg:nom:n2,KC/subst:sg:voc:m3,KC/subst:sg:voc:n2]"><marker>KC</marker> KPZR</example>
    </rule>
    <rule name="KL" id="KL">
        <pattern case_sensitive="yes">
            <marker><token>KL</token></marker>
            <token><exception>.</exception></token>
        </pattern>
        <disambig action="remove"><wd pos="brev:pun"/></disambig>
        <example type="ambiguous" inputform="KL[klarnet/brev:pun,klasa/brev:pun]" outputform="KL[KL]"><marker>KL</marker> Warschau</example>
        <example type="untouched">WYCIECZKA KL. III</example>
        <example type="untouched">Jestem w kl. VIIb.</example>
    </rule>
    <rule name="KS" id="KS">
    <pattern case_sensitive="yes">
            <marker><token>KS</token></marker>
            <token regexp="yes">\p{Lu}\p{Ll}+</token>
    </pattern>
        <disambig action="replace"><wd pos="brev:npun" lemma="klub sportowy"/></disambig>
        <example type="untouched">Ks. Lemański jada pomidory z biskupem.</example>
        <example type="ambiguous" inputform="KS[ksiądz/brev:pun,książę/brev:pun]" outputform="KS[klub sportowy/brev:npun]">Takim klubem był <marker>KS</marker> Admira w Poznaniu.</example>
    </rule>
    <rule id="MIN_BREV" name="min jako skrót">
        <pattern>
            <marker><token>min</token></marker>
            <token spacebefore="no">.<exception postag="SENT_END"/></token>
        </pattern>
        <disambig postag="brev:pun"/>
        <example type="ambiguous" inputform="min[mina/subst:pl:gen:f,minimum/brev:pun,minuta/brev:npun]" outputform="min[minimum/brev:pun]">Dokładnie mieszamy, po czym odstawiamy na <marker>min</marker>. 30 minut, by smaki się połączyły.</example>
    </rule>
    <rule id="OK_BREV" name="ok jako skrót">
        <pattern>
            <marker><token>ok</token></marker>
            <token spacebefore="no">.<exception postag="SENT_END"/></token>
        </pattern>
        <disambig postag="brev:pun"/>
        <example type="ambiguous" inputform="ok[oko/subst:pl:gen:n2,około/brev:pun]" outputform="ok[około/brev:pun]">Naraziło go to na ostre ataki ze strony Seweryna Goszczyńskiego i Leszka Dunina Borkowskiego, w wyniku których zaprzestał publikowania swoich utworów, pisując do szuflady przez <marker>ok</marker>. 18 lat.</example>
    </rule>
    <rule id="OS_PROC_BREV" name="os, proc, red, dyr, ew jako skrót">
        <pattern>
            <marker><token regexp="yes">ew|os|proc|red|dyr</token></marker>
            <token spacebefore="no">.<exception postag="SENT_END"/></token>
        </pattern>
        <disambig postag="brev:pun"/>
        <example type="ambiguous" inputform="os[osa/subst:pl:gen:f,osiedle/brev:pun]" outputform="os[osiedle/brev:pun]">Jest to to jezioro zwane Balaton, położone na <marker>os</marker>. Bartodzieje.</example>
    </rule>
    <rule id="w_proc" name="w proc. => brev">
        <pattern>
            <token>w</token>
            <marker><token>proc</token></marker>
            <token spacebefore="no">.</token>
        </pattern>
        <disambig postag="brev:pun"/>
    </rule>
    <rule name="R - nie rok" id="NON_START_POS_R">
    	<pattern case_sensitive="yes">
    		<marker><token>R<exception scope="previous" postag="SENT_START"></exception></token></marker>
    	</pattern>
    	<disambig action="remove"><wd lemma="rok"/></disambig>
    	<example type="untouched">R. 2012</example>
    	<example type="ambiguous" inputform="R[rok/brev:pun]" outputform="R[R]">Enancjomer <marker>R</marker> jest ważny.</example>
    </rule>
    <rule name="in w wyrażeniach łacińskich" id="in">
    	<pattern>
    		<marker><token>in</token></marker>
    		<token regexp="yes">absentia|abstracto|aeternum|aqua|blanco|crudo|dubio|effectu|effigie|extenso|extremis|fidem|flagranti|genere|gratiam|gremio|margine|medias|memoriam|minus|octavo|persona|plus|praxi|puncto|saecula|spe|statu|triplo|vitro|vivo|rebus|bello</token>
    	</pattern>
    	<disambig postag="ign"/>
    	<example type="ambiguous" inputform="in[in/subst:pl:acc:n2,in/subst:pl:dat:n2,in/subst:pl:gen:n2,in/subst:pl:inst:n2,in/subst:pl:loc:n2,in/subst:pl:nom:n2,in/subst:pl:voc:n2,in/subst:sg:acc:n2,in/subst:sg:dat:n2,in/subst:sg:gen:n2,in/subst:sg:inst:n2,in/subst:sg:loc:n2,in/subst:sg:nom:n2,in/subst:sg:voc:n2,inaczej/brev:pun]" outputform="in[in/ign]">Zapłodnienie <marker>in</marker> vitro</example>
    	<example type="untouched">M.in. dwóch ministrów</example>
    </rule>
    <rule name="em" id="em">
    	<pattern>
    		<token regexp="yes">&apost;</token>
    		<marker>
    		<token spacebefore="no">em</token>
    		</marker>
    	</pattern>
    	<disambig action="remove"><wd lemma="emerytowany"/></disambig>
    	<example type="untouched">Był to em. płk James Bond</example>
    	<example type="ambiguous" inputform="em[em/subst:pl:acc:n2,em/subst:pl:dat:n2,em/subst:pl:gen:n2,em/subst:pl:inst:n2,em/subst:pl:loc:n2,em/subst:pl:nom:n2,em/subst:pl:voc:n2,em/subst:sg:acc:n2,em/subst:sg:dat:n2,em/subst:sg:gen:n2,em/subst:sg:inst:n2,em/subst:sg:loc:n2,em/subst:sg:nom:n2,em/subst:sg:voc:n2,emerytowany/brev:pun]" outputform="em[em/subst:pl:acc:n2,em/subst:pl:dat:n2,em/subst:pl:gen:n2,em/subst:pl:inst:n2,em/subst:pl:loc:n2,em/subst:pl:nom:n2,em/subst:pl:voc:n2,em/subst:sg:acc:n2,em/subst:sg:dat:n2,em/subst:sg:gen:n2,em/subst:sg:inst:n2,em/subst:sg:loc:n2,em/subst:sg:nom:n2,em/subst:sg:voc:n2]">Maximilienem de Robespierre'<marker>em</marker> (Wojciech Pszoniak)</example>
    </rule>
    <rule name="P=NP" id="NP_NOT_BREV">
        <pattern case_sensitive="yes">
            <marker>
                <token>P</token>
                <token>=</token>
                <token>NP</token>
            </marker>
        </pattern>
        <disambig action="replace"><wd pos="ign"/><wd lemma="=" pos="interp"/><wd pos="ign"/></disambig>
        <example type="ambiguous" inputform="P[pan/brev:pun,patrz/brev:pun,piętro/brev:pun,punkt/brev:pun]"
                 outputform="P[P/ign]">Problem, czy <marker>P</marker>=NP, jest nadal otwarty.</example>
        <example type="ambiguous" inputform="P[pan/brev:pun,patrz/brev:pun,piętro/brev:pun,punkt/brev:pun]"
                 outputform="P[P/ign]">Problem, czy <marker>P</marker> = NP, jest nadal otwarty.</example>
    </rule>
    <rule name="litery jako zmienne, nie skróty" id="nie_brev_tylko_zmienna">
        <pattern>
            <marker><token regexp="yes" postag="brev:pun">\p{L}</token></marker>
            <token>=</token>
        </pattern>
        <disambig action="remove" postag="brev:pun"/>
        <example type="ambiguous" inputform="r[rok/brev:pun]" outputform="r[r]"><marker>r</marker> = 0; s = 1</example>
    </rule>
    <rule name="litery jako litery" id="nie_brev_tylko_nazwa_litery">
        <pattern>
        <token regexp="yes">\p{L}</token>
        <token>,</token>
        <marker><token regexp="yes" postag="brev:pun">\p{L}</token></marker>
        <token>,</token>
        <token regexp="yes">\p{L}</token>
        </pattern>
        <disambig action="remove" postag="brev:pun"/>
        <example type="ambiguous" inputform="p[pan/brev:pun,patrz/brev:pun,piętro/brev:pun,punkt/brev:pun]"
                 outputform="p[p]">Porządkowanie alfabetyczne ma postać: a, ą, ã, b, c, d, e, é, ë, f, g, h, i, j, k, l, ł, m, n, ń, o, ò, ó, ô, <marker>p</marker>, r, s, t, u, ù, w, y, z, ż.</example>
    </rule>
    <rule name="skróty cytowane" id="nie_brev_pun_tylko_przywolanie">
        <pattern>
            <token regexp="yes">[«»„]</token>
            <marker>
            <token spacebefore="no" postag="brev:pun"/>
            </marker>
            <token spacebefore="no" regexp="yes">[”«»]</token>
        </pattern>
        <disambig action="remove" postag="brev:pun"/>
        <example type="ambiguous" inputform="r[rok/brev:pun]" outputform="r[r]">Litera „<marker>r</marker>”</example>
    </rule>
    <rule name="am jako wyraz niemiecki" id="AM_NIEM">
        <pattern case_sensitive="yes">
            <token regexp="yes">\p{Lu}\p{Ll}+</token>
            <marker><token>am</token></marker>
            <token regexp="yes">\p{Lu}\p{Ll}+</token>
        </pattern>
        <disambig action="remove" postag="brev:pun"/>
        <example type="ambiguous" inputform="am[amerykański/brev:pun]" outputform="am[am]">Frankfurt <marker>am</marker> Main</example>
        <example type="untouched">Ten wyraz to „meliorise” (am. meliorize).</example>
    </rule>
    <rule name="Pan Am" id="PAN_AM">
        <pattern case_sensitive="yes">
            <token>Pan</token>
            <marker><token>Am</token></marker>
        </pattern>
        <disambig action="remove" postag="brev:pun"/>
        <example type="ambiguous" inputform="Am[amerykański/brev:pun]" outputform="Am[Am]">Samolot linii Pan <marker>Am</marker> leciał do Libii.</example>
    </rule>

    <rule name="&amp;lt;br" id="lt_br">
        <pattern>
            <token regexp="yes">.*&amp;lt</token>
            <token>;</token>
            <marker><token>br</token></marker>
        </pattern>
        <disambig action="remove"><wd pos="brev:pun"/></disambig>
    </rule>

    <rule name="br" id="br_element">
        <pattern>
            <token>&lt;</token>
            <marker>
                <token>br</token>
            </marker>
        </pattern>
        <disambig action="remove"><wd pos="brev:pun"/></disambig>
    </rule>


    <rule name="Center for" id="CENTER_FOR"> <!-- wyrażenie angielskie w polskim tekście -->
        <pattern case_sensitive="yes">
            <marker>
                <token>Center</token>
                <token>for</token>
            </marker>
        </pattern>
        <disambig action="replace"><wd pos="ign"/><wd pos="ign"/></disambig>
    </rule>

    <rule name="for Windows" id="FOR_WINDOWS"> <!-- wyrażenie angielskie w polskim tekście -->
        <pattern case_sensitive="yes">
            <marker>
                <token>for</token>
                <token>Windows</token>
            </marker>
        </pattern>
        <disambig action="replace"><wd pos="ign"/><wd pos="ign"/></disambig>
    </rule>

    <rule name="US OPEN" id="US_Open">
        <pattern>
            <marker>
                <token>US</token>
            </marker>
            <token>Open</token>
        </pattern>
        <disambig postag="ign"/>
    </rule>

    <rule name="glam rock" id="GLAM_ROCK">
        <pattern>
            <marker><token>glam</token></marker>
            <token inflected="yes">rock</token>
        </pattern>
        <disambig action="replace"><wd pos="ign" lemma="glam"/></disambig>
        <example type="ambiguous" inputform="glam[glamać/verb:impt:sg:sec:imperf:nonrefl]"
                 outputform="glam[glam/ign]">Był przedstawicielem <marker>glam</marker> rocka.</example>
    </rule>
     
    <rule name="1 luty" id="NUM_LUTY">
    	<pattern>
    	<token regexp="yes">[1-2]?\d</token>
    	<marker><token>luty</token></marker>
    	</pattern>    	
    	<disambig action="remove"><wd lemma="lut"></wd></disambig>
    	<example type="untouched">To są zimne luty, przelutuj je.</example>
    <example type="ambiguous" inputform="luty[lut/subst:pl:nom:m3,luty/adj:sg:nom.voc:m1.m2.m3:pos,luty/subst:sg:nom:m3]" outputform="luty[luty/adj:sg:nom.voc:m1.m2.m3:pos,luty/subst:sg:nom:m3]">25 <marker>luty</marker> to data.</example>
    </rule>


    <rule id="no_coz" name="no cóż -> interj">
        <pattern>
            <marker>
            <token>no</token>
            <token>cóż</token>
            </marker>
        </pattern>
        <disambig action="replace"><wd lemma="no" pos="interj"/><wd lemma="cóż" pos="interj"/></disambig>
    </rule>

    <rule name="no, halo - interj" id="no_halo_interj">
    	<pattern>
    		<token postag="SENT_START"/>
    		<marker>
    		<token regexp="yes">no|halo|cóż</token>
    		</marker>
    	</pattern>
    	<disambig postag="interj"></disambig>
    </rule>

    <rule name="3 maja" id='NUM_MAJA'>
        <pattern>
        <token regexp="yes">[1-3]?\d</token>
        <marker>
            <token regexp='yes'>maja|września</token>
        </marker>
        </pattern>
        <disambig postag="subst:sg:gen:m3"/>
    </rule>

    <rule name="koniec maja" id='SUBST_MAJA'>
        <pattern>
            <token regexp="yes" inflected="yes">połowa|początek|koniec|tydzień</token>
            <marker>
                <token regexp='yes'>maja|września</token>
            </marker>
        </pattern>
        <disambig postag="subst:sg:gen:m3"/>
    </rule>

    <rule id="no_impt_interj" name="no jako wykrzyknik po czasowniku w trybie rozkazującym">
        <pattern>
            <token postag="verb:impt.*" postag_regexp="yes"/>
            <marker><token>no</token></marker>
        </pattern>
        <disambig postag="interj"/>
        <example type="ambiguous" inputform="no[no/interj,no/qub,no/subst:pl:acc:n2,no/subst:pl:dat:n2,no/subst:pl:gen:n2,no/subst:pl:inst:n2,no/subst:pl:loc:n2,no/subst:pl:nom:n2,no/subst:pl:voc:n2,no/subst:sg:acc:n2,no/subst:sg:dat:n2,no/subst:sg:gen:n2,no/subst:sg:inst:n2,no/subst:sg:loc:n2,no/subst:sg:nom:n2,no/subst:sg:voc:n2]"
                 outputform="no[no/interj]">Pawlak, podejdź <marker>no</marker> do płota!</example>
        <example type="untouched">Aktor teatru no</example>
    </rule>

    <rule name="teatr no" id="teatr_no">
        <pattern>
            <unify>
                <feature id="case"/><feature id="number"/>
                <token inflected="yes" regexp="yes">teatr|dramat|przedstawienie|sztuka</token>
                <token>no</token>
            </unify>
        </pattern>
        <disambig action="unify"/>
        <example type="untouched">No, no!</example>
        <example type="ambiguous" inputform="no[no/interj,no/qub,no/subst:pl:acc:n2,no/subst:pl:dat:n2,no/subst:pl:gen:n2,no/subst:pl:inst:n2,no/subst:pl:loc:n2,no/subst:pl:nom:n2,no/subst:pl:voc:n2,no/subst:sg:acc:n2,no/subst:sg:dat:n2,no/subst:sg:gen:n2,no/subst:sg:inst:n2,no/subst:sg:loc:n2,no/subst:sg:nom:n2,no/subst:sg:voc:n2]"
                 outputform="no[no/subst:sg:loc:n2]">W teatrze <marker>no</marker> maska to omote.</example>
    </rule>

    <rule name="Big Ben" id="BIG_BEN">
        <pattern case_sensitive="yes">
            <marker>
                <token>Big</token>
            </marker>
            <token inflected="yes">Ben</token>
        </pattern>
        <disambig action="replace"><wd pos="burk" lemma="Big"/></disambig>
    </rule>

    <rule name="Tel Awiw" id="TEL_AWIW">
    	<pattern case_sensitive="yes">
    		<marker>
    			<token>Tel</token>
    		</marker>
    		<token inflected="yes">Awiw</token>
    	</pattern>
    	<disambig postag="burk"/>
    </rule>

    <rule name="Sierra Leone" id="SIERRA_LEONE">
        <pattern case_sensitive="yes">
            <marker>
                <token>Sierra</token>
            </marker>
            <token inflected="yes" regexp="yes">Leone|Nevada</token>
        </pattern>
        <disambig postag="burk"/>
    </rule>

    <rule id="sir_X" name="Sir X = > ndm">
        <!-- tu można by kopiować w sumie znacznik z następnego wyrazu, ale nie da się napisać takiej reguły -->
        <pattern>
            <marker>
                <token>sir</token>
            </marker>
            <token postag="subst.*" postag_regexp="yes" regexp="yes">\p{Lu}\p{Ll}+
            <exception postag="subst:sg:nom:m1"/>
            </token>
        </pattern>
        <disambig postag="burk"></disambig>
        <example type="untouched">To jest Sir Karl Popper.</example>
    </rule>

    <rule name="OS X" id="OS_X">
        <pattern case_sensitive="yes">
            <marker>
                <token>OS</token>
            </marker>
            <token>X</token>
        </pattern>
        <disambig action="replace"><wd pos="burk" lemma="OS"/></disambig>
    </rule>
    
    <rule name="n.e." id="NE_BREV">
    	<pattern>
    		<token>n</token>
    		<token>.</token>
    		<marker>
    		<token>e</token>
    		</marker>
    		<token>.</token>
    	</pattern>
    	<disambig action="add"><wd lemma="era" pos="brev:pun"/></disambig>
    </rule>
    
    <rule name="nn" id="NN_BREV">
    	<pattern>
    		<token>nn</token>
    		<token>.</token>
    	</pattern>
    	<disambig postag="brev:pun"/>
    </rule>	
    
    <rule name="red. nauk." id="red_nauk_brev">
    	<pattern>
    	<token>red</token>
    	<token>.</token>
    	<marker>
    	<token>nauk</token>
    	</marker>
    	<token>.</token>
    	</pattern>
    	<disambig action="add"><wd lemma="naukowy" pos="brev:pun"/></disambig>
    </rule>
    
    <rule name="n.p.m." id="npm">
    	<pattern>
    		<token regexp="yes">[np]</token>
    		<token>.</token>
    		<token>p</token>
    		<token>.</token>
    		<marker>
    			<token>m</token>
    		</marker>
    		<token>.</token>
    	</pattern>
    	<disambig action="replace"><wd lemma="morza" pos="brev:pun"/></disambig>
    	<example type="untouched">Przebiegł 20 m.</example>
    	<example type="ambiguous" inputform="m[metr/brev:npun]" outputform="m[morza/brev:pun]">Ta góra ma wysokość 20 m n. p. <marker>m</marker>.</example>
    </rule>


    <rule name="K" id="K">
    	<pattern>
    	<token case_sensitive="yes">K</token>
    	</pattern>
    	<disambig action="remove"><wd lemma="koło"/></disambig>
    </rule>

    <rule id="k_bez_kropki" name="k bez genetiwu to nie skrót typowy">
        <pattern>
            <marker>
                <token case_sensitive="yes">k</token>
            </marker>
            <token>
                <exception>.</exception>
                <exception postag="subst:sg:gen.*" postag_regexp="yes" regexp="yes">\p{Lu}\p{Ll}+</exception>
            </token>
        </pattern>
        <disambig action="remove"><wd lemma="koło"/></disambig>
    </rule>

    <rule name="wiadomo" id="Wiadomo">
    	<pattern>    		
    		<marker><token>wiadomo</token></marker>
    	</pattern>
    	<disambig postag="pred"/>
    	<example type="ambiguous" inputform="wiadomo[wiadomo/adv:pos,wiadomo/pred]" outputform="wiadomo[wiadomo/pred]">Jak <marker>wiadomo</marker>, nie tylko Marsjanie lubili pierogi.</example>
    </rule>
    
    <rulegroup name="można" id="mozna">
        <rule>
            <pattern>
              <marker>
                <and>
                <token postag="pred" skip="-1">można
                    <exception scope="next" postag_regexp="yes" postag="verb.*(sg|pl).*|(interp|comp):comma"/>
                </token>
                <token postag="adj:sg:nom.voc:f:pos"/>
                </and>
              </marker>
            <token postag="verb:inf.*" postag_regexp="yes"/>
        </pattern>
        <disambig postag="pred"/>
        <example type="untouched">Jest to można kobieta.</example>
        <example type="ambiguous" inputform="Można[można/pred,możny/adj:sg:nom.voc:f:pos]" outputform="Można[można/pred]"><marker>Można</marker> spotkać go w lasach.</example>
       </rule>
        <rule>
            <pattern>
                <token skip="1" postag="verb:inf.*" postag_regexp="yes"><exception scope="next" postag="(interp|comp):comma" postag_regexp="yes"/></token>
                <marker>
                    <and>
                        <token postag="pred">można</token>
                        <token postag="adj:sg:nom.voc:f:pos"/>
                    </and>
                </marker>
            </pattern>
            <disambig postag="pred"/>
            <example type="untouched">Jest to można kobieta.</example>
            <example type="ambiguous" inputform="można[można/pred,możny/adj:sg:nom.voc:f:pos]" outputform="można[można/pred]">Spotkać <marker>można</marker> go w lasach.</example>
            <example type="ambiguous" inputform="można[można/pred,możny/adj:sg:nom.voc:f:pos]" outputform="można[można/pred]">Spotkać go <marker>można</marker> w lasach.</example>
        </rule>
    </rulegroup>

    <rulegroup name="można by/było" id="mozna_by">
        <rule>
        <pattern>
            <marker><token skip="2">można</token></marker>
            <token regexp="yes">by(?:ło)?</token>
        </pattern>
        <disambig postag="pred"/>
        <example type="untouched">To jest można królowa.</example>
        <example type="ambiguous" inputform="Można[można/pred,możny/adj:sg:nom.voc:f:pos]" outputform="Można[można/pred]"><marker>Można</marker> by, że tak powiem, to zrobić.</example>
        <example type="ambiguous" inputform="Można[można/pred,możny/adj:sg:nom.voc:f:pos]" outputform="Można[można/pred]"><marker>Można</marker> było to zrobić.</example>
        </rule>
        <rule>
            <pattern>
                <token>było</token>
                <marker><token>można</token></marker>
            </pattern>
            <disambig postag="pred"/>
            <example type="untouched">To jest można królowa.</example>
            <example type="ambiguous" inputform="można[można/pred,możny/adj:sg:nom.voc:f:pos]" outputform="można[można/pred]">Wówczas było <marker>można</marker>.</example>
        </rule>
    </rulegroup>

    <rule id="aby_qub" name="aby jako kublik">
        <pattern>
        <token>czy</token>
        <token postag="ppron.*" postag_regexp="yes"/>
        <marker><token>aby</token></marker>
        </pattern>
        <disambig postag="qub"></disambig>
        <example type="ambiguous" inputform="aby[aby/comp,aby/comp:comma,aby/qub]"
                 outputform="aby[aby/qub]">— Czy oni <marker>aby</marker> umieją chodzić około roli?</example>
    </rule>

    <rulegroup name="chociaż/choć jako kublik" id="CHOC">
     <rule>
      <pattern>
        <marker>
          <token regexp="yes">chociaż|choć</token>
        </marker>
        <token regexp="yes" inflected="yes">raz|trochę|jeden|przez|odrobinę|przypadkiem</token>
      </pattern>
      <disambig postag="qub"/>
      <example type="untouched">Dziewczyna jest bystra, choć nieładna.</example>
      <example type="ambiguous" inputform="chociaż[chociaż/comp,chociaż/comp:comma,chociaż/qub]" outputform="chociaż[chociaż/qub]">Każdy człowiek <marker>chociaż</marker> raz w życiu chciałby zjeść krowę.</example>
    </rule>
    <rule>
        <pattern>
            <token postag="qub">może</token>
            <token regexp="yes" postag="qub">chociaż|choć</token>
        </pattern>
        <disambig action="filterall"/>
        <example type="untouched">Dziewczyna jest bystra, choć nieładna.</example>
        <example type="ambiguous" inputform="chociaż[chociaż/comp,chociaż/comp:comma,chociaż/qub]" outputform="chociaż[chociaż/qub]">Może <marker>chociaż</marker> teraz zjesz krowę!</example>
    </rule>
    <rule>
        <pattern>
            <marker><token regexp="yes" postag="qub">chociaż|choć<exception scope="previous">,</exception></token></marker>
            <token/>
            <token postag="SENT_END|interp:comma" postag_regexp="yes"/>
        </pattern>
        <disambig postag="qub"/>
        <example type="ambiguous"
                inputform="choć[choć/comp,choć/comp:comma,choć/qub]"
                outputform="choć[choć/qub]">niech no ujrzę, że ktoś z was tknie go <marker>choć</marker> palcem!</example>
    </rule>
    </rulegroup>

    
    <rule name="około jako kublik" id="OKOLO">
      <pattern>
        <token regexp="yes">przez|na|za</token>
        <marker>
        <token>około</token>            
        </marker>
      </pattern>
      <disambig postag="qub"/>
      <example type="untouched">Trwało to około godziny.</example>
      <example type="ambiguous" inputform="około[około/adv:pos,około/prep:gen,około/qub]" outputform="około[około/qub]">Ciągnęło się to przez <marker>około</marker> godzinę.</example>
    </rule>

    <rule name="Anno Domini to nie wołacz" id="Anno_xxx">
        <pattern>
            <marker>
            <token>Anno</token>
            </marker>
            <token>Domini</token>
        </pattern>
        <disambig action="replace"><wd pos="xxx" lemma="annus"/></disambig>
        <example type="untouched">Anno, umyj zęby!</example>
        <example type="ambiguous" inputform="Anno[Anna/subst:sg:voc:f]" outputform="Anno[annus/xxx]"><marker>Anno</marker> Domini MMXX</example>
    </rule>

    <rule id="OWCA_MECZY" name="meczy jako czasownik">
        <pattern>
            <token skip="4" regexp="yes">owca|koza|baran</token>
            <marker><token>meczy</token></marker>
        </pattern>
        <disambig postag="meczeć/verb:fin:sg:ter:imperf:nonrefl"/>
    </rule>

    <rule id="TO_NIE_ZARTY" name="to nie żarty">
        <pattern>
            <token>to</token>
            <marker>
            <token postag="qub">nie</token>
            <token postag="subst:pl:nom:m3">żarty</token>
            </marker>
        </pattern>
        <disambig action="filterall"/>
        <example type="ambiguous" inputform="żarty[zrzeć/ppas:sg:acc:m3:imperf:aff,zrzeć/ppas:sg:nom.voc:m1.m2.m3:imperf:aff,żart/subst:pl:acc:m3,żart/subst:pl:nom:m3,żart/subst:pl:voc:m3,żarty/adj:sg:acc:m3:pos,żarty/adj:sg:nom.voc:m1.m2.m3:pos,żreć/ppas:sg:acc:m3:imperf:aff,żreć/ppas:sg:nom.voc:m1.m2.m3:imperf:aff]"
                 outputform="żarty[żart/subst:pl:nom:m3]">Kognitywistyka to nie <marker>żarty</marker>.</example>
    </rule>

    <rule id="ZYCIE_NIE_ZYC" name="życie to nie gerundium od żyć">
        <pattern>
            <marker><token>życie</token></marker>
        </pattern>
        <disambig action="remove"><wd lemma="żyć"/></disambig>
    </rule>

    <rulegroup id="OBCE_APOSTROFY" name="odmiana nazwisk i nazw obcych">
        <rule>   <!-- dopełniacz potencjalny -->
            <pattern>
                <token postag="prep:gen.*" postag_regexp="yes"/>
                <marker>
                    <token postag_regexp="yes" postag="subst:.*nom.*" regexp="yes">.*[eys]$</token>
                </marker>
                <token spacebefore="no" regexp="yes">&apost;</token>
                <token spacebefore="no" regexp="yes">a|ego</token>
            </pattern>
            <disambig action="replace"><match no="2" postag_regexp="yes" postag="(subst:sg.*):nom:(.*)" postag_replace="$1:gen:$2"/></disambig>
            <example type="ambiguous" inputform="Montaigne[Montaigne/subst:sg:nom:m1]" outputform="Montaigne[Montaigne/subst:sg:gen:m1]">U <marker>Montaigne</marker>'a czytamy następujący passus.</example>
            <example type="untouched">Mark'a samochodu</example>
            <example type="ambiguous" outputform="Jarry[Jarry/subst:sg:gen:m1]" inputform="Jarry[Jarry/subst:pl:nom:m1,Jarry/subst:pl:voc:m1,Jarry/subst:sg:nom:m1,Jarry/subst:sg:voc:m1]">Książka uczyniła z <marker>Jarry</marker>'ego artystę.</example>
        </rule>
        <rule>   <!-- dopełniacz potencjalny w przymiotniku odsłownym -->
        <pattern>
            <token postag="prep:gen.*" postag_regexp="yes"/>
            <marker>
                <token postag_regexp="yes" postag="subst:.*nom.*" regexp="yes">.*[eys]$</token>
            </marker>
            <token spacebefore="no" regexp="yes">&apost;</token>
            <token spacebefore="no">owskiej</token>
        </pattern>
        <disambig action="replace"><match no="2" postag_regexp="yes" postag="subst:sg.*:nom:(.*)" postag_replace="adj:sg:gen:f:pos"/></disambig>
            <example type="ambiguous" inputform="Searle[Searle/subst:sg:nom:m1]"
                     outputform="Searle[Searle/adj:sg:gen:f:pos]">Jest tak niezależnie od <marker>Searle</marker>’owskiej koncepcji intencjonalności.</example>
        </rule>
        <rule>   <!-- biernik potencjalny -->
            <pattern>
                <token postag="prep:acc.*" postag_regexp="yes"/>
                <marker>
                    <token postag_regexp="yes" postag="subst:.*nom.*" regexp="yes">.*[eys]$</token>
                </marker>
                <token spacebefore="no" regexp="yes">&apost;</token>
                <token spacebefore="no" regexp="yes">a|ego</token>
            </pattern>
            <disambig action="replace"><match no="2" postag_regexp="yes" postag="(subst:sg.*):nom:(.*)" postag_replace="$1:acc:$2"/></disambig>
            <example type="ambiguous" inputform="Montaigne[Montaigne/subst:sg:nom:m1]" outputform="Montaigne[Montaigne/subst:sg:acc:m1]">To wszystko przez <marker>Montaigne</marker>'a.</example>
            <example type="untouched">Mark'a samochodu</example>
            <example type="ambiguous" outputform="Jarry[Jarry/subst:sg:acc:m1]" inputform="Jarry[Jarry/subst:pl:nom:m1,Jarry/subst:pl:voc:m1,Jarry/subst:sg:nom:m1,Jarry/subst:sg:voc:m1]">Wszystko przez <marker>Jarry</marker>'ego!</example>
        </rule>
        <rule>
            <pattern>
                <token postag="prep:dat.*" postag_regexp="yes"/>
                <marker>
                    <token postag_regexp="yes" postag="subst:.*nom.*" regexp="yes">.*[eys]$</token>
                </marker>
                <token spacebefore="no" regexp="yes">&apost;</token>
                <token spacebefore="no">owi</token>
            </pattern>
            <disambig action="replace"><match no="2" postag_regexp="yes" postag="(.*):nom:(.*)" postag_replace="$1:dat:$2"/></disambig>
            <example type="ambiguous" inputform="Montaigne[Montaigne/subst:sg:nom:m1]" outputform="Montaigne[Montaigne/subst:sg:dat:m1]">To wszystko dzięki <marker>Montaigne</marker>'owi.</example>
            <example type="untouched">Jestem rybak'iem.</example>
        </rule>
        <rule>
            <pattern>
                <token postag="prep:inst.*" postag_regexp="yes"/>
                <marker>
                    <token postag_regexp="yes" postag="subst:.*nom.*" regexp="yes">.*[eys]$</token>
                </marker>
                <token spacebefore="no" regexp="yes">&apost;</token>
                <token spacebefore="no">em</token>
            </pattern>
            <disambig action="replace"><match no="2" postag_regexp="yes" postag="(.*):nom:(.*)" postag_replace="$1:inst:$2"/></disambig>
            <example type="ambiguous" inputform="Montaigne[Montaigne/subst:sg:nom:m1]" outputform="Montaigne[Montaigne/subst:sg:inst:m1]">Porównajmy go z <marker>Montaigne</marker>'em.</example>
            <example type="untouched">Jestem rybak'iem.</example>
        </rule>
        <rule>
            <pattern>
                <token postag="prep:loc.*" postag_regexp="yes"/>
                <marker>
                    <token postag_regexp="yes" postag="subst:.*nom.*" regexp="yes">.*[eys]$</token>
                </marker>
                <token spacebefore="no" regexp="yes">&apost;</token>
                <token spacebefore="no">u</token>
            </pattern>
            <disambig action="replace"><match no="2" postag_regexp="yes" postag="(.*):nom:(.*)" postag_replace="$1:loc:$2"/></disambig>
            <example type="ambiguous" inputform="Montaigne[Montaigne/subst:sg:nom:m1]" outputform="Montaigne[Montaigne/subst:sg:loc:m1]">Rozmawiajmy o <marker>Montaigne</marker>'u.</example>
            <example type="untouched">Bajka o rybak'u.</example>
        </rule>
    </rulegroup>

    <rule name="proc to skrót" id="prov_brev_pun">
        <pattern>
            <token regexp="yes">\d+</token>
            <marker>
                <token>proc</token>
            </marker>
            <token>.</token>
        </pattern>
        <disambig postag="brev:pun"/>
    </rule>

    <rule name="potencjalne brev" id="heuristic_brev_pun">
    <pattern>
    <marker>
      <token postag="UNKNOWN" regexp="yes">[\p{Ll}&amp;&amp;[^aeouiyęąó]][\p{Ll}&amp;&amp;[^aeouiyęąó]]+</token>
    </marker>
      <token>.</token>
    </pattern>
    <disambig postag="brev:pun"/>
    <example type="untouched">To był XX w.</example>
    <example type="ambiguous" inputform="mghr[mghr]" outputform="mghr[mghr/brev:pun]">To jest <marker>mghr</marker>. Lubiwicz.</example>
    </rule>

    <rule name="niedz" id="niedz_brev">
        <pattern>
            <marker>
                <token>niedz</token>
            </marker>
            <token>.</token>
        </pattern>
        <disambig action="add"><wd pos="brev:pun" lemma="niedziela"></wd></disambig>
    </rule>

    <rule name="pt." id="pt_piatek_brev">
        <pattern>
            <marker>
                <token>pt</token>
            </marker>
            <token spacebefore="no">.</token>
            <token regexp="yes">[,–—\-\d\)]+</token>
        </pattern>
        <disambig action="add"><wd pos="brev:pun" lemma="piątek"></wd></disambig>
    </rule>

    <rule name="pt." id="pt_piatek_brev_2">
        <pattern>
            <marker>
                <token>pt</token>
            </marker>
            <token spacebefore="no" postag="SENT_END">.</token>
        </pattern>
        <disambig action="replace"><wd pos="brev:pun" lemma="piątek"></wd></disambig>
    </rule>

    <rule name="por. to porucznik" id="por_brev">
        <pattern>
            <marker>
                <token>por</token>
            </marker>
            <token>.</token>
            <token regexp="yes">\p{Lu}\p{Ll}+</token>
        </pattern>
        <disambig action="replace"><wd pos="brev:pun" lemma="porucznik"/></disambig>
    </rule>


    <rule id="PRZE_ZEMNIE" name="zemnie -> xxx">
        <pattern>
            <token>prze</token>
            <marker><token>zemnie</token></marker>
        </pattern>
        <disambig postag="ign"/>
    </rule>

    <rule id="DA_VINCI" name="Leonardo da Vinci, viola da gamba -> ign">
        <pattern>
            <marker>
                <token>da</token>
            </marker>
            <token regexp="yes">Vinci|gamba</token>
        </pattern>
        <disambig postag="ign"/>
    </rule>

    <rule id="HOT_DOG" name="hot dog">
        <pattern>
            <marker><token>hot</token></marker>
            <token inflected="yes">dog</token>
        </pattern>
        <disambig action="replace"><wd lemma="hot" pos="ign"/></disambig>
    </rule>

    <rulegroup name="co innego" id="CO_INNEGO">
        <rule>
            <pattern>
                <marker>
                    <token>co</token>
                </marker>
                <token>innego</token>
            </pattern>
            <disambig action="add"><wd lemma="co" pos="co_innego">co</wd></disambig>
            <example type="untouched">To było coś innego.</example>
            <example type="ambiguous" inputform="co[co/comp,co/prep:acc,co/prep:nom,co/qub,co/subst:sg:acc:n2,co/subst:sg:gen:n2,co/subst:sg:nom:n2]" outputform="co[co/co_innego,co/comp,co/prep:acc,co/prep:nom,co/qub,co/subst:sg:acc:n2,co/subst:sg:gen:n2,co/subst:sg:nom:n2]">To było <marker>co</marker> innego.</example>
        </rule>
        <rule>
            <pattern>
                <marker>
                    <token>czym</token>
                </marker>
                <token>innym</token>
            </pattern>
            <disambig action="add"><wd lemma="co" pos="czym_innym">czym</wd></disambig>
            <example type="untouched">To było coś innego.</example>
            <example type="ambiguous" inputform="czym[co/subst:sg:loc:n2]" outputform="czym[co/czym_innym,co/subst:sg:loc:n2]">Mowa o <marker>czym</marker> innym.</example>
        </rule>
    </rulegroup>


    <rule name="co drugi" id="CO_DRUGI">
        <pattern>
            <marker>
                <token postag="qub">co<exception scope="previous">,</exception></token>
            </marker>
            <token inflected="yes" regexp="yes">drugi|trzeci|czwarty|piąty|szósty|siódmy|ósmy|dziewiąty|dziesiąty</token>
        </pattern>
        <disambig postag="qub"/>
        <example type="untouched">To było coś innego.</example>
        <example type="ambiguous" inputform="co[co/comp,co/prep:acc,co/prep:nom,co/qub,co/subst:sg:acc:n2,co/subst:sg:gen:n2,co/subst:sg:nom:n2]"
                 outputform="co[co/qub]">W czasie wojny zginął <marker>co</marker> drugi.</example>
    </rule>

    <rule name="co niemiara" id="co_niemiara">
        <pattern>
            <marker>
                <token postag="qub">co</token>
                <token postag="burk">niemiara</token>
            </marker>
        </pattern>
        <disambig action="filterall"/>
        <example type="ambiguous" inputform="co[co/comp,co/prep:acc,co/prep:nom,co/qub,co/subst:sg:acc:n2,co/subst:sg:gen:n2,co/subst:sg:nom:n2]"
                 outputform="co[co/qub]">Pracy miałem <marker>co</marker> niemiara.</example>
    </rule>

    <rule id="co_qub_com_sup" name="co jako kublik przed stopniem wyższym i najwyższym">
        <pattern>
            <unify>
                <feature id="case"/>
                <token postag_regexp="yes" postag="prep.*"/>
                <unify-ignore>
                    <marker>
                    <token>co</token>
                    </marker>
                </unify-ignore>
                <token postag="ad[vj].*(?:com|sup)" postag_regexp="yes"/>
            </unify>
        </pattern>
        <disambig action="replace"><wd pos="qub" lemma="co"/></disambig>
        <example type="ambiguous" inputform="co[co/subst:sg:acc:n2]"
                 outputform="co[co/qub]">Postroili się też na to swoje święto w <marker>co</marker> najbogatsze żupany, szuby, kiereje.</example>
        <example type="ambiguous" inputform="co[co/comp,co/prep:acc,co/prep:nom,co/qub,co/subst:sg:acc:n2,co/subst:sg:gen:n2,co/subst:sg:nom:n2]" outputform="co[co/qub]">Przy <marker>co</marker> trudniejszych fragmentach robił sobie notatki.</example>
        <example type="untouched">I, co najważniejsze, jemy kiełbasę.</example>
    </rule>

    <rulegroup name="To co...? -> conj" id="TO_CO">
        <rule>
            <pattern>
                <token postag="SENT_START"/>
                <token min="0" max="1">no</token>
                <marker>
                    <token>to</token>
                </marker>
                <token skip="-1" regexp="yes">co|kto</token>
                <token postag="SENT_END">?</token>
            </pattern>
            <disambig postag="conj"/>
            <example type="untouched">To co zrobiłeś jest chamstwem.</example>
            <example type="ambiguous" inputform="To[ten/adj:sg:acc:n1.n2:pos,ten/adj:sg:nom.voc:n1.n2:pos,to/conj,to/qub,to/subst:sg:acc:n2,to/subst:sg:nom:n2]" outputform="To[to/conj]"><marker>To</marker> co mam zrobić?</example>
            <example type="ambiguous" inputform="to[ten/adj:sg:acc:n1.n2:pos,ten/adj:sg:nom.voc:n1.n2:pos,to/conj,to/qub,to/subst:sg:acc:n2,to/subst:sg:nom:n2]" outputform="to[to/conj]">No <marker>to</marker> co mam zrobić?</example>
        </rule>
        <rule>
            <pattern>
                <token postag="SENT_START"/>
                <token min="0" max="1">no</token>
                <marker>
                    <token>to</token>
                </marker>
                <token skip="-1" regexp="yes">co|kto</token>
                <token>?</token>
                <token>.</token>
                <token>.</token>
                <token postag="SENT_END">.</token>
            </pattern>
            <disambig postag="conj"/>
            <example type="untouched">To co zrobiłeś jest chamstwem.</example>
            <example type="ambiguous" inputform="To[ten/adj:sg:acc:n1.n2:pos,ten/adj:sg:nom.voc:n1.n2:pos,to/conj,to/qub,to/subst:sg:acc:n2,to/subst:sg:nom:n2]" outputform="To[to/conj]"><marker>To</marker> co mam zrobić?...</example>
            <example type="ambiguous" inputform="to[ten/adj:sg:acc:n1.n2:pos,ten/adj:sg:nom.voc:n1.n2:pos,to/conj,to/qub,to/subst:sg:acc:n2,to/subst:sg:nom:n2]" outputform="to[to/conj]">No <marker>to</marker> co mam zrobić?...</example>
        </rule>
    </rulegroup>

    <rule id="AD_FINEM" name="ad finem -> zwrot obcojęzyczny">
        <pattern>
            <token>ad</token>
            <marker><token>finem</token></marker>
        </pattern>
        <disambig postag="xxx"/>
    </rule>

    <rule id="PRZEZ_LAT_KILKA" name="Przez lat kilka – bez komunikatu o błędzie w PREP_CASUS">
        <pattern>
            <token>przez</token>
            <marker>
                <token regexp="yes">lat|tygodni|chwil|minut|godzin</token>
            </marker>
            <token postag="num:pl.*acc.*" postag_regexp="yes"/>
        </pattern>
        <disambig action="immunize"/>
    </rule>

    <rule id="CHOC_JOTA" name="choć nie jako spójnik">
        <pattern>
            <marker>
                <token>choć</token>
            </marker>
            <token inflected="yes">jota</token>
        </pattern>
        <disambig postag="qub"/>
    </rule>

    <rule id="JAK_ULAL" name="jak ulał -> bez przecinka">
        <pattern>
            <token><exception>,</exception></token>
            <token>jak</token>
            <marker><token>ulał</token></marker>
        </pattern>
        <disambig action="immunize"/>
    </rule>

    <rule id="JAK_MOGL" name="jak mógł -> bez przecinka">
        <pattern>
            <token skip="4" postag="verb:praet:sg:m1.m2.m3:ter.*" postag_regexp="yes"><exception scope="next">,</exception></token>
            <token>jak</token>
            <marker><token>mógł</token></marker>
        </pattern>
        <disambig action="immunize"/>
    </rule>

    <rulegroup id="BOG_WIE_SKAD" name="Bóg wie skąd - bez komunikatu o braku przecinka, bo to partykuła">
    <rule>
        <pattern case_sensitive="yes">
            <token regexp="yes">Bóg|licho</token>
            <token min="0" max="1">jeden</token>
            <marker>
                <token>wie</token>
                <token regexp="yes">co|kto|kiedy|dlaczego|gdzie|jak|skąd|dokąd|czemu</token>
            </marker>
        </pattern>
        <disambig action="immunize"/>
    </rule>
        <rule>
            <pattern>
                <token>licho</token>
                <token>nie</token>
                <marker>
                    <token>wie</token>
                    <token regexp="yes" inflected="yes">co|kto|kiedy|dlaczego|gdzie|jak|skąd|dokąd|czemu|jaki|który</token>
                </marker>
            </pattern>
            <disambig action="immunize"/>
        </rule>

        <rule>
        <pattern case_sensitive="yes">
            <token skip="1" regexp="yes">Bóg|licho<exception scope="next" negate="yes" regexp="yes">jeden|wie</exception></token>
            <marker>
                <token>wie</token>
                <token>z</token>
            </marker>
            <token regexp="yes">czego|kim</token>
        </pattern>
        <disambig action="immunize"/>
    </rule>
    <rule>
        <pattern case_sensitive="yes">
            <token skip="1" regexp="yes">Bóg|licho<exception scope="next" negate="yes" regexp="yes">jeden|wie</exception></token>
            <marker>
                <token>wie</token>
                <token regexp="yes">po|[zn]a</token>
            </marker>
            <token>co</token>
        </pattern>
        <disambig action="immunize"/>
    </rule>
    <rule>
        <pattern case_sensitive="yes">
            <token skip="1" regexp="yes">Bóg|licho<exception scope="next" negate="yes" regexp="yes">jeden|wie</exception></token>
            <marker>
                <token>wie</token>
                <token regexp="yes">[zo]</token>
            </marker>
            <token>czym</token>
        </pattern>
        <disambig action="immunize"/>
    </rule>
    <rule>
        <pattern case_sensitive="yes">
            <token skip="1" regexp="yes">Bóg|licho<exception scope="next" negate="yes" regexp="yes">jeden|wie</exception></token>
            <marker>
                <token>wie</token>
                <token>do</token>
            </marker>
            <token>kogo</token>
        </pattern>
        <disambig action="immunize"/>
    </rule>
    </rulegroup>

    <rulegroup id="NIE_WIADOMO_SKAD" name="nie wiadomo co - bez komunikatu o braku przecinka, bo to partykuła">
     <rule>
        <pattern>
            <token>nie</token>
            <marker>
                <token regexp="yes">wiadomo|wiedzieć</token>
                <token regexp="yes">co|kto|kiedy|dlaczego|gdzie|jak|skąd|dokąd|czemu</token>
            </marker>
        </pattern>
        <disambig action="immunize"/>
    </rule>
    <rule>
        <pattern>
            <token>nie</token>
            <marker>
                <token regexp="yes">wiadomo|wiedzieć</token>
                <token>z</token>
            </marker>
            <token regexp="yes">czego|kim</token>
        </pattern>
        <disambig action="immunize"/>
    </rule>
    <rule>
        <pattern>
            <token>nie</token>
            <marker>
                <token regexp="yes">wiadomo|wiedzieć</token>
                <token regexp="yes">po|[zn]a</token>
            </marker>
            <token>co</token>
        </pattern>
        <disambig action="immunize"/>
    </rule>
    <rule>
        <pattern>
            <token>nie</token>
            <marker>
                <token regexp="yes">wiadomo|wiedzieć</token>
                <token regexp="yes">[zo]</token>
            </marker>
            <token>czym</token>
        </pattern>
        <disambig action="immunize"/>
    </rule>
    <rule>
        <pattern>
            <token>nie</token>
            <marker>
                <token regexp="yes">wiadomo|wiedzieć</token>
                <token>do</token>
            </marker>
            <token regexp="yes">kogo|czego</token>
        </pattern>
        <disambig action="immunize"/>
    </rule>
    </rulegroup>

    <!--
    <rule id="WYPISZ_WYMALUJ" name="wypisz wymaluj - bez przecinka">
        <pattern>
            <token>wypisz</token>
            <marker>
                <token>wymaluj</token>
            </marker>
        </pattern>
        <disambig action="immunize"/>
    </rule>

    <rule id="RAD_NIERAD" name="rad nierad - bez przecinka">
        <pattern>
            <token inflected="yes">rad</token>
            <marker><token inflected="yes">nierad</token></marker>
        </pattern>
        <disambig action="immunize"/>
    </rule>


    -->

    <rule id="CO_KON_WYSKOCZY" name="co koń wyskoczy - bez przecinka">
        <pattern>
            <marker><token>co</token>
            <token>koń</token>
            <token regexp="yes">(?:wy)?skoczy</token>
            </marker>
        </pattern>
        <disambig action="immunize"/>
    </rule>

    <rule id="CO_SIE_ZOWIE" name="co się zowie - bez przecinka">
        <pattern>
            <marker>
            <token>co</token>
            <token>się</token>
            <token>zowie</token>
            </marker>
        </pattern>
        <disambig action="immunize"/>
    </rule>

    <rule id="NA_CZYM_SWIAT_STOI" name="kląć/przeklinać na czym świat stoi - bez przecinka">
        <pattern>
            <marker><token>na</token>
            <token>czym</token>
            <token regexp="yes">świat|ziemia</token>
            <token>stoi</token>
            </marker>
        </pattern>
        <disambig action="immunize"/>
    </rule>

    <rule id="JAK_SIE_PATRZY" name="jak się patrzy - bez przecinka">
        <pattern>
            <marker>
                <token>jak</token>
                <token>się</token>
                <token>patrzy</token>
            </marker>
        </pattern>
        <disambig action="immunize"/>
    </rule>

    <rule id="ANI_CHYBI" name="ani chybi - bez przecinka">
        <pattern>
            <token>ani</token>
            <marker>
            <token>chybi</token>
            </marker>
        </pattern>
        <disambig action="immunize"/>
    </rule>

    <rule id="PREP_CO_BADZ" name="wyrażenie przyimkowe z co + bądź - bez przecinków">
        <pattern>
            <marker>
            <unify>
                <feature id="case"></feature>
                <token postag="prep:.*" postag_regexp="yes"><exception>niby</exception></token>
                <token inflected="yes">co</token>
            </unify>
                <token>bądź</token>
            </marker>
            <token negate="yes"><match no="0"/></token>
        </pattern>
        <disambig action="immunize"/>
    </rule>

    <rule id="JAKI_BADZ_X" name="jaki bądź xxx – bez przecinka">
        <pattern>
            <marker>
                <token inflected="yes">jaki</token>
            <token>bądź</token>
            </marker>
            <token postag_regexp="yes" postag="subst.*"><exception>co</exception></token>
        </pattern>
        <disambig action="immunize"/>
    </rule>

    <rule id="JAKI_TAKI" name="jaki taki - nie wymaga przecinka">
        <pattern>
            <marker><token inflected="yes">jaki</token></marker>
            <token><match no="0" regexp_match="^j(.*)" regexp_replace="t$1"></match></token>
        </pattern>
        <disambig action="immunize"/>
    </rule>

    <rule id="Z_GLUPIA_FRANT" name="z głupia frant">
        <pattern>
            <token>z</token>
            <token>głupia</token>
            <token>frant</token>
        </pattern>
        <disambig action="immunize"/>
    </rule>

    <rule id="PUNKT_NUM" name="1)">
        <pattern>
            <token regexp="yes">\d<exception scope="previous">(</exception></token>
            <marker>
                <token spacebefore="no">)</token>
            </marker>
            <token/>
        </pattern>
        <disambig action="immunize"/>
    </rule>

    <rule id="I_i_II" name="I i II"> <!-- suppress in WORD_REPEAT rule -->
        <pattern case_sensitive="yes">
            <marker>
            <token>I</token>
            <token>i</token>
            </marker>
            <token>II</token>
        </pattern>
        <disambig action="immunize"/>
    </rule>

    <rule id="W_W_BREV" name="w w. XIX"> <!-- suppress in word repeat rule -->
        <pattern>
            <token>w</token>
            <marker><token postag="brev:pun">w</token></marker>
            <token>.</token>
        </pattern>
        <disambig action="immunize"/>
    </rule>

    <rule id="TO_TO_ZE" name="to to, że"> <!-- suppress in word repeat rule -->
        <pattern>
            <token>to</token>
            <marker><token>to</token></marker>
            <token>,</token>
            <token regexp="yes" inflected="yes">że|iż|co</token>
        </pattern>
        <disambig action="immunize"/>
    </rule>

    <rule id="TRA_TA_TA" name="tra ta ta"> <!-- suppress in word repeat rule -->
        <pattern>
            <token>tra</token>
            <marker><token>ta</token></marker>
            <token>ta</token>
        </pattern>
        <disambig action="immunize"/>
    </rule>

    <rule id="HO_HO" name="ho ho!"> <!-- suppress in word repeat rule -->
        <pattern>
            <token>ho</token>
            <marker><token>ho</token></marker>
        </pattern>
        <disambig action="immunize"/>
    </rule>

    <rule id="W_NIE_NIE" name="w/na/o nie nie"> <!-- suppress in word repeat rule -->
        <pattern>
            <token regexp="yes">[wo]|[zn]a</token>
            <marker><token>nie</token></marker>
            <token>nie</token>
        </pattern>
        <disambig action="immunize"/>
    </rule>

    <rule id="KAVA_KAVA" name="kava kava"> <!-- suppress in word repeat rule -->
        <pattern>
            <token>kava</token>
            <marker><token>kava</token></marker>
        </pattern>
        <disambig action="immunize"/>
    </rule>

    <rule id="LEDWO_LEDWO" name="ledwo ledwo">  <!-- suppress in word repeat rule -->
        <pattern>
            <token>ledwo</token>
            <marker><token>ledwo</token></marker>
        </pattern>
        <disambig action="immunize"/>
    </rule>

    <rule id="LEDWIE_LEDWIE" name="ledwie ledwie"> <!-- suppress in word repeat rule -->
        <pattern>
            <token>ledwie</token>
            <marker><token>ledwie</token></marker>
        </pattern>
        <disambig action="immunize"/>
    </rule>

    <rule id="I_I" name="Józef I i">               <!-- suppress in word repeat rule -->
        <pattern case_sensitive="yes">
            <token regexp="yes">\p{Lu}\p{Ll}+</token>
            <token>I</token>
            <marker><token>i</token></marker>
        </pattern>
        <disambig action="immunize"/>
    </rule>

    <rule id="NIE_NIE" name="nie_ppron_nie_qub">    <!-- suppress in word repeat rule -->
        <pattern>
            <marker>
                <token negate_pos="yes" postag="qub">nie</token>
            </marker>
            <token negate_pos="yes" postag="ppron.*" postag_regexp="yes">nie</token>
        </pattern>
        <disambig action="immunize"/>
    </rule>

    <rule id="Liczby_000_000" name="zera w tysiącach">    <!-- suppress in word repeat rule -->
        <pattern>
            <token regexp="yes">\d+</token>
            <marker><token>000</token>
            <token>000</token>
            </marker>
        </pattern>
        <disambig action="immunize"/>
    </rule>

    <rule id="VOO_VOO" name="Voo Voo">  <!-- suppress in word repeat rule -->
        <pattern case_sensitive="yes">
            <marker><token>Voo</token></marker>
            <token>Voo</token>
        </pattern>
        <disambig action="immunize"/>
    </rule>

    <rule id="W_JAKIE_POL" name="W jakie pół godziny - nie wymaga przecinka">
        <pattern>
            <token postag="prep:.*" postag_regexp="yes"/>
            <marker>
                <token>jakie</token>
            </marker>
            <token postag="num:.*" postag_regexp="yes"/>
        </pattern>
        <disambig action="immunize"/>
    </rule>
    
    <rule id="prez" name="prez. Komorowski">
      <pattern>
        <token regexp="yes">prez|cz|prob|urzęd|pol</token>
        <token spacebefore="no">.</token>
      </pattern>
      <disambig action="ignore_spelling"/>
    </rule>
    
    <rule id="compounds" name="Przymiotniki złożone">
      <pattern>
        <marker>
        <token postag="adja"/>
        </marker>
        <token spacebefore="no">-</token>
        <token postag="adj:.*" postag_regexp="yes"></token>
      </pattern>
      <disambig action="ignore_spelling"></disambig>
    </rule>

    <rule id="compounds_2" name="Przymiotniki złożone występujące co najmniej dwukrotnie">
        <pattern>
            <marker>
            <token postag="adja"/>
            </marker>
            <token spacebefore="no">-</token>
            <token>,</token>
        </pattern>
        <disambig action="ignore_spelling"></disambig>
    </rule>

    <rule id="compounds_3" name="Przymiotniki złożone występujące co najmniej dwukrotnie">
        <pattern>
            <marker>
                <token postag="adja"/>
            </marker>
            <token spacebefore="no">-</token>
            <token postag="conj"/>
        </pattern>
        <disambig action="ignore_spelling"></disambig>
    </rule>

    <rule id="koglimogli" name="kogli-mogli">
        <pattern>
            <token postag="subst:pl:gen:m3">kogli</token>
            <token>-</token>
            <token postag="subst:pl:gen:m3">mogli</token>
        </pattern>
        <disambig action="filterall"/>
    </rule>

    <rule id="mogli" name="mogli bez kogli to czasownik (kaskada z poprzednią regułą)">
        <pattern>
            <token postag="verb:praet:pl:m1.p1:ter:imperf:nonrefl">mogli</token>
        </pattern>
        <disambig action="filterall"/>
    </rule>


    <rule id='KONSKI_ZAB' name="końskiego zębu - dobra pisownia">
      <pattern>
        <token>końskiego</token>
         <marker>
          <token>zębu</token>
         </marker>      
      </pattern>
      <disambig action="ignore_spelling"/>      
    </rule>
    
    <rule id="LICZBY_RZYMSKIE" name="Pomijaj liczby rzymskie">
        <pattern case_sensitive="yes">
            <token regexp="yes">(?:M*(?:D?C{0,3}|C[DM])(XC|XL|L?X{0,3})(IX|IV|V?I{0,3}))(?:-(?:M*(?:D?C{0,3}|C[DM])(XC|XL|L?X{0,3})(IX|IV|V?I{0,3})))?</token>
        </pattern>
        <disambig action="ignore_spelling"/>
    </rule>

    <rule id="SPOLKA_AKCYJNA_SA" name="SA w nazwach spółek">
        <pattern case_sensitive="yes">
            <token regexp="yes">\p{Lu}.+</token>
            <token>SA</token>
        </pattern>
        <disambig action="ignore_spelling"/>
    </rule>

    <rule id="SZ_PAN" name="Sz. Pan/Pani">
        <pattern>
            <marker>
                <token>Sz</token>
            </marker>
            <token>.</token>
            <token inflected="yes" regexp="yes" case_sensitive="no">Pani?</token>
        </pattern>
        <disambig action="ignore_spelling"/>
    </rule>

    <rule id="KATOW" name="Katow.">
        <pattern case_sensitive="yes">
            <marker>
            <token>Katow</token>
            </marker>
            <token spacebefore="no">.</token>
        </pattern>
        <disambig action="ignore_spelling"/>
    </rule>

    <rule id="SPOLDZ" name="spółdz">
        <pattern>
            <marker><token>spółdz</token></marker>
            <token spacebefore="no">.</token>
        </pattern>
        <disambig action="ignore_spelling"/>
    </rule>

    <rule id="SAO_PAULO_SPELLING" name="Sao Paulo to poprawna nazwa">
        <pattern case_sensitive="yes">
            <marker><token>Sao</token></marker>
            <token>Paulo</token>
        </pattern>
        <disambig action="ignore_spelling"/>
    </rule>

    <rule id="MULTIPLE_HYPHENS" name="dywizy - jeden token w naszym układzie">
        <pattern>
            <token regexp="yes">-+</token>
        </pattern>
        <disambig action="ignore_spelling"/>
    </rule>

    <rule id="GDZIEZES_SPELLING" name="gdzieżeś łącznie">
        <pattern>
            <token regexp="yes">(?:gdzie|có|czy|ju|skąd|jak|kiedy|bodaj)że(?:ś(?:my|cie)?|m)</token>
        </pattern>
        <disambig action="ignore_spelling"/>
    </rule>

    <rule id="HTML_ENTITIES" name="ignorujemy encje html">
        <pattern>
            <marker><token regexp="yes">&amp;[gl]t</token>
            <token spacebefore="no">;</token>
            </marker>
        </pattern>
        <disambig action="immunize"/>
    </rule>

    <rule id="KM2" name="metry kwadratowe">
        <pattern>
            <marker>
                <token regexp="yes">[ck]?m²</token>
            </marker>
        </pattern>
        <disambig action="immunize"/>
    </rule>

    <rule id="zdrowaska" name="Zdrowaś Maria">
        <pattern case_sensitive="yes">
            <marker>
                <token>Zdrowaś</token>
            </marker>
            <token>Maria</token>
        </pattern>
        <disambig action="ignore_spelling"/>
    </rule>

    <rule id="koglemmoglem" name="koglem-moglem">
        <pattern>
            <token>koglem</token>
            <token>-</token>
        <marker>
            <token>moglem</token>
        </marker>
        </pattern>
        <disambig action="ignore_spelling"/>
    </rule>

    <rule id="ignore_numbers" name="pomijanie liczb w sprawdzaniu pisowni">
        <pattern>
            <token regexp="yes">\d+%?</token>
        </pattern>
        <disambig action="ignore_spelling"/>
    </rule>

    <rule id="ignore_numbers_compounds" name="pomijanie liczb w sprawdzaniu pisowni wyrazów złożonych">
        <pattern>
            <token regexp="yes">\d+-\p{L}+</token>
        </pattern>
        <disambig action="ignore_spelling"/>
    </rule>

    <rule id="ignore_citation_years" name="pomijanie oznaczeń roku wydania pozycji w bibliografii">
        <pattern case_sensitive="yes">
        <token regexp="yes">\p{Lu}\p{Ll}+</token>
        <marker>
            <token regexp="yes">\d{4}a</token>
        </marker>
        <token regexp="yes">[;\)]</token>
        </pattern>
        <disambig action="ignore_spelling"/>
    </rule>

    <rule id="misz_masz1" name="misz masz -- nie czasownik">
        <pattern>
            <token>misz</token>
            <marker>
            <token>masz</token>
            </marker>
        </pattern>
        <disambig postag="ign"/>
    </rule>

    <rule id="misz_masz2" name="misz masz -- nie czasownik">
        <pattern>
            <marker>
                <token>misz</token>
            </marker>
                <token>masz</token>
        </pattern>
        <disambig action="ignore_spelling"/>
    </rule>

</rules>