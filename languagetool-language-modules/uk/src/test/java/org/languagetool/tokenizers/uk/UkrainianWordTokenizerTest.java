/* LanguageTool, a natural language style checker 
 * Copyright (C) 2005 Daniel Naber (http://www.danielnaber.de)
 * 
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301
 * USA
 */

package org.languagetool.tokenizers.uk;

import org.apache.commons.lang3.StringUtils;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.stream.Collectors;

public class UkrainianWordTokenizerTest {
  private final UkrainianWordTokenizer w = new UkrainianWordTokenizer();

  @Test
  public void testTokenizeUrl() {
    String url = "http://youtube.com:80/herewego?start=11&quality=high%3F";
    List<String> testList = w.tokenize(url + " ");
    Assertions.assertEquals(Arrays.asList(url, " "), testList);

    url = "http://example.org";
    testList = w.tokenize(" " + url);
    Assertions.assertEquals(Arrays.asList(" ", url), testList);

    url = "www.example.org";
    testList = w.tokenize(url);
    Assertions.assertEquals(Collections.singletonList(url), testList);

    url = "elect@ombudsman.gov.ua";
    testList = w.tokenize(url);
    Assertions.assertEquals(Collections.singletonList(url), testList);

    List<String> parts = Arrays.asList("https://www.foo.com/foo", " ", "https://youtube.com", " ", "–ó–µ");
    testList = w.tokenize(StringUtils.join(parts, ""));
    Assertions.assertEquals(parts, testList);

    parts = Arrays.asList("https://www.phpbb.com/downloads/", "\"", ">", "—Å—Ç–æ—Ä—ñ–Ω–∫—É");
    testList = w.tokenize(StringUtils.join(parts, ""));
    Assertions.assertEquals(parts, testList);
  }
  
  @Test
  public void testTokenizeTags() {
    String txt = "<sup>3</sup>";
    List<String> testList = w.tokenize(txt);
    Assertions.assertEquals(Arrays.asList("<sup>", "3", "</sup>"), testList);
  }

  @Test
  public void testNumbers() {
    List<String> testList = w.tokenize("300 –≥—Ä–Ω –Ω–∞ –±–∞–ª–∞–Ω—Å—ñ");
    Assertions.assertEquals(Arrays.asList("300", " ", "–≥—Ä–Ω", " ", "–Ω–∞", " ", "–±–∞–ª–∞–Ω—Å—ñ"), testList);

    testList = w.tokenize("–Ω–∞–¥—ñ–π—à–ª–æ 2,2 –º—ñ–ª—å–π–æ–Ω–∞");
    Assertions.assertEquals(Arrays.asList("–Ω–∞–¥—ñ–π—à–ª–æ", " ", "2,2", " ", "–º—ñ–ª—å–π–æ–Ω–∞"), testList);

    testList = w.tokenize("–Ω–∞–¥—ñ–π—à–ª–æ 84,46 –º—ñ–ª—å–π–æ–Ω–∞");
    Assertions.assertEquals(Arrays.asList("–Ω–∞–¥—ñ–π—à–ª–æ", " ", "84,46", " ", "–º—ñ–ª—å–π–æ–Ω–∞"), testList);

    //TODO:
//    testList = w.tokenize("–≤ 1996,1997,1998");
//    assertEquals(Arrays.asList("–≤", " ", "1996,1997,1998"), testList);

    testList = w.tokenize("2 000 —Ç–æ–Ω –∑ 12 000 –≤—ñ–¥–µ—Ä");
    Assertions.assertEquals(Arrays.asList("2 000", " ", "—Ç–æ–Ω", " ", "–∑", " ", "12 000", " ", "–≤—ñ–¥–µ—Ä"), testList);

    testList = w.tokenize("–Ω–∞–¥—ñ–π—à–ª–æ 12 000 000 —Ç–æ–Ω");
    Assertions.assertEquals(Arrays.asList("–Ω–∞–¥—ñ–π—à–ª–æ", " ", "12 000 000", " ", "—Ç–æ–Ω"), testList);

    testList = w.tokenize("–Ω–∞–¥—ñ–π—à–ª–æ 12\u202F000\u202F000 —Ç–æ–Ω");
    Assertions.assertEquals(Arrays.asList("–Ω–∞–¥—ñ–π—à–ª–æ", " ", "12 000 000", " ", "—Ç–æ–Ω"), testList);

    testList = w.tokenize("–¥–æ 01.01.42 400 000 —à—Ç.");
    Assertions.assertEquals(Arrays.asList("–¥–æ", " ", "01.01.42", " ", "400 000", " ", "—à—Ç."), testList);


    // should not merge these numbers
    testList = w.tokenize("2 15 –º—ñ–ª—å—è—Ä–¥—ñ–≤");
    Assertions.assertEquals(Arrays.asList("2", " ", "15", " ", "–º—ñ–ª—å—è—Ä–¥—ñ–≤"), testList);

    testList = w.tokenize("—É 2004 200 –º—ñ–ª—å—è—Ä–¥—ñ–≤");
    Assertions.assertEquals(Arrays.asList("—É", " ", "2004", " ", "200", " ", "–º—ñ–ª—å—è—Ä–¥—ñ–≤"), testList);

    testList = w.tokenize("–≤ –±—é–¥–∂–µ—Ç—ñ-2004 200 –º—ñ–ª—å—è—Ä–¥—ñ–≤");
    Assertions.assertEquals(Arrays.asList("–≤", " ", "–±—é–¥–∂–µ—Ç—ñ-2004", " ", "200", " ", "–º—ñ–ª—å—è—Ä–¥—ñ–≤"), testList);

    testList = w.tokenize("–∑ 12 0001 –≤—ñ–¥–µ—Ä");
    Assertions.assertEquals(Arrays.asList("–∑", " ", "12", " ", "0001", " ", "–≤—ñ–¥–µ—Ä"), testList);

    
    testList = w.tokenize("—Å—Ç–∞–ª–æ—Å—è 14.07.2001 –≤–Ω–æ—á—ñ");
    Assertions.assertEquals(Arrays.asList("—Å—Ç–∞–ª–æ—Å—è", " ", "14.07.2001", " ", "–≤–Ω–æ—á—ñ"), testList);

    testList = w.tokenize("–≤—á–æ—Ä–∞ –æ 7.30 —Ä–∞–Ω–∫—É");
    Assertions.assertEquals(Arrays.asList("–≤—á–æ—Ä–∞", " ", "–æ", " ", "7.30", " ", "—Ä–∞–Ω–∫—É"), testList);

    testList = w.tokenize("–≤—á–æ—Ä–∞ –æ 7:30 —Ä–∞–Ω–∫—É");
    Assertions.assertEquals(Arrays.asList("–≤—á–æ—Ä–∞", " ", "–æ", " ", "7:30", " ", "—Ä–∞–Ω–∫—É"), testList);

    testList = w.tokenize("3,5-5,6% 7¬∞ 7,4¬∞–°");
    Assertions.assertEquals(Arrays.asList("3,5-5,6", "%", " ", "7", "¬∞", " ", "7,4", "¬∞", "–°"), testList);
  }

  @Test
  public void testNumbersMissingSpace() {
    List<String> testList = w.tokenize("–≤—ñ–¥ 12 –¥–æ14 —Ä–æ–∫—ñ–≤");
    Assertions.assertEquals(Arrays.asList("–≤—ñ–¥", " ", "12", " ", "–¥–æ", "14", " ", "—Ä–æ–∫—ñ–≤"), testList);

    testList = w.tokenize("–¥–æ14-15");
    Assertions.assertEquals(Arrays.asList("–¥–æ", "14-15"), testList);

    testList = w.tokenize("–¢.–®–µ–≤—á–µ–Ω–∫–∞53");
    Assertions.assertEquals(Arrays.asList("–¢.", "–®–µ–≤—á–µ–Ω–∫–∞", "53"), testList);

//    testList = w.tokenize("¬´–¢–µ–Ω¬ª103.");
//    assertEquals(Arrays.asList("¬´", "–¢–µ–Ω", "¬ª", "103", "."), testList);

    testList = w.tokenize("¬´–ú–∞–∫2¬ª");
    Assertions.assertEquals(Arrays.asList("¬´", "–ú–∞–∫2", "¬ª"), testList);

    testList = w.tokenize("–∫–º2");
    Assertions.assertEquals(Collections.singletonList("–∫–º2"), testList);

    testList = w.tokenize("000—Ö—Ö—Ö000");
    Assertions.assertEquals(Collections.singletonList("000—Ö—Ö—Ö000"), testList);
  }

  @Test
  public void testPlus() {
    List<String> testList = w.tokenize("+20");
    Assertions.assertEquals(Collections.singletonList("+20"), testList);

    testList = w.tokenize("–ø—Ä–∏—Å–ª—ñ–≤–Ω–∏–∫+–∑–∞–π–º–µ–Ω–Ω–∏–∫");
    Assertions.assertEquals(Arrays.asList("–ø—Ä–∏—Å–ª—ñ–≤–Ω–∏–∫", "+", "–∑–∞–π–º–µ–Ω–Ω–∏–∫"), testList);

    testList = w.tokenize("+–∑–∞–π–º–µ–Ω–Ω–∏–∫");
    Assertions.assertEquals(Arrays.asList("+", "–∑–∞–π–º–µ–Ω–Ω–∏–∫"), testList);

    testList = w.tokenize("–†–æ—Ç—Ç–µ—Ä–¥–∞–º+ ");
    Assertions.assertEquals(Arrays.asList("–†–æ—Ç—Ç–µ—Ä–¥–∞–º+", " "), testList);
  }
  
  @Test
  public void testTokenize() {
    List<String> testList = w.tokenize("–í–æ–Ω–∏ –ø—Ä–∏–π—à–ª–∏ –¥–æ–¥–æ–º—É.");
    Assertions.assertEquals(Arrays.asList("–í–æ–Ω–∏", " ", "–ø—Ä–∏–π—à–ª–∏", " ", "–¥–æ–¥–æ–º—É", "."), testList);

    testList = w.tokenize("–í–æ–Ω–∏ –ø—Ä–∏–π—à–ª–∏ –ø º—è—Ç–∏–º–∏ –∑—ñ–≤‚Äô—è–ª–∏–º–∏.");
    Assertions.assertEquals(Arrays.asList("–í–æ–Ω–∏", " ", "–ø—Ä–∏–π—à–ª–∏", " ", "–ø'—è—Ç–∏–º–∏", " ", "–∑—ñ–≤'—è–ª–∏–º–∏", "."), testList);

//    testList = w.tokenize("–í–æ–Ω–∏\u0301 –ø—Ä–∏\u00AD–π—à–ª–∏ –ø º—è\u0301—Ç–∏–º–∏ –∑—ñ–≤‚Äô—è\u00AD–ª–∏–º–∏.");
//    assertEquals(Arrays.asList("–í–æ–Ω–∏", " ", "–ø—Ä–∏–π—à–ª–∏", " ", "–ø'—è—Ç–∏–º–∏", " ", "–∑—ñ–≤'—è–ª–∏–º–∏", "."), testList);

    testList = w.tokenize("—è —É–∫—Ä–∞—ó–Ω–µ—Ü—å(—Å–º—ñ—î—Ç—å—Å—è");
    Assertions.assertEquals(Arrays.asList("—è", " ", "—É–∫—Ä–∞—ó–Ω–µ—Ü—å", "(", "—Å–º—ñ—î—Ç—å—Å—è"), testList);
        
    testList = w.tokenize("–û–£–ù(–±) —Ç–∞ –ö–ü(–±)–£");
    Assertions.assertEquals(Arrays.asList("–û–£–ù(–±)", " ", "—Ç–∞", " ", "–ö–ü(–±)–£"), testList);

    testList = w.tokenize("–ù–µ–≥–æ–¥–∞ —î... –∑–∞—Å—Ç—É–ø–Ω–∏–∫–æ–º");
    Assertions.assertEquals(Arrays.asList("–ù–µ–≥–æ–¥–∞", " ", "—î", "...", " ", "–∑–∞—Å—Ç—É–ø–Ω–∏–∫–æ–º"), testList);

    testList = w.tokenize("–ó–∞–ø–∞–≥—É–±–∏–ª–∏!.. —Ç–∞–∫–æ–∂");
    Assertions.assertEquals(Arrays.asList("–ó–∞–ø–∞–≥—É–±–∏–ª–∏", "!..", " ", "—Ç–∞–∫–æ–∂"), testList);

    testList = w.tokenize("–¶–µ–π –≥—Ä–∞—Ñ–∏–Ω.");
    Assertions.assertEquals(Arrays.asList("–¶–µ–π", " ", "–≥—Ä–∞—Ñ–∏–Ω", "."), testList);

    testList = w.tokenize("‚Äî –ì–º.");
    Assertions.assertEquals(Arrays.asList("‚Äî", " ", "–ì–º", "."), testList);

    testList = w.tokenize("—Å—Ç—ñ–Ω\u00AD–∫—É");
    Assertions.assertEquals(Collections.singletonList("—Å—Ç—ñ–Ω\u00AD–∫—É"), testList);

    testList = w.tokenize("—Å—Ç—ñ–Ω\u00AD\n–∫—É");
    Assertions.assertEquals(Collections.singletonList("—Å—Ç—ñ–Ω\u00AD\n–∫—É"), testList);

    testList = w.tokenize("–ø\"—è–Ω–∏–π");
    Assertions.assertEquals(Collections.singletonList("–ø\"—è–Ω–∏–π"), testList);

    testList = w.tokenize("–í–µ—Ä–µ—Ç–µ–Ω–∏—Ü—è**");
    Assertions.assertEquals(Arrays.asList("–í–µ—Ä–µ—Ç–µ–Ω–∏—Ü—è", "**"), testList);

    testList = w.tokenize("–º–æ–≤—ñ***,");
    Assertions.assertEquals(Arrays.asList("–º–æ–≤—ñ", "***", ","), testList);

    testList = w.tokenize("*–û—Ä–µ–Ω–±—É—Ä–≥");
    Assertions.assertEquals(Arrays.asList("*", "–û—Ä–µ–Ω–±—É—Ä–≥"), testList);

    testList = w.tokenize("‚ñ∂–¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü—ñ—è");
    Assertions.assertEquals(Arrays.asList("‚ñ∂", "–¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü—ñ—è"), testList);

    testList = w.tokenize("—É—Å–º—ñ—à–∫—ÉüòÅ");
    Assertions.assertEquals(Arrays.asList("—É—Å–º—ñ—à–∫—É", "üòÅ"), testList);

    testList = w.tokenize("–∑*—è—Å—É–≤–∞–≤");
    Assertions.assertEquals(Collections.singletonList("–∑*—è—Å—É–≤–∞–≤"), testList);
  }

  @Test
  public void testInitials() {
    List<String> testList = w.tokenize("–ó–∞—Å—ñ–¥–∞–≤ –Ü.–Ñ—Ä–º–æ–ª—é–∫.");
    Assertions.assertEquals(Arrays.asList("–ó–∞—Å—ñ–¥–∞–≤", " ", "–Ü.", "–Ñ—Ä–º–æ–ª—é–∫", "."), testList);

    testList = w.tokenize("–ó–∞—Å—ñ–¥–∞–≤ –Ü.   –Ñ—Ä–º–æ–ª—é–∫.");
    Assertions.assertEquals(Arrays.asList("–ó–∞—Å—ñ–¥–∞–≤", " ", "–Ü.", " ", " ", " ", "–Ñ—Ä–º–æ–ª—é–∫", "."), testList);

    testList = w.tokenize("–ó–∞—Å—ñ–¥–∞–≤ –Ü. –ü. –Ñ—Ä–º–æ–ª—é–∫.");
    Assertions.assertEquals(Arrays.asList("–ó–∞—Å—ñ–¥–∞–≤", " ", "–Ü.", " ", "–ü.", " ", "–Ñ—Ä–º–æ–ª—é–∫", "."), testList);

    testList = w.tokenize("–ó–∞—Å—ñ–¥–∞–≤ –Ü.–ü.–Ñ—Ä–º–æ–ª—é–∫.");
    Assertions.assertEquals(Arrays.asList("–ó–∞—Å—ñ–¥–∞–≤", " ", "–Ü.", "–ü.", "–Ñ—Ä–º–æ–ª—é–∫", "."), testList);

    testList = w.tokenize("–Ü.\u00A0–Ñ—Ä–º–æ–ª—é–∫.");
    Assertions.assertEquals(Arrays.asList("–Ü.", "\u00A0", "–Ñ—Ä–º–æ–ª—é–∫", "."), testList);

    testList = w.tokenize("–ó–∞—Å—ñ–¥–∞–≤ –Ñ—Ä–º–æ–ª—é–∫ –Ü.");
    Assertions.assertEquals(Arrays.asList("–ó–∞—Å—ñ–¥–∞–≤", " ", "–Ñ—Ä–º–æ–ª—é–∫", " ", "–Ü."), testList);

    testList = w.tokenize("–ó–∞—Å—ñ–¥–∞–≤ –Ñ—Ä–º–æ–ª—é–∫ –Ü. –ü.");
    Assertions.assertEquals(Arrays.asList("–ó–∞—Å—ñ–¥–∞–≤", " ", "–Ñ—Ä–º–æ–ª—é–∫", " ", "–Ü.", " ", "–ü."), testList);

    testList = w.tokenize("–ó–∞—Å—ñ–¥–∞–≤ –Ñ—Ä–º–æ–ª—é–∫ –Ü. —Ç–∞ —ñ–Ω—à—ñ");
    Assertions.assertEquals(Arrays.asList("–ó–∞—Å—ñ–¥–∞–≤", " ", "–Ñ—Ä–º–æ–ª—é–∫", " ", "–Ü.", " ", "—Ç–∞", " ", "—ñ–Ω—à—ñ"), testList);
  }

  @Test
  public void testAbbreviations() {
    // —Å–∫–æ—Ä–æ—á–µ–Ω–Ω—è
    List<String> testList = w.tokenize("140 —Ç–∏—Å. –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫—ñ–≤");
    Assertions.assertEquals(Arrays.asList("140", " ", "—Ç–∏—Å.", " ", "–ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫—ñ–≤"), testList);

    testList = w.tokenize("450 —Ç–∏—Å. 297 –≥—Ä–Ω");
    Assertions.assertEquals(Arrays.asList("450", " ", "—Ç–∏—Å.", " ", "297", " ", "–≥—Ä–Ω"), testList);

    testList = w.tokenize("297 –≥—Ä–Ω...");
    Assertions.assertEquals(Arrays.asList("297", " ", "–≥—Ä–Ω", "..."), testList);

    testList = w.tokenize("297 –≥—Ä–Ω.");
    Assertions.assertEquals(Arrays.asList("297", " ", "–≥—Ä–Ω", "."), testList);

//    testList = w.tokenize("297 –≥—Ä–Ω.!!!");
//    assertEquals(Arrays.asList("297", " ", "–≥—Ä–Ω.", "!!!"), testList);

//    testList = w.tokenize("297 –≥—Ä–Ω.??");
//    assertEquals(Arrays.asList("297", " ", "–≥—Ä–Ω.", "??"), testList);

    testList = w.tokenize("450 —Ç–∏—Å.");
    Assertions.assertEquals(Arrays.asList("450", " ", "—Ç–∏—Å."), testList);

    testList = w.tokenize("450 —Ç–∏—Å.\n");
    Assertions.assertEquals(Arrays.asList("450", " ", "—Ç–∏—Å.", "\n"), testList);

    testList = w.tokenize("354\u202F—Ç–∏—Å.");
    Assertions.assertEquals(Arrays.asList("354", "\u202F", "—Ç–∏—Å."), testList);

    testList = w.tokenize("911 —Ç–∏—Å.–≥—Ä–Ω. –∑ –±—é–¥–∂–µ—Ç—É");
    Assertions.assertEquals(Arrays.asList("911", " ", "—Ç–∏—Å.", "–≥—Ä–Ω", ".", " ", "–∑", " ", "–±—é–¥–∂–µ—Ç—É"), testList);

    testList = w.tokenize("–∑–∞ $400\n  —Ç–∏—Å., –∑–¥–∞–≤–∞–ª–æ—Å—è –±");
    Assertions.assertEquals(Arrays.asList("–∑–∞", " ", "$", "400", "\n", " ", " ", "—Ç–∏—Å.", ",", " ", "–∑–¥–∞–≤–∞–ª–æ—Å—è", " ", "–±"), testList);

    testList = w.tokenize("–Ω–∞–π–≤–∞–∂—á–æ–≥–æ –∂–∞–Ω—Ä—É‚Äî –æ–ø–æ–≤—ñ–¥–∞–Ω–Ω—è");
    Assertions.assertEquals(Arrays.asList("–Ω–∞–π–≤–∞–∂—á–æ–≥–æ", " ", "–∂–∞–Ω—Ä—É", "‚Äî", " ", "–æ–ø–æ–≤—ñ–¥–∞–Ω–Ω—è"), testList);

    testList = w.tokenize("–ø—Ä–æ—Ñ. –ê—Ä—Ç—é—Ö–æ–≤");
    Assertions.assertEquals(Arrays.asList("–ø—Ä–æ—Ñ.", " ", "–ê—Ä—Ç—é—Ö–æ–≤"), testList);

    testList = w.tokenize("–ø—Ä–æ—Ñ.\u00A0–ê—Ä—Ç—é—Ö–æ–≤");
    Assertions.assertEquals(Arrays.asList("–ø—Ä–æ—Ñ.", "\u00A0", "–ê—Ä—Ç—é—Ö–æ–≤"), testList);

    testList = w.tokenize("–Ü–≤. –§—Ä–∞–Ω–∫–æ");
    Assertions.assertEquals(Arrays.asList("–Ü–≤.", " ", "–§—Ä–∞–Ω–∫–æ"), testList);

    testList = w.tokenize("–∫—É—Ç—é\u00A0‚Äî —â–µ–¥—Ä—É");
    Assertions.assertEquals(Arrays.asList("–∫—É—Ç—é", "\u00A0", "‚Äî", " ", "—â–µ–¥—Ä—É"), testList);

    testList = w.tokenize("—Ç–∞–∫–æ–∂ –∑–∞–≤. –≤—ñ–¥–¥—ñ–ª–æ–º");
    Assertions.assertEquals(Arrays.asList("—Ç–∞–∫–æ–∂", " ", "–∑–∞–≤.", " ", "–≤—ñ–¥–¥—ñ–ª–æ–º"), testList);

    testList = w.tokenize("–¥–æ –Ω. –µ.");
    Assertions.assertEquals(Arrays.asList("–¥–æ", " ", "–Ω.", " ", "–µ."), testList);
 
    testList = w.tokenize("–¥–æ –Ω.–µ.");
    Assertions.assertEquals(Arrays.asList("–¥–æ", " ", "–Ω.", "–µ."), testList);

    testList = w.tokenize("–≤. –æ. –Ω–∞—á–∞–ª—å–Ω–∏–∫–∞");
    Assertions.assertEquals(Arrays.asList("–≤.", " ", "–æ.", " ", "–Ω–∞—á–∞–ª—å–Ω–∏–∫–∞"), testList);

    testList = w.tokenize("–≤.–æ. –Ω–∞—á–∞–ª—å–Ω–∏–∫–∞");
    Assertions.assertEquals(Arrays.asList("–≤.", "–æ.", " ", "–Ω–∞—á–∞–ª—å–Ω–∏–∫–∞"), testList);

    testList = w.tokenize("100 –∫.—Å.");
    Assertions.assertEquals(Arrays.asList("100", " ", "–∫.", "—Å."), testList);

    testList = w.tokenize("1998 —Ä.–Ω.");
    Assertions.assertEquals(Arrays.asList("1998", " ", "—Ä.", "–Ω."), testList);

    testList = w.tokenize("22 –∫–æ–ø.");
    Assertions.assertEquals(Arrays.asList("22", " ", "–∫–æ–ø."), testList);

    testList = w.tokenize("800 –≥—Ä. –º'—è—Å–∞");
    Assertions.assertEquals(Arrays.asList("800", " ", "–≥—Ä.", " ", "–º'—è—Å–∞"), testList);

    testList = w.tokenize("18-19 —Å—Ç.—Å—Ç. –±—É–ª–∏");
    Assertions.assertEquals(Arrays.asList("18-19", " ", "—Å—Ç.", "—Å—Ç.", " ", "–±—É–ª–∏"), testList);
    
    testList = w.tokenize("–Ü —Å—Ç. 11");
    Assertions.assertEquals(Arrays.asList("–Ü", " ", "—Å—Ç.", " ", "11"), testList);

    testList = w.tokenize("–∫—É–±. –º");
    Assertions.assertEquals(Arrays.asList("–∫—É–±.", " ", "–º"), testList);

    testList = w.tokenize("–∫—É–±.–º");
    Assertions.assertEquals(Arrays.asList("–∫—É–±.", "–º"), testList);

    testList = w.tokenize("–£ —Å. –í–∏–∂–≤–∞");
    Assertions.assertEquals(Arrays.asList("–£", " ", "—Å.", " ", "–í–∏–∂–≤–∞"), testList);

    testList = w.tokenize("–î–æ–≤–∂–∏–Ω–æ—é 30 —Å–º. –∑ –≥–∞–∫–æ–º.");
    Assertions.assertEquals(Arrays.asList("–î–æ–≤–∂–∏–Ω–æ—é", " ", "30", " ", "—Å–º", ".", " ", "–∑", " ", "–≥–∞–∫–æ–º", "."), testList);

    testList = w.tokenize("–î–æ–≤–∂–∏–Ω–æ—é 30 —Å–º. –ü–æ—ó—Ö–∞–ª–∏.");
    Assertions.assertEquals(Arrays.asList("–î–æ–≤–∂–∏–Ω–æ—é", " ", "30", " ", "—Å–º", ".", " ", "–ü–æ—ó—Ö–∞–ª–∏", "."), testList);

    testList = w.tokenize("100 –º. –¥–æ—Ä–æ–≥–∏.");
    Assertions.assertEquals(Arrays.asList("100", " ", "–º", ".", " ", "–¥–æ—Ä–æ–≥–∏", "."), testList);

    testList = w.tokenize("–≤ –º.–ö–∏—ó–≤");
    Assertions.assertEquals(Arrays.asList("–≤", " ", "–º.", "–ö–∏—ó–≤"), testList);

    testList = w.tokenize("–ù–∞ –≤–∏—Å–æ—Ç—ñ 4000 –º...");
    Assertions.assertEquals(Arrays.asList("–ù–∞", " ", "–≤–∏—Å–æ—Ç—ñ", " ", "4000", " ", "–º", "..."), testList);

    testList = w.tokenize("‚Ññ47 (–º. –°–ª–æ–≤'—è–Ω—Å—å–∫)");
    Assertions.assertEquals(Arrays.asList("‚Ññ47", " ", "(", "–º.", " ", "–°–ª–æ–≤'—è–Ω—Å—å–∫", ")"), testList);

    testList = w.tokenize("—Å.-–≥.");
    Assertions.assertEquals(Collections.singletonList("—Å.-–≥."), testList);

    testList = w.tokenize("100 –≥—Ä–Ω. –≤ –±–∞–Ω–∫");
    Assertions.assertEquals(Arrays.asList("100", " ", "–≥—Ä–Ω", ".", " ", "–≤", " ", "–±–∞–Ω–∫"), testList);
    
    testList = w.tokenize("—Ç–∞–∫–µ —Ç–∞ —ñ–Ω.");
    Assertions.assertEquals(Arrays.asList("—Ç–∞–∫–µ", " ", "—Ç–∞", " ", "—ñ–Ω."), testList);

    testList = w.tokenize("—ñ —Ç. —ñ–Ω.");
    Assertions.assertEquals(Arrays.asList("—ñ", " ", "—Ç.", " ", "—ñ–Ω."), testList);

    testList = w.tokenize("—ñ —Ç.–¥.");
    Assertions.assertEquals(Arrays.asList("—ñ", " ", "—Ç.", "–¥."), testList);

    testList = w.tokenize("–≤ —Ç. —á.");
    Assertions.assertEquals(Arrays.asList("–≤", " ", "—Ç.", " ", "—á."), testList);

    testList = w.tokenize("–¥–æ —Ç. –∑–≤. —Å–∞–ª—å–æ–Ω—É");
    Assertions.assertEquals(Arrays.asList("–¥–æ", " ", "—Ç.", " ", "–∑–≤.", " ", "—Å–∞–ª—å–æ–Ω—É"), testList);

    testList = w.tokenize(" —ñ –ø–æ–¥.");
    Assertions.assertEquals(Arrays.asList(" ", "—ñ", " ", "–ø–æ–¥."), testList);

    testList = w.tokenize("–Ü–Ω—Å—Ç–∏—Ç—É—Ç —ñ–º. –∞–∫–∞–¥. –í–µ—Ä–Ω–∞–¥—Å—å–∫–æ–≥–æ.");
    Assertions.assertEquals(Arrays.asList("–Ü–Ω—Å—Ç–∏—Ç—É—Ç", " ", "—ñ–º.", " ", "–∞–∫–∞–¥.", " ", "–í–µ—Ä–Ω–∞–¥—Å—å–∫–æ–≥–æ", "."), testList);

    testList = w.tokenize("–ü–∞–ª–∞—Ü —ñ–º. –≥–µ—Ç—å–º–∞–Ω–∞ –°–∫–æ—Ä–æ–ø–∞–¥—Å—å–∫–æ–≥–æ.");
    Assertions.assertEquals(Arrays.asList("–ü–∞–ª–∞—Ü", " ", "—ñ–º.", " ", "–≥–µ—Ç—å–º–∞–Ω–∞", " ", "–°–∫–æ—Ä–æ–ø–∞–¥—Å—å–∫–æ–≥–æ", "."), testList);

    testList = w.tokenize("–≤—ñ–¥ –ª–∞—Ç. momento");
    Assertions.assertEquals(Arrays.asList("–≤—ñ–¥", " ", "–ª–∞—Ç.", " ", "momento"), testList);

    testList = w.tokenize("–Ω–∞ 1-–∫—ñ–º–Ω. –∫–≤. –≤ —Ü–µ–Ω—Ç—Ä—ñ");
    Assertions.assertEquals(Arrays.asList("–Ω–∞", " " , "1-–∫—ñ–º–Ω.", " ", "–∫–≤.", " ", "–≤", " ", "—Ü–µ–Ω—Ç—Ä—ñ"), testList);

    testList = w.tokenize("1 –∫–≤. –∫–º.");
    Assertions.assertEquals(Arrays.asList("1", " ", "–∫–≤.", " ", "–∫–º", "."), testList);

    testList = w.tokenize("–í–∞–ª–µ—Ä—ñ–π (–º—ñ–ª—ñ—Ü—ñ–æ–Ω–µ—Ä-–ø–∞—Ä–æ–¥–∏—Å—Ç.\n‚Äì  –ê–≤—Ç.) —Å—Ç–∞–Ω–µ –ø–∞—Ä–æ–¥–∏—Å—Ç–æ–º.");
    Assertions.assertEquals(Arrays.asList("–í–∞–ª–µ—Ä—ñ–π", " ", "(", "–º—ñ–ª—ñ—Ü—ñ–æ–Ω–µ—Ä-–ø–∞—Ä–æ–¥–∏—Å—Ç", ".", "\n", "‚Äì", " ", " ", "–ê–≤—Ç.", ")", " ", "—Å—Ç–∞–Ω–µ", " ", "–ø–∞—Ä–æ–¥–∏—Å—Ç–æ–º", "."), testList);

    testList = w.tokenize("–°—å–æ–≥–æ–¥–Ω—ñ (—É —á–µ—Ç–≤–µ—Ä.  ‚Äî –†–µ–¥.), –≤—Ä–∞–Ω—Ü—ñ.");
    Assertions.assertEquals(Arrays.asList("–°—å–æ–≥–æ–¥–Ω—ñ", " ", "(", "—É", " ", "—á–µ—Ç–≤–µ—Ä", ".", " ", " ", "‚Äî", " ", "–†–µ–¥.", ")", ",", " ", "–≤—Ä–∞–Ω—Ü—ñ", "."), testList);
 
    testList = w.tokenize("Fair trade [¬´–°–ø—Ä–∞–≤–µ–¥–ª–∏–≤–∞ —Ç–æ—Ä–≥—ñ–≤–ª—è¬ª. ‚Äì    –ê–≤—Ç.], —è–∫–∏–π —Å—Ç–µ–∂–∏—Ç—å –∑–∞ —Ç–∏–º, —â–æ–± —É –∫—Ä–∞—ó–Ω–∞—Ö");
    Assertions.assertTrue(testList.contains("–ê–≤—Ç."), testList.toString());
    
    testList = w.tokenize("–¥–∏–≤–æ –∑ –¥–∏–≤.");
    Assertions.assertEquals(Arrays.asList("–¥–∏–≤–æ", " ", "–∑", " ", "–¥–∏–≤", "."), testList);
    
    testList = w.tokenize("–¥–∏–≤–æ –∑ –¥–∏–≤...");
    Assertions.assertEquals(Arrays.asList("–¥–∏–≤–æ", " ", "–∑", " ", "–¥–∏–≤", "..."), testList);

    testList = w.tokenize("—Ç–µ–ª.: 044-425-20-63");
    Assertions.assertEquals(Arrays.asList("—Ç–µ–ª.", ":", " ", "044-425-20-63"), testList);

    testList = w.tokenize("—Å/–≥");
    Assertions.assertEquals(Collections.singletonList("—Å/–≥"), testList);

    testList = w.tokenize("—ñ–º.–í–∞—Å–∏–ª—è");
    Assertions.assertEquals(Arrays.asList("—ñ–º.", "–í–∞—Å–∏–ª—è"), testList);

    testList = w.tokenize("—Å—Ç.231");
    Assertions.assertEquals(Arrays.asList("—Å—Ç.", "231"), testList);

    testList = w.tokenize("2016-2017—Ä—Ä.");
    Assertions.assertEquals(Arrays.asList("2016-2017", "—Ä—Ä."), testList);

    testList = w.tokenize("30.04.2010—Ä.");
    Assertions.assertEquals(Arrays.asList("30.04.2010", "—Ä."), testList);

    testList = w.tokenize("–Ω—ñ –º–æ–≥–∏–ª–∏ 6–≤. ");
    Assertions.assertEquals(Arrays.asList("–Ω—ñ", " ", "–º–æ–≥–∏–ª–∏", " ", "6–≤", ".", " "), testList);

    testList = w.tokenize("–≤... –æ–¥—è–≥–Ω–µ–Ω–æ–º—É");
    Assertions.assertEquals(Arrays.asList("–≤", "...", " ", "–æ–¥—è–≥–Ω–µ–Ω–æ–º—É"), testList);

    // invaild but happens
    testList = w.tokenize("10 –º–ª–Ω. —á–æ–ª–æ–≤—ñ–∫");
    Assertions.assertEquals(Arrays.asList("10", " ", "–º–ª–Ω.", " ", "—á–æ–ª–æ–≤—ñ–∫"), testList);

    testList = w.tokenize("–≤—ñ–¥ –¢–∞–≤—Ä—ñ–π—Å—å–∫–æ—ó –≥—É–±.5");
    Assertions.assertEquals(Arrays.asList("–≤—ñ–¥", " ", "–¢–∞–≤—Ä—ñ–π—Å—å–∫–æ—ó", " ", "–≥—É–±.", "5"), testList);

    testList = w.tokenize("–≤—ñ–¥ —á–µ—Ä–≤–æ–Ω–∏—Ö –≥—É–±.");
    Assertions.assertEquals(Arrays.asList("–≤—ñ–¥", " ", "—á–µ—Ä–≤–æ–Ω–∏—Ö", " ", "–≥—É–±", "."), testList);

    testList = w.tokenize("–ö.-–°–≤—è—Ç–æ—à–∏–Ω—Å—å–∫–∏–π");
    Assertions.assertEquals(Collections.singletonList("–ö.-–°–≤—è—Ç–æ—à–∏–Ω—Å—å–∫–∏–π"), testList);

    testList = w.tokenize("–ö.-–ì. –†—É—Ñ—Ñ–º–∞–Ω");
    Assertions.assertEquals(Arrays.asList("–ö.-–ì.", " ", "–†—É—Ñ—Ñ–º–∞–Ω"), testList);

    testList = w.tokenize("–†–∏—Å. 10");
    Assertions.assertEquals(Arrays.asList("–†–∏—Å.", " ", "10"), testList);

    testList = w.tokenize("—Ö—É–¥. —Ñ—ñ–ª—å–º");
    Assertions.assertEquals(Arrays.asList("—Ö—É–¥.", " ", "—Ñ—ñ–ª—å–º"), testList);

    // not too frequent
//    testList = w.tokenize("30.04.10—Ä.");
//    assertEquals(Arrays.asList("30.04.10", "—Ä."), testList);
  }

  @Test
  public void testBrackets() {
    // —Å–∫–æ—Ä–æ—á–µ–Ω–Ω—è
    List<String> testList = w.tokenize("–¥[–æ–∫—Ç–æ]—Ä[–æ–º]");
    Assertions.assertEquals(Collections.singletonList("–¥[–æ–∫—Ç–æ]—Ä[–æ–º]"), testList);
  }

  @Test
  public void testApostrophe() {
    List<String> testList = w.tokenize("‚Äô–ø—Ä–æ–¥—É–∫—Ç–∏ —Ö–∞—Ä—á—É–≤–∞–Ω–Ω—è‚Äô");
    Assertions.assertEquals(Arrays.asList("'", "–ø—Ä–æ–¥—É–∫—Ç–∏", " ", "—Ö–∞—Ä—á—É–≤–∞–Ω–Ω—è", "'"), testList);

    testList = w.tokenize("—Å—Ö–µ–º–∞ '–≥—Ä–æ—à—ñ'");
    Assertions.assertEquals(Arrays.asList("—Å—Ö–µ–º–∞", " ", "'", "–≥—Ä–æ—à—ñ", "'"), testList);

    testList = w.tokenize("(‚Äò–¥–∑–µ—Ä–∫–∞–ª–æ‚Äô)");
    Assertions.assertEquals(Arrays.asList("(", "'", "–¥–∑–µ—Ä–∫–∞–ª–æ", "'", ")"), testList);

    testList = w.tokenize("–≤—Å–µ '–¥–Ω–æ –ø—ñ–¥—É");
    Assertions.assertEquals(Arrays.asList("–≤—Å–µ", " ", "'–¥–Ω–æ", " ", "–ø—ñ–¥—É"), testList);

    testList = w.tokenize("—Ç—Ä–æ—Ö–∏ '–¥–Ω–æ '–¥–Ω–æ–º—É —Å–∫–∞–∑–∞–Ω–æ");
    Assertions.assertEquals(Arrays.asList("—Ç—Ä–æ—Ö–∏", " ", "'–¥–Ω–æ", " ", "'–¥–Ω–æ–º—É", " ", "—Å–∫–∞–∑–∞–Ω–æ"), testList);

    testList = w.tokenize("–∞ –º–æ',");
    Assertions.assertEquals(Arrays.asList("–∞", " ", "–º–æ'", ","), testList);

    testList = w.tokenize("–ø—ñ–¥–µ–º–æ'");
    Assertions.assertEquals(Arrays.asList("–ø—ñ–¥–µ–º–æ", "'"), testList);

    testList = w.tokenize("–ó–î–û–†–û–í‚Äô–Ø.");
    Assertions.assertEquals(Arrays.asList("–ó–î–û–†–û–í'–Ø", "."), testList);

    testList = w.tokenize("''—É–∫—Ä–∞—ó–Ω—Å—å–∫–∏–π''");
    Assertions.assertEquals(Arrays.asList("''", "—É–∫—Ä–∞—ó–Ω—Å—å–∫–∏–π", "''"), testList);

    // '—Ç—Å–µ, '–¥–¥–∞—Ç–∏  '–≥–æ
    
    testList = w.tokenize("'—î");
    Assertions.assertEquals(Arrays.asList("'", "—î"), testList);

    testList = w.tokenize("'(—î)");
    Assertions.assertEquals(Arrays.asList("'", "(", "—î", ")"), testList);
  }


  @Test
  public void testDash() {
    List<String> testList = w.tokenize("–ö–∞–Ω‚Äô-–ö–∞ –ù–æ –†–µ–π");
    Assertions.assertEquals(Arrays.asList("–ö–∞–Ω'-–ö–∞", " ", "–ù–æ", " ", "–†–µ–π"), testList);

    testList = w.tokenize("—ñ –µ–∫—Å-¬´–¥–µ–ø—É—Ç–∞—Ç¬ª –≤–∏–±—É–≤");
    Assertions.assertEquals(Arrays.asList("—ñ", " ", "–µ–∫—Å-¬´–¥–µ–ø—É—Ç–∞—Ç¬ª", " ", "–≤–∏–±—É–≤"), testList);

    testList = w.tokenize("—Ç–∏—Ö \"200\"-—Ö –±–∞–≥–∞—Ç–æ");
    Assertions.assertEquals(Arrays.asList("—Ç–∏—Ö", " ", "\"200\"-—Ö", " ", "–±–∞–≥–∞—Ç–æ"), testList);

    testList = w.tokenize("¬´–¥—ñ–¥–∏¬ª-—É–∫—Ä–∞—ó–Ω—Ü—ñ");
    Assertions.assertEquals(Collections.singletonList("¬´–¥—ñ–¥–∏¬ª-—É–∫—Ä–∞—ó–Ω—Ü—ñ"), testList);

//    testList = w.tokenize("¬´–∫—Ä–∞–±¬ª-–ø–µ—Ä–µ—Ä–æ—Å—Ç–æ–∫");
//    assertEquals(Arrays.asList("¬´", "–∫—Ä–∞–±", "¬ª", "-", "–ø–µ—Ä–µ—Ä–æ—Å—Ç–æ–∫"), testList);

    testList = w.tokenize("–≤–µ—Ä–µ—Å–Ω—ñ--–∂–æ–≤—Ç–Ω—ñ");
    Assertions.assertEquals(Arrays.asList("–≤–µ—Ä–µ—Å–Ω—ñ","--","–∂–æ–≤—Ç–Ω—ñ"), testList);

    testList = w.tokenize("‚Äî–£ –ø–µ–≤–Ω–æ–º—É");
    Assertions.assertEquals(Arrays.asList("‚Äî", "–£", " ", "–ø–µ–≤–Ω–æ–º—É"), testList);

    testList = w.tokenize("-–£ –ø–µ–≤–Ω–æ–º—É");
    Assertions.assertEquals(Arrays.asList("-", "–£", " ", "–ø–µ–≤–Ω–æ–º—É"), testList);

    testList = w.tokenize("–ø—Ä–∞—Ü—è‚Äî–≥–æ–ª–æ–≤–∞");
    Assertions.assertEquals(Arrays.asList("–ø—Ä–∞—Ü—è", "‚Äî", "–≥–æ–ª–æ–≤–∞"), testList);

    testList = w.tokenize("–õ—é–¥–∏–Ω–∞‚Äî");
    Assertions.assertEquals(Arrays.asList("–õ—é–¥–∏–Ω–∞", "‚Äî"), testList);
    
    testList = w.tokenize("–•‚Äì–•–Ü");
    Assertions.assertEquals(Arrays.asList("–•", "‚Äì", "–•–Ü"), testList);
    
    testList = w.tokenize("VII-VIII");
    Assertions.assertEquals(Arrays.asList("VII", "-", "VIII"), testList);
    
    testList = w.tokenize("–°—Ç—Ä–∏–π‚Äì ");
    Assertions.assertEquals(Arrays.asList("–°—Ç—Ä–∏–π", "‚Äì", " "), testList);

    testList = w.tokenize("—Ñ—ñ—Ç–æ‚Äì —Ç–∞ —Ç–µ—Ä–º–æ—Ç–µ—Ä–∞–ø—ñ—ó");
    Assertions.assertEquals(Arrays.asList("—Ñ—ñ—Ç–æ‚Äì", " ", "—Ç–∞", " ", "—Ç–µ—Ä–º–æ—Ç–µ—Ä–∞–ø—ñ—ó"), testList);

    testList = w.tokenize(" ‚Äì–í–∏–¥—ñ–ª–µ–Ω–æ");
    Assertions.assertEquals(Arrays.asList(" ", "‚Äì", "–í–∏–¥—ñ–ª–µ–Ω–æ"), testList);

    testList = w.tokenize("—Ç–∞–∫,\u2013—Ç–∞–∫");
    Assertions.assertEquals(Arrays.asList("—Ç–∞–∫", ",", "\u2013", "—Ç–∞–∫"), testList);
  }
  
  @Test
  public void testSpecialChars() {
    String text = "–†–ï–ê–õ–Ü–ó–ê–¶–Ü–á \u00AD\n" + "–°–Ü–õ–¨–°–¨–ö–û–ì–û–°–ü–û–î–ê–†–°–¨–ö–û–á";

    List<String> testList = w.tokenize(text).stream()
        .map(s -> s.replace("\n", "\\n").replace("\u00AD", "\\xAD"))
        .collect(Collectors.toList());
    Assertions.assertEquals(Arrays.asList("–†–ï–ê–õ–Ü–ó–ê–¶–Ü–á", " ", "\\xAD", "\\n", "–°–Ü–õ–¨–°–¨–ö–û–ì–û–°–ü–û–î–ê–†–°–¨–ö–û–á"), testList);

    testList = w.tokenize("–∞%–π–æ–≥–æ");
    Assertions.assertEquals(Arrays.asList("–∞", "%", "–π–æ–≥–æ"), testList);

    testList = w.tokenize("5%-–≥–æ");
    Assertions.assertEquals(Collections.singletonList("5%-–≥–æ"), testList);
  }
}
