/* LanguageTool, a natural language style checker 
 * Copyright (C) 2005 Daniel Naber (http://www.danielnaber.de)
 * 
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301
 * USA
 */

package org.languagetool.tokenizers.uk;

import org.apache.commons.lang3.StringUtils;
import org.junit.Test;

import java.util.Arrays;
import java.util.List;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;

public class UkrainianWordTokenizerTest {
  private final UkrainianWordTokenizer w = new UkrainianWordTokenizer();

  @Test
  public void testTokenizeUrl() {
    String url = "http://youtube.com:80/herewego?start=11&quality=high%3F";
    List<String> testList = w.tokenize(url + " ");
    assertEquals(Arrays.asList(url, " "), testList);

    url = "http://example.org";
    testList = w.tokenize(" " + url);
    assertEquals(Arrays.asList(" ", url), testList);

    url = "www.example.org";
    testList = w.tokenize(url);
    assertEquals(Arrays.asList(url), testList);

    url = "elect@ombudsman.gov.ua";
    testList = w.tokenize(url);
    assertEquals(Arrays.asList(url), testList);
    
    List<String> parts = Arrays.asList("https://www.foo.com/foo", " ", "https://youtube.com", " ", "–ó–µ");
    testList = w.tokenize(StringUtils.join(parts, ""));
    assertEquals(parts, testList);
  }

  @Test
  public void testNumbers() {
    List<String> testList = w.tokenize("300 –≥—Ä–Ω –Ω–∞ –±–∞–ª–∞–Ω—Å—ñ");
    assertEquals(Arrays.asList("300", " ", "–≥—Ä–Ω", " ", "–Ω–∞", " ", "–±–∞–ª–∞–Ω—Å—ñ"), testList);

    testList = w.tokenize("–Ω–∞–¥—ñ–π—à–ª–æ 2,2 –º—ñ–ª—å–π–æ–Ω–∞");
    assertEquals(Arrays.asList("–Ω–∞–¥—ñ–π—à–ª–æ", " ", "2,2", " ", "–º—ñ–ª—å–π–æ–Ω–∞"), testList);

    testList = w.tokenize("–Ω–∞–¥—ñ–π—à–ª–æ 84,46 –º—ñ–ª—å–π–æ–Ω–∞");
    assertEquals(Arrays.asList("–Ω–∞–¥—ñ–π—à–ª–æ", " ", "84,46", " ", "–º—ñ–ª—å–π–æ–Ω–∞"), testList);

    //TODO:
//    testList = w.tokenize("–≤ 1996,1997,1998");
//    assertEquals(Arrays.asList("–≤", " ", "1996,1997,1998"), testList);

    testList = w.tokenize("2 000 —Ç–æ–Ω –∑ 12 000 –≤—ñ–¥–µ—Ä");
    assertEquals(Arrays.asList("2 000", " ", "—Ç–æ–Ω", " ", "–∑", " ", "12 000", " ", "–≤—ñ–¥–µ—Ä"), testList);

    testList = w.tokenize("–Ω–∞–¥—ñ–π—à–ª–æ 12 000 000 —Ç–æ–Ω");
    assertEquals(Arrays.asList("–Ω–∞–¥—ñ–π—à–ª–æ", " ", "12 000 000", " ", "—Ç–æ–Ω"), testList);

    testList = w.tokenize("–Ω–∞–¥—ñ–π—à–ª–æ 12\u202F000\u202F000 —Ç–æ–Ω");
    assertEquals(Arrays.asList("–Ω–∞–¥—ñ–π—à–ª–æ", " ", "12 000 000", " ", "—Ç–æ–Ω"), testList);

    testList = w.tokenize("–¥–æ 01.01.42 400 000 —à—Ç.");
    assertEquals(Arrays.asList("–¥–æ", " ", "01.01.42", " ", "400 000", " ", "—à—Ç."), testList);


    // should not merge these numbers
    testList = w.tokenize("2 15 –º—ñ–ª—å—è—Ä–¥—ñ–≤");
    assertEquals(Arrays.asList("2", " ", "15", " ", "–º—ñ–ª—å—è—Ä–¥—ñ–≤"), testList);

    testList = w.tokenize("—É 2004 200 –º—ñ–ª—å—è—Ä–¥—ñ–≤");
    assertEquals(Arrays.asList("—É", " ", "2004", " ", "200", " ", "–º—ñ–ª—å—è—Ä–¥—ñ–≤"), testList);

    testList = w.tokenize("–≤ –±—é–¥–∂–µ—Ç—ñ-2004 200 –º—ñ–ª—å—è—Ä–¥—ñ–≤");
    assertEquals(Arrays.asList("–≤", " ", "–±—é–¥–∂–µ—Ç—ñ-2004", " ", "200", " ", "–º—ñ–ª—å—è—Ä–¥—ñ–≤"), testList);

    testList = w.tokenize("–∑ 12 0001 –≤—ñ–¥–µ—Ä");
    assertEquals(Arrays.asList("–∑", " ", "12", " ", "0001", " ", "–≤—ñ–¥–µ—Ä"), testList);

    
    testList = w.tokenize("—Å—Ç–∞–ª–æ—Å—è 14.07.2001 –≤–Ω–æ—á—ñ");
    assertEquals(Arrays.asList("—Å—Ç–∞–ª–æ—Å—è", " ", "14.07.2001", " ", "–≤–Ω–æ—á—ñ"), testList);

    testList = w.tokenize("–≤—á–æ—Ä–∞ –æ 7.30 —Ä–∞–Ω–∫—É");
    assertEquals(Arrays.asList("–≤—á–æ—Ä–∞", " ", "–æ", " ", "7.30", " ", "—Ä–∞–Ω–∫—É"), testList);

    testList = w.tokenize("–≤—á–æ—Ä–∞ –æ 7:30 —Ä–∞–Ω–∫—É");
    assertEquals(Arrays.asList("–≤—á–æ—Ä–∞", " ", "–æ", " ", "7:30", " ", "—Ä–∞–Ω–∫—É"), testList);
  }

  @Test
  public void testTokenize() {
    List<String> testList = w.tokenize("–í–æ–Ω–∏ –ø—Ä–∏–π—à–ª–∏ –¥–æ–¥–æ–º—É.");
    assertEquals(Arrays.asList("–í–æ–Ω–∏", " ", "–ø—Ä–∏–π—à–ª–∏", " ", "–¥–æ–¥–æ–º—É", "."), testList);

    testList = w.tokenize("–í–æ–Ω–∏ –ø—Ä–∏–π—à–ª–∏ –ø º—è—Ç–∏–º–∏ –∑—ñ–≤‚Äô—è–ª–∏–º–∏.");
    assertEquals(Arrays.asList("–í–æ–Ω–∏", " ", "–ø—Ä–∏–π—à–ª–∏", " ", "–ø'—è—Ç–∏–º–∏", " ", "–∑—ñ–≤'—è–ª–∏–º–∏", "."), testList);

//    testList = w.tokenize("–í–æ–Ω–∏\u0301 –ø—Ä–∏\u00AD–π—à–ª–∏ –ø º—è\u0301—Ç–∏–º–∏ –∑—ñ–≤‚Äô—è\u00AD–ª–∏–º–∏.");
//    assertEquals(Arrays.asList("–í–æ–Ω–∏", " ", "–ø—Ä–∏–π—à–ª–∏", " ", "–ø'—è—Ç–∏–º–∏", " ", "–∑—ñ–≤'—è–ª–∏–º–∏", "."), testList);

    testList = w.tokenize("—è —É–∫—Ä–∞—ó–Ω–µ—Ü—å(—Å–º—ñ—î—Ç—å—Å—è");
    assertEquals(Arrays.asList("—è", " ", "—É–∫—Ä–∞—ó–Ω–µ—Ü—å", "(", "—Å–º—ñ—î—Ç—å—Å—è"), testList);
        
    testList = w.tokenize("–û–£–ù(–±) —Ç–∞ –ö–ü(–±)–£");
    assertEquals(Arrays.asList("–û–£–ù(–±)", " ", "—Ç–∞", " ", "–ö–ü(–±)–£"), testList);

    testList = w.tokenize("–ù–µ–≥–æ–¥–∞ —î... –∑–∞—Å—Ç—É–ø–Ω–∏–∫–æ–º");
    assertEquals(Arrays.asList("–ù–µ–≥–æ–¥–∞", " ", "—î", "...", " ", "–∑–∞—Å—Ç—É–ø–Ω–∏–∫–æ–º"), testList);

    testList = w.tokenize("–ó–∞–ø–∞–≥—É–±–∏–ª–∏!.. —Ç–∞–∫–æ–∂");
    assertEquals(Arrays.asList("–ó–∞–ø–∞–≥—É–±–∏–ª–∏", "!..", " ", "—Ç–∞–∫–æ–∂"), testList);

    testList = w.tokenize("–¶–µ–π –≥—Ä–∞—Ñ–∏–Ω.");
    assertEquals(Arrays.asList("–¶–µ–π", " ", "–≥—Ä–∞—Ñ–∏–Ω", "."), testList);

    testList = w.tokenize("‚Äî –ì–º.");
    assertEquals(Arrays.asList("‚Äî", " ", "–ì–º", "."), testList);

    testList = w.tokenize("—Å—Ç—ñ–Ω\u00AD–∫—É");
    assertEquals(Arrays.asList("—Å—Ç—ñ–Ω\u00AD–∫—É"), testList);

    testList = w.tokenize("—Å—Ç—ñ–Ω\u00AD\n–∫—É");
    assertEquals(Arrays.asList("—Å—Ç—ñ–Ω\u00AD\n–∫—É"), testList);

    testList = w.tokenize("–ø\"—è–Ω–∏–π");
    assertEquals(Arrays.asList("–ø'—è–Ω–∏–π"), testList);

    testList = w.tokenize("–í–µ—Ä–µ—Ç–µ–Ω–∏—Ü—è**");
    assertEquals(Arrays.asList("–í–µ—Ä–µ—Ç–µ–Ω–∏—Ü—è", "**"), testList);

    testList = w.tokenize("–º–æ–≤—ñ***,");
    assertEquals(Arrays.asList("–º–æ–≤—ñ", "***", ","), testList);

    testList = w.tokenize("*–û—Ä–µ–Ω–±—É—Ä–≥");
    assertEquals(Arrays.asList("*", "–û—Ä–µ–Ω–±—É—Ä–≥"), testList);

    testList = w.tokenize("‚ñ∂–¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü—ñ—è");
    assertEquals(Arrays.asList("‚ñ∂", "–¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü—ñ—è"), testList);

    testList = w.tokenize("—É—Å–º—ñ—à–∫—ÉüòÅ");
    assertEquals(Arrays.asList("—É—Å–º—ñ—à–∫—É", "üòÅ"), testList);

    testList = w.tokenize("–∑*—è—Å—É–≤–∞–≤");
    assertEquals(Arrays.asList("–∑*—è—Å—É–≤–∞–≤"), testList);
  }

  @Test
  public void testAbbreviations() {
    List<String> testList = w.tokenize("–ó–∞—Å—ñ–¥–∞–≤ –Ü.–Ñ—Ä–º–æ–ª—é–∫.");
//    assertEquals(Arrays.asList("–ó–∞—Å—ñ–¥–∞–≤", " ", "–Ü.", "–Ñ—Ä–º–æ–ª—é–∫", "."), testList);

    testList = w.tokenize("–ó–∞—Å—ñ–¥–∞–≤ –Ü. –ü. –Ñ—Ä–º–æ–ª—é–∫.");
    assertEquals(Arrays.asList("–ó–∞—Å—ñ–¥–∞–≤", " ", "–Ü.", " ", "–ü.", " ", "–Ñ—Ä–º–æ–ª—é–∫", "."), testList);

    testList = w.tokenize("–ó–∞—Å—ñ–¥–∞–≤ –Ü.–ü.–Ñ—Ä–º–æ–ª—é–∫.");
    assertEquals(Arrays.asList("–ó–∞—Å—ñ–¥–∞–≤", " ", "–Ü.", "–ü.", "–Ñ—Ä–º–æ–ª—é–∫", "."), testList);

    testList = w.tokenize("–Ü.\u00A0–Ñ—Ä–º–æ–ª—é–∫.");
    assertEquals(Arrays.asList("–Ü.", "\u00A0", "–Ñ—Ä–º–æ–ª—é–∫", "."), testList);

    testList = w.tokenize("–ó–∞—Å—ñ–¥–∞–≤ –Ñ—Ä–º–æ–ª—é–∫ –Ü.");
    assertEquals(Arrays.asList("–ó–∞—Å—ñ–¥–∞–≤", " ", "–Ñ—Ä–º–æ–ª—é–∫", " ", "–Ü."), testList);

    testList = w.tokenize("–ó–∞—Å—ñ–¥–∞–≤ –Ñ—Ä–º–æ–ª—é–∫ –Ü. –ü.");
    assertEquals(Arrays.asList("–ó–∞—Å—ñ–¥–∞–≤", " ", "–Ñ—Ä–º–æ–ª—é–∫", " ", "–Ü.", " ", "–ü."), testList);

    testList = w.tokenize("–ó–∞—Å—ñ–¥–∞–≤ –Ñ—Ä–º–æ–ª—é–∫ –Ü. —Ç–∞ —ñ–Ω—à—ñ");
    assertEquals(Arrays.asList("–ó–∞—Å—ñ–¥–∞–≤", " ", "–Ñ—Ä–º–æ–ª—é–∫", " ", "–Ü.", " ", "—Ç–∞", " ", "—ñ–Ω—à—ñ"), testList);

    // —Å–∫–æ—Ä–æ—á–µ–Ω–Ω—è

    testList = w.tokenize("140 —Ç–∏—Å. –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫—ñ–≤");
    assertEquals(Arrays.asList("140", " ", "—Ç–∏—Å.", " ", "–ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫—ñ–≤"), testList);

    testList = w.tokenize("450 —Ç–∏—Å. 297 –≥—Ä–Ω");
    assertEquals(Arrays.asList("450", " ", "—Ç–∏—Å.", " ", "297", " ", "–≥—Ä–Ω"), testList);

    testList = w.tokenize("297 –≥—Ä–Ω...");
    assertEquals(Arrays.asList("297", " ", "–≥—Ä–Ω", "..."), testList);

//    testList = w.tokenize("297 –≥—Ä–Ω.!!!");
//    assertEquals(Arrays.asList("297", " ", "–≥—Ä–Ω.", "!!!"), testList);

//    testList = w.tokenize("297 –≥—Ä–Ω.??");
//    assertEquals(Arrays.asList("297", " ", "–≥—Ä–Ω.", "??"), testList);

    testList = w.tokenize("450 —Ç–∏—Å.");
    assertEquals(Arrays.asList("450", " ", "—Ç–∏—Å."), testList);

    testList = w.tokenize("354\u202F—Ç–∏—Å.");
    assertEquals(Arrays.asList("354", "\u202F", "—Ç–∏—Å."), testList);

    testList = w.tokenize("911 —Ç–∏—Å.–≥—Ä–Ω. –∑ –±—é–¥–∂–µ—Ç—É");
    assertEquals(Arrays.asList("911", " ", "—Ç–∏—Å.", "–≥—Ä–Ω", ".", " ", "–∑", " ", "–±—é–¥–∂–µ—Ç—É"), testList);

    testList = w.tokenize("–∑–∞ $400\n  —Ç–∏—Å., –∑–¥–∞–≤–∞–ª–æ—Å—è –±");
    assertEquals(Arrays.asList("–∑–∞", " ", "$400", "\n", " ", " ", "—Ç–∏—Å.", ",", " ", "–∑–¥–∞–≤–∞–ª–æ—Å—è", " ", "–±"), testList);

    testList = w.tokenize("–Ω–∞–π–≤–∞–∂—á–æ–≥–æ –∂–∞–Ω—Ä—É‚Äî –æ–ø–æ–≤—ñ–¥–∞–Ω–Ω—è");
    assertEquals(Arrays.asList("–Ω–∞–π–≤–∞–∂—á–æ–≥–æ", " ", "–∂–∞–Ω—Ä—É", "‚Äî", " ", "–æ–ø–æ–≤—ñ–¥–∞–Ω–Ω—è"), testList);

    testList = w.tokenize("–ø—Ä–æ—Ñ. –ê—Ä—Ç—é—Ö–æ–≤");
    assertEquals(Arrays.asList("–ø—Ä–æ—Ñ.", " ", "–ê—Ä—Ç—é—Ö–æ–≤"), testList);

    testList = w.tokenize("–ø—Ä–æ—Ñ.\u00A0–ê—Ä—Ç—é—Ö–æ–≤");
    assertEquals(Arrays.asList("–ø—Ä–æ—Ñ.", "\u00A0", "–ê—Ä—Ç—é—Ö–æ–≤"), testList);

    testList = w.tokenize("–∫—É—Ç—é\u00A0‚Äî —â–µ–¥—Ä—É");
    assertEquals(Arrays.asList("–∫—É—Ç—é", "\u00A0", "‚Äî", " ", "—â–µ–¥—Ä—É"), testList);

    testList = w.tokenize("—Ç–∞–∫–æ–∂ –∑–∞–≤. –≤—ñ–¥–¥—ñ–ª–æ–º");
    assertEquals(Arrays.asList("—Ç–∞–∫–æ–∂", " ", "–∑–∞–≤.", " ", "–≤—ñ–¥–¥—ñ–ª–æ–º"), testList);

    testList = w.tokenize("–¥–æ –Ω. –µ.");
    assertEquals(Arrays.asList("–¥–æ", " ", "–Ω.", " ", "–µ."), testList);
 
    testList = w.tokenize("–¥–æ –Ω.–µ.");
    assertEquals(Arrays.asList("–¥–æ", " ", "–Ω.", "–µ."), testList);

    testList = w.tokenize("–≤. –æ. –Ω–∞—á–∞–ª—å–Ω–∏–∫–∞");
    assertEquals(Arrays.asList("–≤.", " ", "–æ.", " ", "–Ω–∞—á–∞–ª—å–Ω–∏–∫–∞"), testList);

    testList = w.tokenize("–≤.–æ. –Ω–∞—á–∞–ª—å–Ω–∏–∫–∞");
    assertEquals(Arrays.asList("–≤.", "–æ.", " ", "–Ω–∞—á–∞–ª—å–Ω–∏–∫–∞"), testList);

    testList = w.tokenize("100 –∫.—Å.");
    assertEquals(Arrays.asList("100", " ", "–∫.", "—Å."), testList);

    testList = w.tokenize("1998 —Ä.–Ω.");
    assertEquals(Arrays.asList("1998", " ", "—Ä.", "–Ω."), testList);

    testList = w.tokenize("22 –∫–æ–ø.");
    assertEquals(Arrays.asList("22", " ", "–∫–æ–ø."), testList);

    testList = w.tokenize("800 –≥—Ä. –º'—è—Å–∞");
    assertEquals(Arrays.asList("800", " ", "–≥—Ä.", " ", "–º'—è—Å–∞"), testList);

    testList = w.tokenize("18-19 —Å—Ç.—Å—Ç. –±—É–ª–∏");
    assertEquals(Arrays.asList("18-19", " ", "—Å—Ç.", "—Å—Ç.", " ", "–±—É–ª–∏"), testList);
    
    testList = w.tokenize("–Ü —Å—Ç. 11");
    assertEquals(Arrays.asList("–Ü", " ", "—Å—Ç.", " ", "11"), testList);

    testList = w.tokenize("–∫—É–±. –º");
    assertEquals(Arrays.asList("–∫—É–±.", " ", "–º"), testList);

    testList = w.tokenize("–∫—É–±.–º");
    assertEquals(Arrays.asList("–∫—É–±.", "–º"), testList);

    testList = w.tokenize("–£ —Å. –í–∏–∂–≤–∞");
    assertEquals(Arrays.asList("–£", " ", "—Å.", " ", "–í–∏–∂–≤–∞"), testList);

    testList = w.tokenize("–î–æ–≤–∂–∏–Ω–æ—é 30 —Å–º. –∑ –≥–∞–∫–æ–º.");
    assertEquals(Arrays.asList("–î–æ–≤–∂–∏–Ω–æ—é", " ", "30", " ", "—Å–º", ".", " ", "–∑", " ", "–≥–∞–∫–æ–º", "."), testList);

    testList = w.tokenize("–î–æ–≤–∂–∏–Ω–æ—é 30 —Å–º. –ü–æ—ó—Ö–∞–ª–∏.");
    assertEquals(Arrays.asList("–î–æ–≤–∂–∏–Ω–æ—é", " ", "30", " ", "—Å–º", ".", " ", "–ü–æ—ó—Ö–∞–ª–∏", "."), testList);

    testList = w.tokenize("100 –º. –¥–æ—Ä–æ–≥–∏.");
    assertEquals(Arrays.asList("100", " ", "–º", ".", " ", "–¥–æ—Ä–æ–≥–∏", "."), testList);

    testList = w.tokenize("–ù–∞ –≤–∏—Å–æ—Ç—ñ 4000 –º...");
    assertEquals(Arrays.asList("–ù–∞", " ", "–≤–∏—Å–æ—Ç—ñ", " ", "4000", " ", "–º", "..."), testList);

    testList = w.tokenize("‚Ññ47 (–º. –°–ª–æ–≤'—è–Ω—Å—å–∫)");
    assertEquals(Arrays.asList("‚Ññ47", " ", "(", "–º.", " ", "–°–ª–æ–≤'—è–Ω—Å—å–∫", ")"), testList);

    testList = w.tokenize("—Å.-–≥.");
    assertEquals(Arrays.asList("—Å.-–≥."), testList);

    testList = w.tokenize("100 –≥—Ä–Ω. –≤ –±–∞–Ω–∫");
    assertEquals(Arrays.asList("100", " ", "–≥—Ä–Ω", ".", " ", "–≤", " ", "–±–∞–Ω–∫"), testList);
    
    testList = w.tokenize("—Ç–∞–∫–µ —Ç–∞ —ñ–Ω.");
    assertEquals(Arrays.asList("—Ç–∞–∫–µ", " ", "—Ç–∞", " ", "—ñ–Ω."), testList);

    testList = w.tokenize("—ñ —Ç. —ñ–Ω.");
    assertEquals(Arrays.asList("—ñ", " ", "—Ç.", " ", "—ñ–Ω."), testList);

    testList = w.tokenize("—ñ —Ç.–¥.");
    assertEquals(Arrays.asList("—ñ", " ", "—Ç.", "–¥."), testList);

    testList = w.tokenize("–¥–æ —Ç. –∑–≤. —Å–∞–ª—å–æ–Ω—É");
    assertEquals(Arrays.asList("–¥–æ", " ", "—Ç.", " ", "–∑–≤.", " ", "—Å–∞–ª—å–æ–Ω—É"), testList);

    testList = w.tokenize(" —ñ –ø–æ–¥.");
    assertEquals(Arrays.asList(" ", "—ñ", " ", "–ø–æ–¥."), testList);

    testList = w.tokenize("–Ü–Ω—Å—Ç–∏—Ç—É—Ç —ñ–º. –∞–∫–∞–¥. –í–µ—Ä–Ω–∞–¥—Å—å–∫–æ–≥–æ.");
    assertEquals(Arrays.asList("–Ü–Ω—Å—Ç–∏—Ç—É—Ç", " ", "—ñ–º.", " ", "–∞–∫–∞–¥.", " ", "–í–µ—Ä–Ω–∞–¥—Å—å–∫–æ–≥–æ", "."), testList);

    testList = w.tokenize("–ü–∞–ª–∞—Ü —ñ–º. –≥–µ—Ç—å–º–∞–Ω–∞ –°–∫–æ—Ä–æ–ø–∞–¥—Å—å–∫–æ–≥–æ.");
    assertEquals(Arrays.asList("–ü–∞–ª–∞—Ü", " ", "—ñ–º.", " ", "–≥–µ—Ç—å–º–∞–Ω–∞", " ", "–°–∫–æ—Ä–æ–ø–∞–¥—Å—å–∫–æ–≥–æ", "."), testList);

    testList = w.tokenize("–≤—ñ–¥ –ª–∞—Ç. momento");
    assertEquals(Arrays.asList("–≤—ñ–¥", " ", "–ª–∞—Ç.", " ", "momento"), testList);

    testList = w.tokenize("–Ω–∞ 1-–∫—ñ–º–Ω. –∫–≤. –≤ —Ü–µ–Ω—Ç—Ä—ñ");
    assertEquals(Arrays.asList("–Ω–∞", " " , "1-–∫—ñ–º–Ω.", " ", "–∫–≤.", " ", "–≤", " ", "—Ü–µ–Ω—Ç—Ä—ñ"), testList);
    
    testList = w.tokenize("–í–∞–ª–µ—Ä—ñ–π (–º—ñ–ª—ñ—Ü—ñ–æ–Ω–µ—Ä-–ø–∞—Ä–æ–¥–∏—Å—Ç.\n‚Äì  –ê–≤—Ç.) —Å—Ç–∞–Ω–µ –ø–∞—Ä–æ–¥–∏—Å—Ç–æ–º.");
    assertEquals(Arrays.asList("–í–∞–ª–µ—Ä—ñ–π", " ", "(", "–º—ñ–ª—ñ—Ü—ñ–æ–Ω–µ—Ä-–ø–∞—Ä–æ–¥–∏—Å—Ç", ".", "\n", "‚Äì", " ", " ", "–ê–≤—Ç.", ")", " ", "—Å—Ç–∞–Ω–µ", " ", "–ø–∞—Ä–æ–¥–∏—Å—Ç–æ–º", "."), testList);

    testList = w.tokenize("–°—å–æ–≥–æ–¥–Ω—ñ (—É —á–µ—Ç–≤–µ—Ä.  ‚Äî –†–µ–¥.), –≤—Ä–∞–Ω—Ü—ñ.");
    assertEquals(Arrays.asList("–°—å–æ–≥–æ–¥–Ω—ñ", " ", "(", "—É", " ", "—á–µ—Ç–≤–µ—Ä", ".", " ", " ", "‚Äî", " ", "–†–µ–¥.", ")", ",", " ", "–≤—Ä–∞–Ω—Ü—ñ", "."), testList);
 
    testList = w.tokenize("Fair trade [¬´–°–ø—Ä–∞–≤–µ–¥–ª–∏–≤–∞ —Ç–æ—Ä–≥—ñ–≤–ª—è¬ª. ‚Äì    –ê–≤—Ç.], —è–∫–∏–π —Å—Ç–µ–∂–∏—Ç—å –∑–∞ —Ç–∏–º, —â–æ–± —É –∫—Ä–∞—ó–Ω–∞—Ö");
    assertTrue(testList.toString(), testList.contains("–ê–≤—Ç."));
    
    testList = w.tokenize("–¥–∏–≤–æ –∑ –¥–∏–≤.");
    assertEquals(Arrays.asList("–¥–∏–≤–æ", " ", "–∑", " ", "–¥–∏–≤", "."), testList);
    
    testList = w.tokenize("–¥–∏–≤–æ –∑ –¥–∏–≤...");
    assertEquals(Arrays.asList("–¥–∏–≤–æ", " ", "–∑", " ", "–¥–∏–≤", "..."), testList);

    testList = w.tokenize("—Ç–µ–ª.: 044-425-20-63");
    assertEquals(Arrays.asList("—Ç–µ–ª.", ":", " ", "044-425-20-63"), testList);

    testList = w.tokenize("—Å/–≥");
    assertEquals(Arrays.asList("—Å/–≥"), testList);

    testList = w.tokenize("—ñ–º.–í–∞—Å–∏–ª—è");
    assertEquals(Arrays.asList("—ñ–º.", "–í–∞—Å–∏–ª—è"), testList);

    testList = w.tokenize("—Å—Ç.231");
    assertEquals(Arrays.asList("—Å—Ç.", "231"), testList);

    testList = w.tokenize("2016-2017—Ä—Ä.");
    assertEquals(Arrays.asList("2016-2017", "—Ä—Ä."), testList);

    testList = w.tokenize("30.04.2010—Ä.");
    assertEquals(Arrays.asList("30.04.2010", "—Ä."), testList);

    testList = w.tokenize("–Ω—ñ –º–æ–≥–∏–ª–∏ 6–≤. ");
    assertEquals(Arrays.asList("–Ω—ñ", " ", "–º–æ–≥–∏–ª–∏", " ", "6–≤", ".", " "), testList);

    // not too frequent
//    testList = w.tokenize("30.04.10—Ä.");
//    assertEquals(Arrays.asList("30.04.10", "—Ä."), testList);
  }

}
