/*
 * LanguageTool, a natural language style checker
 * Copyright (C) 2025 Stefan Viol (https://stevio.de)
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301
 * USA
 */

package org.languagetool;

import org.checkerframework.checker.units.qual.C;
import org.junit.Test;
import org.languagetool.markup.AnnotatedText;
import org.languagetool.markup.AnnotatedTextBuilder;
import org.languagetool.rules.RuleMatch;
import org.languagetool.tools.Cache.CacheUtils;
import org.languagetool.tools.Cache.ProtoResultCache;
import org.languagetool.tools.RuleMatchesAsJsonSerializer;

import java.io.IOException;
import java.util.*;

import static org.apache.commons.lang3.builder.EqualsBuilder.reflectionEquals;
import static org.junit.Assert.*;

public class ProtoResultMatchCacheTest {

  private final RuleMatchesAsJsonSerializer ruleMatchesAsJsonSerializer = new RuleMatchesAsJsonSerializer();

  @Test
  public void runTests() throws IOException {
    List<String> enText1 = Arrays.asList(
      "Something with words. ",
      "Tis ist totalli misbeled end haz o lat ov erorß. ",
      "Now some sentences generated by openAI!. ",
      "She dont like pizza because it’s too grezzy. ",
      "There going to the park later, do you wanna come? ",
      "I haves never seen a movie so boring like that one. ",
      "The cat chased its' tail around the living room. ",
      "He runned as fast as he could but still losed the race. ",
      "This book is more better then the one I read last week. ",
      "We was planning to go to the beach but it raineded. ",
      "Your the best friend I ever had, I appreciate you alot. ",
      "The car needs fix before we can go on our trip. ",
      "She sings gooder than anyone else in the choir."
    );
    compareRuleMatches(enText1, "en-US");

    List<String> enText2 = Arrays.asList(
      "Yesterday I goes to the park with my friends. ",
      "We was very happy because the sun was shining and the weather was warm. ",
      "We bringed some food and drinks for have a picnic. ",
      "My friend Tom say me that he forget his sandwich at home, so I gived him one of mine."
    );
    compareRuleMatches(enText2, "en-US");

    List<String> enText3 = Arrays.asList(
      "Last weekend, me and my family goes to the zoo. ",
      "It was a amazing day because we seen many animals. ",
      "The lions was sleeping when we arrived, but the monkeys was very active. ",
      "They was jumping and screaming loud. ",
      "My little sister was so exciting that she runned to the elephant area without wait for us. ",
      "\"Look, the elephants is so big!\" she say. ",
      "We buyed some popcorn and eated it while watching the giraffes. ",
      "The weather was very nice, but later it start to rain, so we leaved early. ",
      "I hope we can go there again soonly."
    );
    compareRuleMatches(enText3, "en-US");

    List<String> enText4 = Arrays.asList(
      "One of my favorit movie is \"Harry Potter\". ",
      "I watched it many times and never get boring. ",
      "The story is about a boy who find out that he is a wizzard and goes to a magic school. ",
      "He makes two best friends and together they has many adventures. ",
      "The special effects in the movie is very cool, specially the magic spells. ",
      "I also love the soundtrack because it sounds very beautiful. ",
      "My brother don't like the movie, he say it is too long and slow. ",
      "But for me, it is the best movie I ever seen."
    );
    compareRuleMatches(enText4, "en-US");

    List<String> deText1 = Arrays.asList(
      "Gestern ich geht in den Park mit meine Freunden. ",
      "Es war ein schöne Tag, weil die Sonne gescheint hat und das Wetter war warm. ",
      "Wir hat Essen und Getränke mitgebracht für machen ein Picknick. ",
      "Mein Freund Tom sagt mir, dass er hat seine Sandwich zuhause vergessen, also ich gab ihm eine von meine. ",
      "Nach das Essen, wir entscheidet uns Fußball zu spielen. ",
      "Alle war sehr schnell gelaufen, aber ich bin gefallen weil meine Schuhe zu groß war. ",
      "Niemand hat es erste gesehen, aber dann sie helfen mir aufstehen. ",
      "Es war ein sehr lustige Tag und ich will es bald wieder machen."
    );
    compareRuleMatches(deText1, "de-DE");

    List<String> deText2 = Arrays.asList(
      "Einer meine Lieblingsfilm ist \"Harry Potter\". ",
      "Ich habe es viele mal geschaut und wird nie langweilig. ",
      "Die Geschichte geht über ein Junge, der entdeckt dass er ein Zauberer ist und geht in eine magische Schule. ",
      "Er macht zwei beste Freunde und zusammen sie haben viele Abenteuer. ",
      "Die Spezialeffekte im Film ist sehr cool, besonders die Zaubersprüche. ",
      "Ich liebe auch die Musik, weil es klingt sehr schön. ",
      "Mein Bruder mag das Film nicht, er sagt es ist zu lang und langsam. ",
      "Aber für mich, es ist die beste Film was ich je gesehen habe."
    );
    compareRuleMatches(deText2, "de-DE");

    List<String> deText3 = Arrays.asList(
      "Letzte Wochenende, ich und meine Familie geht in den Zoo. ",
      "Es war ein tolle Tag, weil wir haben viele Tiere gesehen. ",
      "Die Löwen war am schlafen, als wir angekommen, aber die Affen war sehr aktiv. ",
      "Sie springt und schreit laut. ",
      "Meine kleine Schwester war so aufregend, dass sie ist zu den Elefanten Bereich gerannt ohne warten für uns. ",
      "\"Schau, die Elefanten ist so groß!\" sie sagt. ",
      "Wir kauften Popcorn und gegessen es während wir die Giraffen anschauen. ",
      "Das Wetter war schön, aber später es fangt an zu regnen, also wir verlassen früh. ",
      "Ich hoffe, wir kann bald nochmal gehen."
    );
    compareRuleMatches(deText3, "de-DE");

    List<String> frText1 = Arrays.asList(
      "Hier je vais au parc avec mes amis. ",
      "Nous était très content parce que le soleil brillait et le temps était chaud. ",
      "Nous avons apporté des nourritures et des boissons pour faire un pique-nique. ",
      "Mon ami Tom me dit qu'il a oublié son sandwich à la maison, alors je lui a donné un des miens. ",
      "Après manger, nous décide de jouer au football. ",
      "Tout le monde courait très vite, mais je suis tombé parce que mes chaussures était trop grandes. ",
      "Personne ne vois ça au début, mais après ils m'aident à me relever. ",
      "C'était une journée très drôle et je veux le faire encore bientôt."
    );
    compareRuleMatches(frText1, "fr-FR");

    List<String> frText2 = Arrays.asList(
      "Un de mes film préféré est \"Harry Potter\". ",
      "Je l'ai regardé beaucoup des fois et je ne s'ennuie jamais. ",
      "L'histoire est sur un garçon qui découvre qu'il est un magicien et il va à une école magique. ",
      "Il fait deux meilleurs amis et ensemble ils a beaucoup d'aventures. ",
      "Les effets spécials dans le film est très cool, surtout les sorts magiques. ",
      "J'aime aussi la musique parce que ça sonne très belle. ",
      "Mon frère n'aime pas le film, il dit c'est trop long et lent. ",
      "Mais pour moi, c'est le meilleur film que j'ai jamais vu."
    );
    compareRuleMatches(frText2, "fr-FR");

    List<String> frText3 = Arrays.asList(
      "Le dernier weekend, moi et ma famille allons au zoo. ",
      "C'était un jour magnifique parce que nous avons voir beaucoup d'animaux. ",
      "Les lions dormaient quand nous arrivons, mais les singes était très actifs. ",
      "Ils saute et cri fort. ",
      "Ma petite sœur était si excitée qu'elle couru vers la zone des éléphants sans attendre pour nous. ",
      "\"Regarde, les éléphants est si grand !\" elle dit. ",
      "Nous avons acheté du pop-corn et avons mangé ça en regardant les girafes. ",
      "Le temps était beau, mais après il commence à pleuvoir, alors nous partons tôt. ",
      "J'espère que nous peut y aller encore bientôt."
    );
    compareRuleMatches(frText3, "fr-FR");

    List<String> esText1 = Arrays.asList(
      "Ayer yo va al parque con mis amigos. ",
      "Nosotros era muy feliz porque el sol brillaba y el clima era caliento. ",
      "Traemos comida y bebidas para hacer un picnic. ",
      "Mi amigo Tom me dice que el olvido su sándwich en casa, entonces yo le doy uno de mio. ",
      "Después de comer, nosotros decide jugar al fútbol. ",
      "Todos corrian muy rapido, pero yo me caí porque mis zapatos era demasiado grande. ",
      "Nadie no ve eso al principio, pero después ellos me ayuda a levantar. ",
      "Era un día muy divertido y quiero hacerlo otra vez pronto."
    );
    compareRuleMatches(esText1, "es-ES");

    List<String> esText2 = Arrays.asList(
      "Uno de mis película favorito es \"Harry Potter\". ",
      "Yo lo he mirado muchas veces y nunca me aburro. ",
      "La historia trata sobre un niño que descubre que el es un mago y va a una escuela mágica. ",
      "El hace dos mejor amigos y juntos ellos tiene muchas aventuras. ",
      "Los efectos especial en la película es muy bueno, especialmente los hechizos. ",
      "También me gusta la música porque suena muy bonito. ",
      "Mi hermano no le gusta la película, el dice es demasiado largo y lento. ",
      "Pero para mí, es el mejor película que yo nunca he visto."
    );
    compareRuleMatches(esText2, "es-ES");

    List<String> esText3 = Arrays.asList(
      "El último fin de semana, yo y mi familia vamos al zoológico. ",
      "Fue un día muy bonita porque vimos muchos animales. ",
      "Los leones estaba durmiendo cuando llegamos, pero los monos era muy activo. ",
      "Ellos saltan y grita fuerte. ",
      "Mi hermana pequeña estaba tan emocionada que ella corrió a la zona de elefantes sin esperar para nosotros. ",
      "\"Mira, los elefantes es tan grande!\" ella dice. ",
      "Compramos palomitas y lo comimos mientras miramos las jirafas. ",
      "El clima era bueno, pero después empieza a llover, entonces nos vamos temprano. ",
      "Espero que nosotros puede ir otra vez pronto."
    );
    compareRuleMatches(esText3, "es-ES");

    List<String> nlText1 = Arrays.asList(
      "Gisteren ik gaat naar het park met mijn vrienden. ",
      "We waren zeer gelukkig omdat de zon scheen en het weer was warm. ",
      "We bracht eten en drinken voor maken een picknick. ",
      "Mijn vriend Tom zegt mij dat hij zijn broodje thuis vergeten heeft, dus ik gaf hem één van mijne. ",
      "Na het eten, besluiten we om voetbal te spelen. ",
      "Iedereen liep snel, maar ik viel omdat mijn schoenen te groot was. ",
      "Niemand zag het eerst, maar daarna helpen ze mij opstaan. ",
      "Het was een heel grappige dag en ik wil het snel nog eens doen."
    );
    compareRuleMatches(nlText1, "nl-NL");

    List<String> nlText2 = Arrays.asList(
      "Een van mijn favoriete films is \"Harry Potter\". ",
      "Ik heb het veel keren gekeken en het wordt nooit saai. ",
      "Het verhaal is over een jongen die ontdekt dat hij een tovenaar is en naar een magische school gaat. ",
      "Hij maakt twee beste vrienden en samen hebben ze veel avonturen. ",
      "De speciaule effecten in de film is heel cool, vooral de toverspreuken. ",
      "Ik hou ook van de muziek omdat het klinkt heel mooi. ",
      "Mijn broer houdt niet van de film, hij zegt dat het te lang en traag is. ",
      "Maar voor mij, het is de beste film die ik ooit gezien heb."
    );
    compareRuleMatches(nlText2, "nl-NL");

    List<String> nlText3 = Arrays.asList(
      "Het afgelopen weekend, ik en mijn familie gaan naar de dierentuin. ",
      "Het was een heel mooie dag omdat we veel dieren gezien hebben. ",
      "De leeuwen sliepen toen we aankwamen, maar de apen was heel actief. ",
      "Ze springen en schreeuwen luid. ",
      "Mijn kleine zusje was zo opgewonden dat ze naar de olifantenzone rennen zonder op ons te wachten. ",
      "\"Kijk, de olifanten is zo groot!\" zegt ze. ",
      "We kochten popcorn en aten het terwijl we de giraffen bekeken. ",
      "Het weer was mooi, maar later begon het te regenen, dus we gingen vroeg weg. ",
      "Ik hoop dat we snel weer kunnen gaan."
    );
    compareRuleMatches(nlText3, "nl-NL");

    List<String> ptText1 = Arrays.asList(
      "Ontem eu vai ao parque com meus amigos. ",
      "Nós era muito feliz porque o sol brilhava e o tempo era quente. ",
      "Nós trouxe comida e bebidas para fazer um piquenique. ",
      "Meu amigo Tom me disse que ele esqueceu seu sanduíche em casa, então eu dei um dos meus para ele. ",
      "Depois de comer, nós decide jogar futebol. ",
      "Todos corriam muito rápido, mas eu caí porque meus sapatos era grande demais. ",
      "Ninguém não viu isso no começo, mas depois eles me ajuda a levantar. ",
      "Foi um dia muito divertido e eu quer fazer isso de novo logo."
    );
    compareRuleMatches(ptText1, "pt-PT");

    List<String> ptText2 = Arrays.asList(
      "Um dos meus filme favorito é \"Harry Potter\". ",
      "Eu assisti ele muitas vezes e nunca fica chato. ",
      "A história é sobre um menino que descobre que ele é um mágico e vai para uma escola de magia. ",
      "Ele faz dois melhor amigos e juntos eles tem muitas aventuras. ",
      "Os efeitos especial no filme é muito bom, especialmente os feitiços. ",
      "Eu também gosto da música porque soa muito bonito. ",
      "Meu irmão não gosta do filme, ele disse que é muito longo e devagar. ",
      "Mas para mim, é o melhor filme que eu nunca vi."
    );
    compareRuleMatches(ptText2, "pt-PT");

    List<String> ptText3 = Arrays.asList(
      "No último fim de semana, eu e minha família vamos ao zoológico. ",
      "Foi um dia muito lindo porque nós vimos muitos animais. ",
      "Os leões estava dormindo quando nós chegamos, mas os macacos era muito ativo. ",
      "Eles pula e grita alto. ",
      "Minha irmã pequena estava tão animada que ela correu para a área dos elefantes sem esperar para nós. ",
      "\"Olha, os elefantes é tão grande!\" ela disse. ",
      "Nós compramos pipoca e comemos isso enquanto olhamos as girafas. ",
      "O tempo era bom, mas depois começa a chover, então nós saiu cedo. ",
      "Eu espero que nós pode ir de novo logo."
    );
    compareRuleMatches(ptText3, "pt-PT");

    List<String> ptBRText1 = Arrays.asList(
      "Ontem eu vai ao parque com meus amigos. ",
      "Nosotros estava muito feliz porque o sol brilhava e o clima estava quente. ",
      "Nos trouxe comida e bebidas pra fazer um piquenique. ",
      "Meu amigo Tom me disse que ele esqueceu seu sanduíche em casa, então eu dei um dos meus pra ele. ",
      "Depois de comer, a gente decide jogar futebol. ",
      "Todo mundo correu muito rápido, mas eu caí porque meus sapatos era muito grande. ",
      "Ninguem viu isso no começo, mas depois eles me ajudam a levantar. ",
      "Foi um dia muito legal e eu quero fazer de novo logo."
    );
    compareRuleMatches(ptBRText1, "pt-BR");

    List<String> ptBRText2 = Arrays.asList(
      "Um dos meus filme favorito é \"Harry Potter\". ",
      "Eu assisti ele muitas vezes e nunca ficou chato. ",
      "A história é sobre um menino que descobre que ele é um magico e vai pra uma escola de magia. ",
      "Ele faz dois melhores amigos e juntos eles tem varias aventuras. ",
      "Os efeitos especiais no filme é muito legal, principalmente os feitiços. ",
      "Eu também gosto muito da música porque ela soa muito bonito. ",
      "Meu irmão não gosta do filme, ele disse que é muito longo e devagar. ",
      "Mas pra mim, é o melhor filme que eu já vi."
    );
    compareRuleMatches(ptBRText2, "pt-BR");

    List<String> ptBRText3 = Arrays.asList(
      "No último fim de semana, eu e minha família fomos no zoológico. ",
      "Foi um dia muito bonito porque a gente viu muitos animais. ",
      "Os leões tava dormindo quando a gente chegou, mas os macacos estavam bem ativos. ",
      "Eles saltam e gritam bem alto. ",
      "Minha irmã pequena tava tão animada que ela correu pra zona dos elefantes sem esperar a gente. ",
      "\"Olha, os elefantes são tão grande!\" ela disse. ",
      "A gente comprou pipoca e comemos enquanto assistíamos as girafas. ",
      "O tempo tava bom, mas depois começou a chover, então a gente foi embora cedo. ",
      "Eu espero que a gente possa ir de novo em breve."
    );
    compareRuleMatches(ptBRText3, "pt-BR");
  }

  private void compareRuleMatches(List<String> sentences, String languageCode) throws IOException {
    Language usedLanguage = Languages.getLanguageForShortCode(languageCode);
    JLanguageTool lt = new JLanguageTool(usedLanguage);
    String text = String.join("", sentences);
    AnnotatedText annotatedText = new AnnotatedTextBuilder().addText(text).build();
    List<AnalyzedSentence> analyzedSentences = lt.analyzeSentences(sentences);

    //need this to make sure analyzedSentence here is the same as in the for loop
    List<RuleMatch> ruleMatches = lt.checkInternal(annotatedText, JLanguageTool.ParagraphHandling.NORMAL, null, JLanguageTool.Mode.ALL, JLanguageTool.Level.PICKY, null, sentences, analyzedSentences).getRuleMatches();
    assertFalse(ruleMatches.isEmpty());
    List<RuleMatch> cachedRuleMatches = new ArrayList<>();
    for (RuleMatch ruleMatch : ruleMatches) {

      ProtoResultCache.CachedResultMatch cachedResultMatch = CacheUtils.serializeResultMatch(ruleMatch);
      RuleMatch deserializedResultMatch = CacheUtils.deserializeResultMatch(cachedResultMatch, ruleMatch.getSentence());

      assertEquals(ruleMatch.getRule().getId(), deserializedResultMatch.getRule().getId());
      assertEquals(ruleMatch.getRule().getFullId(), deserializedResultMatch.getRule().getFullId());
      assertEquals(ruleMatch.getRule().getSubId(), deserializedResultMatch.getRule().getSubId());
      assertEquals(ruleMatch.getRule().getDescription(), deserializedResultMatch.getRule().getDescription());
      assertEquals(ruleMatch.getRule().estimateContextForSureMatch(), deserializedResultMatch.getRule().estimateContextForSureMatch());
      assertEquals(ruleMatch.getRule().getSourceFile(), deserializedResultMatch.getRule().getSourceFile());
      assertEquals(ruleMatch.getRule().getLocQualityIssueType(), deserializedResultMatch.getRule().getLocQualityIssueType());
      assertEquals(ruleMatch.getRule().isDefaultTempOff(), deserializedResultMatch.getRule().isDefaultTempOff());
      assertEquals(ruleMatch.getRule().getCategory().getName(), deserializedResultMatch.getRule().getCategory().getName());
      assertEquals(ruleMatch.getRule().isPremium(), deserializedResultMatch.getRule().isPremium());
      assertEquals(ruleMatch.getRule().getTags(), deserializedResultMatch.getRule().getTags());

      assertEquals(ruleMatch.getMessage(), deserializedResultMatch.getMessage());
      assertEquals(ruleMatch.getShortMessage(), deserializedResultMatch.getShortMessage());
      assertEquals(ruleMatch.getPatternFromPos(), deserializedResultMatch.getPatternFromPos());
      assertEquals(ruleMatch.getPatternToPos(), deserializedResultMatch.getPatternToPos());
      assertEquals(ruleMatch.getFromPos(), deserializedResultMatch.getFromPos());
      assertEquals(ruleMatch.getToPos(), deserializedResultMatch.getToPos());
      assertEquals(ruleMatch.getFromPosSentence(), deserializedResultMatch.getFromPosSentence());
      assertEquals(ruleMatch.getToPosSentence(), deserializedResultMatch.getToPosSentence());
      assertEquals(ruleMatch.getSuggestedReplacementObjects(), deserializedResultMatch.getSuggestedReplacementObjects());
      assertEquals(ruleMatch.getUrl() != null ? ruleMatch.getUrl() : ruleMatch.getRule().getUrl(), deserializedResultMatch.getUrl());
      assertEquals(ruleMatch.getType(), deserializedResultMatch.getType());
      assertEquals(ruleMatch.isAutoCorrect(), deserializedResultMatch.isAutoCorrect());
      assertEquals(ruleMatch.getNewLanguageMatches(), deserializedResultMatch.getNewLanguageMatches());
      assertEquals(ruleMatch.getSpecificRuleId(), deserializedResultMatch.getSpecificRuleId());
      assertEquals(ruleMatch.getOriginalErrorStr(), deserializedResultMatch.getOriginalErrorStr());
      assertEquals(ruleMatch.getSentence(), deserializedResultMatch.getSentence());


      assertEquals(ruleMatch, deserializedResultMatch);

      assertTrue(reflectionEquals(ruleMatch, deserializedResultMatch, Arrays.asList("rule", "linePosition", "columnPosition", "suggestedReplacements", "suggestionsComputed", "url", "specificRuleId")));
      cachedRuleMatches.add(deserializedResultMatch);
    }
    CheckResults checkResultsOrig = new CheckResults(ruleMatches, Collections.emptyList(), Collections.emptyList());
    CheckResults checkResultsFromCache = new CheckResults(cachedRuleMatches, Collections.emptyList(), Collections.emptyList());
    String jsonOrig = ruleMatchesAsJsonSerializer.ruleMatchesToJson2(Collections.singletonList(checkResultsOrig), Collections.emptyList(), annotatedText, 40, new DetectedLanguage(usedLanguage, usedLanguage, 0.99f, "fake"), null, true, JLanguageTool.Mode.ALL);
    String jsonFromCache = ruleMatchesAsJsonSerializer.ruleMatchesToJson2(Collections.singletonList(checkResultsFromCache), Collections.emptyList(), annotatedText, 40, new DetectedLanguage(usedLanguage, usedLanguage, 0.99f, "fake"), null, true, JLanguageTool.Mode.ALL);
    assertFalse(jsonOrig.isEmpty());
    assertFalse(jsonFromCache.isEmpty());
    assertEquals(jsonOrig, jsonFromCache);
  }
}
